
COTSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000046aa  0000473e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800082  00800082  00004760  2**0
                  ALLOC
  3 .stab         0000513c  00000000  00000000  00004760  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c9a  00000000  00000000  0000989c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b536  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b676  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b7e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d42f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e31a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fc83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_1>
       8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__vector_2>
       c:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_10>
      2c:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <main>
      8a:	0c 94 53 23 	jmp	0x46a6	; 0x46a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2c 23 	jmp	0x4658	; 0x4658 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_voidEnable>:
#include"WDT_private.h"
#include"WDT_interface.h"


void WDT_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_WDTCR , 3) ;
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WDT_voidDisable>:
void WDT_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62

	/* Write logical one to WDTOE and WDE */
	WDT_WDTCR = (1<<4) | (1<<3);
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDT_WDTCR = 0x00;
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1


}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <WDT_voidSetTime>:
void WDT_voidSetTime(u8 Copy_ResetTime)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	WDT_WDTCR &= 0b11111000 ;
     b8a:	a1 e4       	ldi	r26, 0x41	; 65
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e1 e4       	ldi	r30, 0x41	; 65
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	88 7f       	andi	r24, 0xF8	; 248
     b96:	8c 93       	st	X, r24
	WDT_WDTCR |= Copy_ResetTime ;
     b98:	a1 e4       	ldi	r26, 0x41	; 65
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e1 e4       	ldi	r30, 0x41	; 65
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	90 81       	ld	r25, Z
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24

}
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <UART_voidInit>:
#include"UART_config.h"
#include"UART_private.h"
#include"UART_interface.h"

void UART_voidInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
	//Select UCSRA
	SET_BIT(UART_UCSRC_REG , 7) ;
     bb8:	a0 e4       	ldi	r26, 0x40	; 64
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e0 e4       	ldi	r30, 0x40	; 64
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	8c 93       	st	X, r24

	//selsect Asynch(baud rate)
	CLR_BIT(UART_UCSRC_REG , 6) ;
     bc6:	a0 e4       	ldi	r26, 0x40	; 64
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e0 e4       	ldi	r30, 0x40	; 64
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8f 7b       	andi	r24, 0xBF	; 191
     bd2:	8c 93       	st	X, r24

	//parity disable(error)
	CLR_BIT(UART_UCSRC_REG , 4);
     bd4:	a0 e4       	ldi	r26, 0x40	; 64
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e0 e4       	ldi	r30, 0x40	; 64
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8f 7e       	andi	r24, 0xEF	; 239
     be0:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRC_REG , 5);
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e0 e4       	ldi	r30, 0x40	; 64
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8f 7d       	andi	r24, 0xDF	; 223
     bee:	8c 93       	st	X, r24

	//Stop bit 1 Or 2 bits
	CLR_BIT(UART_UCSRC_REG , 3);
     bf0:	a0 e4       	ldi	r26, 0x40	; 64
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	8c 93       	st	X, r24

	//Charctar Size 8 bits
	SET_BIT(UART_UCSRC_REG , 2);
     bfe:	a0 e4       	ldi	r26, 0x40	; 64
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e0 e4       	ldi	r30, 0x40	; 64
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	84 60       	ori	r24, 0x04	; 4
     c0a:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRC_REG , 1);
     c0c:	a0 e4       	ldi	r26, 0x40	; 64
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e0 e4       	ldi	r30, 0x40	; 64
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8c 93       	st	X, r24
	CLR_BIT(UART_UCSRB_REG , 2); //B
     c1a:	aa e2       	ldi	r26, 0x2A	; 42
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ea e2       	ldi	r30, 0x2A	; 42
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8b 7f       	andi	r24, 0xFB	; 251
     c26:	8c 93       	st	X, r24

	//select Baud rate reg
	CLR_BIT(UART_UCSRC_REG , 7) ;
     c28:	a0 e4       	ldi	r26, 0x40	; 64
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e0 e4       	ldi	r30, 0x40	; 64
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8f 77       	andi	r24, 0x7F	; 127
     c34:	8c 93       	st	X, r24
	//Select Baud Rate
	UART_UBRRH_REG = (u8)(BAUD_RATE>>8);
     c36:	e0 e4       	ldi	r30, 0x40	; 64
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	10 82       	st	Z, r1
	UART_UBRRL_REG = (u8)(BAUD_RATE);
     c3c:	e9 e2       	ldi	r30, 0x29	; 41
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	83 e3       	ldi	r24, 0x33	; 51
     c42:	80 83       	st	Z, r24

	//Enable RX & TX
	SET_BIT(UART_UCSRB_REG , 3); //B
     c44:	aa e2       	ldi	r26, 0x2A	; 42
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ea e2       	ldi	r30, 0x2A	; 42
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 60       	ori	r24, 0x08	; 8
     c50:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG , 4); //B
     c52:	aa e2       	ldi	r26, 0x2A	; 42
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e2       	ldi	r30, 0x2A	; 42
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	8c 93       	st	X, r24

}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	0f 92       	push	r0
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 5)==0);
     c72:	eb e2       	ldi	r30, 0x2B	; 43
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	82 95       	swap	r24
     c7a:	86 95       	lsr	r24
     c7c:	87 70       	andi	r24, 0x07	; 7
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	90 70       	andi	r25, 0x00	; 0
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	a1 f3       	breq	.-24     	; 0xc72 <UART_voidSendData+0xc>

	//when flag = 1
	UART_UDR_REG = Copy_u8Data ;
     c8a:	ec e2       	ldi	r30, 0x2C	; 44
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	80 83       	st	Z, r24

	//clear flag
	SET_BIT(UART_UCSRA_REG , 6) ;
     c92:	ab e2       	ldi	r26, 0x2B	; 43
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	eb e2       	ldi	r30, 0x2B	; 43
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 64       	ori	r24, 0x40	; 64
     c9e:	8c 93       	st	X, r24
}
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <UART_u8RecieveData>:

void UART_u8RecieveData(u8 *Copy_pu8Data)
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <UART_u8RecieveData+0x6>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
	//polling
	while(GET_BIT(UART_UCSRA_REG , 7)==0);
     cb6:	eb e2       	ldi	r30, 0x2B	; 43
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	dc f7       	brge	.-10     	; 0xcb6 <UART_u8RecieveData+0xe>

	//when flag = 1
	*Copy_pu8Data = UART_UDR_REG ;
     cc0:	ec e2       	ldi	r30, 0x2C	; 44
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	e9 81       	ldd	r30, Y+1	; 0x01
     cc8:	fa 81       	ldd	r31, Y+2	; 0x02
     cca:	80 83       	st	Z, r24

}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <TWI_voidInitMaster>:
#include "TWI_private.h"
#include "TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
     ce2:	a6 e5       	ldi	r26, 0x56	; 86
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e6 e5       	ldi	r30, 0x56	; 86
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 64       	ori	r24, 0x40	; 64
     cee:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
     cf0:	e0 e2       	ldi	r30, 0x20	; 32
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
     cf8:	a1 e2       	ldi	r26, 0x21	; 33
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e1 e2       	ldi	r30, 0x21	; 33
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8e 7f       	andi	r24, 0xFE	; 254
     d04:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
     d06:	a1 e2       	ldi	r26, 0x21	; 33
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e1 e2       	ldi	r30, 0x21	; 33
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8d 7f       	andi	r24, 0xFD	; 253
     d12:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 23       	and	r24, r24
     d18:	29 f0       	breq	.+10     	; 0xd24 <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR = (Copy_u8Address << 1);
     d1a:	e2 e2       	ldi	r30, 0x22	; 34
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	88 0f       	add	r24, r24
     d22:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     d24:	a6 e5       	ldi	r26, 0x56	; 86
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e5       	ldi	r30, 0x56	; 86
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	84 60       	ori	r24, 0x04	; 4
     d30:	8c 93       	st	X, r24
}
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	0f 92       	push	r0
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
     d46:	e2 e2       	ldi	r30, 0x22	; 34
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	88 0f       	add	r24, r24
     d4e:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
     d50:	a6 e5       	ldi	r26, 0x56	; 86
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e6 e5       	ldi	r30, 0x56	; 86
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 64       	ori	r24, 0x40	; 64
     d5c:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     d5e:	a6 e5       	ldi	r26, 0x56	; 86
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e6 e5       	ldi	r30, 0x56	; 86
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	84 60       	ori	r24, 0x04	; 4
     d6a:	8c 93       	st	X, r24
}
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     d7e:	19 82       	std	Y+1, r1	; 0x01
//	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
	/*Send Start Condition Bit*/
		SET_BIT(TWCR, TWCR_TWSTA);
     d80:	a6 e5       	ldi	r26, 0x56	; 86
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 e5       	ldi	r30, 0x56	; 86
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	80 62       	ori	r24, 0x20	; 32
     d8c:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     d8e:	a6 e5       	ldi	r26, 0x56	; 86
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e6 e5       	ldi	r30, 0x56	; 86
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     d9c:	e6 e5       	ldi	r30, 0x56	; 86
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	88 23       	and	r24, r24
     da4:	dc f7       	brge	.-10     	; 0xd9c <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
     da6:	e1 e2       	ldi	r30, 0x21	; 33
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	88 7f       	andi	r24, 0xF8	; 248
     db2:	90 70       	andi	r25, 0x00	; 0
     db4:	88 30       	cpi	r24, 0x08	; 8
     db6:	91 05       	cpc	r25, r1
     db8:	11 f0       	breq	.+4      	; 0xdbe <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     dd2:	19 82       	std	Y+1, r1	; 0x01
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
     dd4:	a6 e5       	ldi	r26, 0x56	; 86
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e6 e5       	ldi	r30, 0x56	; 86
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	84 6a       	ori	r24, 0xA4	; 164
     de0:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     de2:	e6 e5       	ldi	r30, 0x56	; 86
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	dc f7       	brge	.-10     	; 0xde2 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
     dec:	e1 e2       	ldi	r30, 0x21	; 33
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	88 7f       	andi	r24, 0xF8	; 248
     df8:	90 70       	andi	r25, 0x00	; 0
     dfa:	80 31       	cpi	r24, 0x10	; 16
     dfc:	91 05       	cpc	r25, r1
     dfe:	11 f0       	breq	.+4      	; 0xe04 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
}
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8b 83       	std	Y+3, r24	; 0x03
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e1c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TWCRValue = 0;
     e1e:	19 82       	std	Y+1, r1	; 0x01



	/*Set 7 bits slave address to the bus*/
	TWDR = ((Copy_u8SlaveAddress << 1)&0b11111110);
     e20:	e3 e2       	ldi	r30, 0x23	; 35
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	//CLR_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     e30:	a6 e5       	ldi	r26, 0x56	; 86
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e6 e5       	ldi	r30, 0x56	; 86
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 7d       	andi	r24, 0xDF	; 223
     e3c:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     e3e:	a6 e5       	ldi	r26, 0x56	; 86
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e6 e5       	ldi	r30, 0x56	; 86
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 68       	ori	r24, 0x80	; 128
     e4a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     e4c:	e6 e5       	ldi	r30, 0x56	; 86
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	88 23       	and	r24, r24
     e54:	dc f7       	brge	.-10     	; 0xe4c <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x3e>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
     e56:	e1 e2       	ldi	r30, 0x21	; 33
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	88 7f       	andi	r24, 0xF8	; 248
     e62:	90 70       	andi	r25, 0x00	; 0
     e64:	88 31       	cpi	r24, 0x18	; 24
     e66:	91 05       	cpc	r25, r1
     e68:	11 f0       	breq	.+4      	; 0xe6e <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x60>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorStatus;
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e88:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1)|1;
     e8a:	e3 e2       	ldi	r30, 0x23	; 35
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	81 60       	ori	r24, 0x01	; 1
     e9a:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	//SET_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     e9c:	a6 e5       	ldi	r26, 0x56	; 86
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e6 e5       	ldi	r30, 0x56	; 86
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 7d       	andi	r24, 0xDF	; 223
     ea8:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     eaa:	a6 e5       	ldi	r26, 0x56	; 86
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e6 e5       	ldi	r30, 0x56	; 86
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     eb8:	e6 e5       	ldi	r30, 0x56	; 86
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	88 23       	and	r24, r24
     ec0:	dc f7       	brge	.-10     	; 0xeb8 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x3c>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
     ec2:	e1 e2       	ldi	r30, 0x21	; 33
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	88 7f       	andi	r24, 0xF8	; 248
     ece:	90 70       	andi	r25, 0x00	; 0
     ed0:	80 34       	cpi	r24, 0x40	; 64
     ed2:	91 05       	cpc	r25, r1
     ed4:	11 f0       	breq	.+4      	; 0xeda <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x5e>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
}
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     ef2:	19 82       	std	Y+1, r1	; 0x01


	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
     ef4:	e3 e2       	ldi	r30, 0x23	; 35
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     efc:	a6 e5       	ldi	r26, 0x56	; 86
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e6 e5       	ldi	r30, 0x56	; 86
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 68       	ori	r24, 0x80	; 128
     f08:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     f0a:	e6 e5       	ldi	r30, 0x56	; 86
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	88 23       	and	r24, r24
     f12:	dc f7       	brge	.-10     	; 0xf0a <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
     f14:	e1 e2       	ldi	r30, 0x21	; 33
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	88 7f       	andi	r24, 0xF8	; 248
     f20:	90 70       	andi	r25, 0x00	; 0
     f22:	88 32       	cpi	r24, 0x28	; 40
     f24:	91 05       	cpc	r25, r1
     f26:	11 f0       	breq	.+4      	; 0xf2c <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9b 83       	std	Y+3, r25	; 0x03
     f46:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     f48:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
     f4a:	a6 e5       	ldi	r26, 0x56	; 86
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     f58:	e6 e5       	ldi	r30, 0x56	; 86
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 23       	and	r24, r24
     f60:	dc f7       	brge	.-10     	; 0xf58 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
     f62:	e1 e2       	ldi	r30, 0x21	; 33
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 7f       	andi	r24, 0xF8	; 248
     f6e:	90 70       	andi	r25, 0x00	; 0
     f70:	80 35       	cpi	r24, 0x50	; 80
     f72:	91 05       	cpc	r25, r1
     f74:	19 f0       	breq	.+6      	; 0xf7c <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
     f7c:	e3 e2       	ldi	r30, 0x23	; 35
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	ea 81       	ldd	r30, Y+2	; 0x02
     f84:	fb 81       	ldd	r31, Y+3	; 0x03
     f86:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
     f88:	89 81       	ldd	r24, Y+1	; 0x01

}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
     f9e:	a6 e5       	ldi	r26, 0x56	; 86
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e6 e5       	ldi	r30, 0x56	; 86
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 61       	ori	r24, 0x10	; 16
     faa:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     fac:	a6 e5       	ldi	r26, 0x56	; 86
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e6 e5       	ldi	r30, 0x56	; 86
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	8c 93       	st	X, r24
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <TIMER0_voidInit>:
void(*TIMER_GPF0)(void) = NULL ;
void(*TIMER_GPF1)(void) = NULL ;


void TIMER0_voidInit()
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	//compare mode
	CLR_BIT(TIMER0_TCCR0_REG , 6 );
	SET_BIT(TIMER0_TCCR0_REG , 3 );
	#elif(TIMER_MODE==TIMER_FAST_PWM_MODE)
	//fast PWM
	SET_BIT(TIMER0_TCCR0_REG , 6 );
     fc8:	a3 e5       	ldi	r26, 0x53	; 83
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 3 );
     fd6:	a3 e5       	ldi	r26, 0x53	; 83
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e5       	ldi	r30, 0x53	; 83
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	8c 93       	st	X, r24
	//set on top clear on compare
	CLR_BIT(TIMER0_TCCR0_REG , 4 );
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 7e       	andi	r24, 0xEF	; 239
     ff0:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 5 );
     ff2:	a3 e5       	ldi	r26, 0x53	; 83
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e3 e5       	ldi	r30, 0x53	; 83
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 62       	ori	r24, 0x20	; 32
     ffe:	8c 93       	st	X, r24
	#endif

	//prescaller division factor = 8
	CLR_BIT(TIMER0_TCCR0_REG , 2 );
    1000:	a3 e5       	ldi	r26, 0x53	; 83
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e3 e5       	ldi	r30, 0x53	; 83
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG , 0 );
    100e:	a3 e5       	ldi	r26, 0x53	; 83
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e3 e5       	ldi	r30, 0x53	; 83
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8e 7f       	andi	r24, 0xFE	; 254
    101a:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0_REG , 1 );
    101c:	a3 e5       	ldi	r26, 0x53	; 83
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e3 e5       	ldi	r30, 0x53	; 83
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	SET_BIT(TIMER0_TIMSK_REG , 0) ;
    102a:	a9 e5       	ldi	r26, 0x59	; 89
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e9 e5       	ldi	r30, 0x59	; 89
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	8c 93       	st	X, r24

}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <TIMER0_voidSetCallBackT0Ovf>:

void TIMER0_voidSetCallBackT0Ovf(void(*LPF0)(void))
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <TIMER0_voidSetCallBackT0Ovf+0x6>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF0 = LPF0 ;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	90 93 83 00 	sts	0x0083, r25
    1054:	80 93 82 00 	sts	0x0082, r24
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <TIMER0_voidSetPreloadValue>:


void TIMER0_voidSetPreloadValue(u8 Copy_PreloadValue)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	0f 92       	push	r0
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_REG = Copy_PreloadValue ;
    106e:	e2 e5       	ldi	r30, 0x52	; 82
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	80 83       	st	Z, r24
}
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <TIMER0_voidSetCallBackT0CTC>:

void TIMER0_voidSetCallBackT0CTC(void(*LPF1)(void))
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <TIMER0_voidSetCallBackT0CTC+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
	TIMER_GPF1 = LPF1 ;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	90 93 85 00 	sts	0x0085, r25
    1094:	80 93 84 00 	sts	0x0084, r24
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <TIMER0_voidSetCompareMatchValue>:

void TIMER0_voidSetCompareMatchValue(u8 Copy_CompareMatchValue)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = Copy_CompareMatchValue ;
    10ae:	ec e5       	ldi	r30, 0x5C	; 92
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	80 83       	st	Z, r24
}
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <__vector_10>:


//ISR for T0OVF
void __vector_10(void)    __attribute__((signal));
void __vector_10(void)
{
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	11 24       	eor	r1, r1
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	4f 93       	push	r20
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    10dc:	ef 93       	push	r30
    10de:	ff 93       	push	r31
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
    10e8:	80 91 86 00 	lds	r24, 0x0086
    10ec:	90 91 87 00 	lds	r25, 0x0087
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	90 93 87 00 	sts	0x0087, r25
    10f6:	80 93 86 00 	sts	0x0086, r24
	//compare =200 ,, time = 1sec
	if(counter == 5000)
    10fa:	80 91 86 00 	lds	r24, 0x0086
    10fe:	90 91 87 00 	lds	r25, 0x0087
    1102:	23 e1       	ldi	r18, 0x13	; 19
    1104:	88 38       	cpi	r24, 0x88	; 136
    1106:	92 07       	cpc	r25, r18
    1108:	49 f4       	brne	.+18     	; 0x111c <__vector_10+0x5e>
	{
		TIMER_GPF1();
    110a:	e0 91 84 00 	lds	r30, 0x0084
    110e:	f0 91 85 00 	lds	r31, 0x0085
    1112:	09 95       	icall
		counter = 0 ;
    1114:	10 92 87 00 	sts	0x0087, r1
    1118:	10 92 86 00 	sts	0x0086, r1
	}

}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <__vector_11>:
void __vector_11(void)    __attribute__((signal));
void __vector_11(void)
{
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	ef 93       	push	r30
    1162:	ff 93       	push	r31
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0 ;
	counter ++ ;
    116c:	80 91 88 00 	lds	r24, 0x0088
    1170:	90 91 89 00 	lds	r25, 0x0089
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	90 93 89 00 	sts	0x0089, r25
    117a:	80 93 88 00 	sts	0x0088, r24
	//overflow 1
	if(counter == 3907)
    117e:	80 91 88 00 	lds	r24, 0x0088
    1182:	90 91 89 00 	lds	r25, 0x0089
    1186:	2f e0       	ldi	r18, 0x0F	; 15
    1188:	83 34       	cpi	r24, 0x43	; 67
    118a:	92 07       	cpc	r25, r18
    118c:	61 f4       	brne	.+24     	; 0x11a6 <__vector_11+0x64>
	{
		TIMER_GPF0();
    118e:	e0 91 82 00 	lds	r30, 0x0082
    1192:	f0 91 83 00 	lds	r31, 0x0083
    1196:	09 95       	icall
		counter = 0 ;
    1198:	10 92 89 00 	sts	0x0089, r1
    119c:	10 92 88 00 	sts	0x0088, r1
		TIMER0_voidSetPreloadValue(192);
    11a0:	80 ec       	ldi	r24, 0xC0	; 192
    11a2:	0e 94 31 08 	call	0x1062	; 0x1062 <TIMER0_voidSetPreloadValue>
	}

}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <TIMER1_voidInit>:
void TIMER1_voidInit(void)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62

	//fast PWM
	CLR_BIT(TIMER1_TCCR1A_REG , 0 );
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 1);
    11e2:	af e4       	ldi	r26, 0x4F	; 79
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ef e4       	ldi	r30, 0x4F	; 79
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	82 60       	ori	r24, 0x02	; 2
    11ee:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 3 );
    11f0:	ae e4       	ldi	r26, 0x4E	; 78
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee e4       	ldi	r30, 0x4E	; 78
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 60       	ori	r24, 0x08	; 8
    11fc:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 4);
    11fe:	ae e4       	ldi	r26, 0x4E	; 78
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ee e4       	ldi	r30, 0x4E	; 78
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 61       	ori	r24, 0x10	; 16
    120a:	8c 93       	st	X, r24

	//set on top clear on compare
	CLR_BIT(TIMER1_TCCR1A_REG , 6 );
    120c:	af e4       	ldi	r26, 0x4F	; 79
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ef e4       	ldi	r30, 0x4F	; 79
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8f 7b       	andi	r24, 0xBF	; 191
    1218:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A_REG , 7 );
    121a:	af e4       	ldi	r26, 0x4F	; 79
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ef e4       	ldi	r30, 0x4F	; 79
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 68       	ori	r24, 0x80	; 128
    1226:	8c 93       	st	X, r24


	//prescaller division factor = 8
	CLR_BIT(TIMER1_TCCR1B_REG , 0 );
    1228:	ae e4       	ldi	r26, 0x4E	; 78
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ee e4       	ldi	r30, 0x4E	; 78
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B_REG , 1 );
    1236:	ae e4       	ldi	r26, 0x4E	; 78
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ee e4       	ldi	r30, 0x4E	; 78
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	82 60       	ori	r24, 0x02	; 2
    1242:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B_REG , 2 );
    1244:	ae e4       	ldi	r26, 0x4E	; 78
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ee e4       	ldi	r30, 0x4E	; 78
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8b 7f       	andi	r24, 0xFB	; 251
    1250:	8c 93       	st	X, r24

	//Enable Timer0 Interrupt PIE
	//SET_BIT(TIMER1 , 0) ;

	//intilize value over flow value
	TIMER1_ICR1_REG = 19999 ;
    1252:	e6 e4       	ldi	r30, 0x46	; 70
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8f e1       	ldi	r24, 0x1F	; 31
    1258:	9e e4       	ldi	r25, 0x4E	; 78
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24

	//intilize counter
	TIMER1_TCNT1_REG = 0 ;
    125e:	ec e4       	ldi	r30, 0x4C	; 76
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	11 82       	std	Z+1, r1	; 0x01
    1264:	10 82       	st	Z, r1

}
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <TIMER1_voidSetPinACompareMatch>:




void TIMER1_voidSetPinACompareMatch(u16 Copy_u16Value)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <TIMER1_voidSetPinACompareMatch+0x6>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_OCR1A_REG = Copy_u16Value ;
    127a:	ea e4       	ldi	r30, 0x4A	; 74
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <TIMERS_voidT1SetBusyWait>:

void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	2c 97       	sbiw	r28, 0x0c	; 12
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	69 87       	std	Y+9, r22	; 0x09
    12a6:	7a 87       	std	Y+10, r23	; 0x0a
    12a8:	8b 87       	std	Y+11, r24	; 0x0b
    12aa:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u64SWCounter = 0 ;
    12ac:	1d 82       	std	Y+5, r1	; 0x05
    12ae:	1e 82       	std	Y+6, r1	; 0x06
    12b0:	1f 82       	std	Y+7, r1	; 0x07
    12b2:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_u64Iterator = 0 ;
    12b4:	19 82       	std	Y+1, r1	; 0x01
    12b6:	1a 82       	std	Y+2, r1	; 0x02
    12b8:	1b 82       	std	Y+3, r1	; 0x03
    12ba:	1c 82       	std	Y+4, r1	; 0x04
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    12c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    12c4:	28 ee       	ldi	r18, 0xE8	; 232
    12c6:	33 e0       	ldi	r19, 0x03	; 3
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	2a ef       	ldi	r18, 0xFA	; 250
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__udivmodsi4>
    12e8:	da 01       	movw	r26, r20
    12ea:	c9 01       	movw	r24, r18
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	af 83       	std	Y+7, r26	; 0x07
    12f2:	b8 87       	std	Y+8, r27	; 0x08
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
    12f4:	19 82       	std	Y+1, r1	; 0x01
    12f6:	1a 82       	std	Y+2, r1	; 0x02
    12f8:	1b 82       	std	Y+3, r1	; 0x03
    12fa:	1c 82       	std	Y+4, r1	; 0x04
    12fc:	1c c0       	rjmp	.+56     	; 0x1336 <TIMERS_voidT1SetBusyWait+0xa6>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
    12fe:	e8 e5       	ldi	r30, 0x58	; 88
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	86 95       	lsr	r24
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	b1 f3       	breq	.-20     	; 0x12fe <TIMERS_voidT1SetBusyWait+0x6e>
		SET_BIT(TIMER1_TIFR_REG , 1);
    1312:	a8 e5       	ldi	r26, 0x58	; 88
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e5       	ldi	r30, 0x58	; 88
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	8c 93       	st	X, r24
void TIMERS_voidT1SetBusyWait(u32 Copy_u32MilliSeconds)
{
	u32 Local_u64SWCounter = 0 ;
	u32 Local_u64Iterator = 0 ;
	Local_u64SWCounter = (Copy_u32MilliSeconds*1000) / (250 );
	for(Local_u64Iterator = 0 ; Local_u64Iterator < Local_u64SWCounter ; Local_u64Iterator++)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	ab 81       	ldd	r26, Y+3	; 0x03
    1326:	bc 81       	ldd	r27, Y+4	; 0x04
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	a1 1d       	adc	r26, r1
    132c:	b1 1d       	adc	r27, r1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	ab 83       	std	Y+3, r26	; 0x03
    1334:	bc 83       	std	Y+4, r27	; 0x04
    1336:	29 81       	ldd	r18, Y+1	; 0x01
    1338:	3a 81       	ldd	r19, Y+2	; 0x02
    133a:	4b 81       	ldd	r20, Y+3	; 0x03
    133c:	5c 81       	ldd	r21, Y+4	; 0x04
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	af 81       	ldd	r26, Y+7	; 0x07
    1344:	b8 85       	ldd	r27, Y+8	; 0x08
    1346:	28 17       	cp	r18, r24
    1348:	39 07       	cpc	r19, r25
    134a:	4a 07       	cpc	r20, r26
    134c:	5b 07       	cpc	r21, r27
    134e:	b8 f2       	brcs	.-82     	; 0x12fe <TIMERS_voidT1SetBusyWait+0x6e>
	{
		while(GET_BIT(TIMER1_TIFR_REG , 1) == 0 );
		SET_BIT(TIMER1_TIFR_REG , 1);
	}
}
    1350:	2c 96       	adiw	r28, 0x0c	; 12
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <SPI_MasterInit>:
#include"SPI_Interface.h"
#include"SPI_Config.h"
#include"SPI_Private.h"

void SPI_MasterInit(void)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	//select master mode
	SET_BIT(SPCR_REG,SPCR_MSTR);
    136a:	ad e2       	ldi	r26, 0x2D	; 45
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ed e2       	ldi	r30, 0x2D	; 45
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	80 61       	ori	r24, 0x10	; 16
    1376:	8c 93       	st	X, r24
	// MSB OR LSB
	CLR_BIT(SPCR_REG,SPCR_DORD);
    1378:	ad e2       	ldi	r26, 0x2D	; 45
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ed e2       	ldi	r30, 0x2D	; 45
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8f 7d       	andi	r24, 0xDF	; 223
    1384:	8c 93       	st	X, r24
	// select Rising as leading edge
	CLR_BIT(SPCR_REG,SPCR_CPOL);
    1386:	ad e2       	ldi	r26, 0x2D	; 45
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ed e2       	ldi	r30, 0x2D	; 45
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	87 7f       	andi	r24, 0xF7	; 247
    1392:	8c 93       	st	X, r24
	//SELECT SAMPLE ON LEADING
	CLR_BIT(SPCR_REG,SPCR_CPHA);
    1394:	ad e2       	ldi	r26, 0x2D	; 45
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ed e2       	ldi	r30, 0x2D	; 45
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8b 7f       	andi	r24, 0xFB	; 251
    13a0:	8c 93       	st	X, r24
	//SELECT PRESCALER
	SET_BIT(SPCR_REG,SPCR_SPR0);
    13a2:	ad e2       	ldi	r26, 0x2D	; 45
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ed e2       	ldi	r30, 0x2D	; 45
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	81 60       	ori	r24, 0x01	; 1
    13ae:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,SPCR_SPR1);
    13b0:	ad e2       	ldi	r26, 0x2D	; 45
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ed e2       	ldi	r30, 0x2D	; 45
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8d 7f       	andi	r24, 0xFD	; 253
    13bc:	8c 93       	st	X, r24
	CLR_BIT(SPSR_REG,SPSR_SPI2X);
    13be:	ae e2       	ldi	r26, 0x2E	; 46
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ee e2       	ldi	r30, 0x2E	; 46
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8e 7f       	andi	r24, 0xFE	; 254
    13ca:	8c 93       	st	X, r24
	//ENABLE SPI
	SET_BIT(SPCR_REG,SPCR_SPE);
    13cc:	ad e2       	ldi	r26, 0x2D	; 45
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ed e2       	ldi	r30, 0x2D	; 45
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 64       	ori	r24, 0x40	; 64
    13d8:	8c 93       	st	X, r24
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <SPI_SlaveInit>:
void SPI_SlaveInit(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(SPCR_REG,SPCR_MSTR);
    13e8:	ad e2       	ldi	r26, 0x2D	; 45
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	ed e2       	ldi	r30, 0x2D	; 45
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8f 7e       	andi	r24, 0xEF	; 239
    13f4:	8c 93       	st	X, r24
		// MSB OR LSB
		CLR_BIT(SPCR_REG,SPCR_DORD);
    13f6:	ad e2       	ldi	r26, 0x2D	; 45
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ed e2       	ldi	r30, 0x2D	; 45
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7d       	andi	r24, 0xDF	; 223
    1402:	8c 93       	st	X, r24
		// select Rising as leading edge
		CLR_BIT(SPCR_REG,SPCR_CPOL);
    1404:	ad e2       	ldi	r26, 0x2D	; 45
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ed e2       	ldi	r30, 0x2D	; 45
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	87 7f       	andi	r24, 0xF7	; 247
    1410:	8c 93       	st	X, r24
		//SELECT SAMPLE ON LEADING
		CLR_BIT(SPCR_REG,SPCR_CPHA);
    1412:	ad e2       	ldi	r26, 0x2D	; 45
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ed e2       	ldi	r30, 0x2D	; 45
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8b 7f       	andi	r24, 0xFB	; 251
    141e:	8c 93       	st	X, r24
		//ENABLE SPI
		SET_BIT(SPCR_REG,SPCR_SPE);
    1420:	ad e2       	ldi	r26, 0x2D	; 45
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ed e2       	ldi	r30, 0x2D	; 45
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 64       	ori	r24, 0x40	; 64
    142c:	8c 93       	st	X, r24

}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <SPI_u8Tranceive>:
u8   SPI_u8Tranceive(u8 Copu_u8Data)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	89 83       	std	Y+1, r24	; 0x01
	//set the data to register
	SPDR_REG = Copu_u8Data ;
    1440:	ef e2       	ldi	r30, 0x2F	; 47
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	80 83       	st	Z, r24
	while ((GET_BIT(SPSR_REG,SPSR_SPIF))==0);
    1448:	ee e2       	ldi	r30, 0x2E	; 46
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	88 23       	and	r24, r24
    1450:	dc f7       	brge	.-10     	; 0x1448 <SPI_u8Tranceive+0x14>
	SET_BIT(SPSR_REG,SPSR_SPIF);
    1452:	ae e2       	ldi	r26, 0x2E	; 46
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ee e2       	ldi	r30, 0x2E	; 46
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 68       	ori	r24, 0x80	; 128
    145e:	8c 93       	st	X, r24
	return  SPDR_REG ;
    1460:	ef e2       	ldi	r30, 0x2F	; 47
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
}
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <GIE_voidEnable>:
#include"GIE_config.h"
#include"GIE_private.h"
#include"GIE_interface.h"

void GIE_voidEnable(void)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
    1476:	af e5       	ldi	r26, 0x5F	; 95
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ef e5       	ldi	r30, 0x5F	; 95
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 68       	ori	r24, 0x80	; 128
    1482:	8c 93       	st	X, r24

}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG , 7);
    1492:	af e5       	ldi	r26, 0x5F	; 95
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef e5       	ldi	r30, 0x5F	; 95
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 77       	andi	r24, 0x7F	; 127
    149e:	8c 93       	st	X, r24

}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EXTI_voidInit>:
void(*GpF1)(void) = NULL ;
void(*GpF2)(void) = NULL ;
void(*GpF3)(void) = NULL ;

void EXTI_voidInit(void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
 	#if INT_ENABLE == INT0
		SET_BIT(GICR_REG,6);
    14ae:	ab e5       	ldi	r26, 0x5B	; 91
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e5       	ldi	r30, 0x5B	; 91
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8c 93       	st	X, r24
		SET_BIT(GICR_REG,5);
	#endif

	#if INT_ENABLE == INT0
		/*DIo*/
		DIO_voidSetPinDirection(PORTD , PIN2 ,INPUT);
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	62 e0       	ldi	r22, 0x02	; 2
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
		#if INT_SENSE_CONTROL == FALLING_EDGE
			DIO_voidSetPinvalue(PORTD,PIN2,HIGH);
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	62 e0       	ldi	r22, 0x02	; 2
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			/*falling edge*/
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	82 60       	ori	r24, 0x02	; 2
    14dc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    14de:	a5 e5       	ldi	r26, 0x55	; 85
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e5       	ldi	r30, 0x55	; 85
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8e 7f       	andi	r24, 0xFE	; 254
    14ea:	8c 93       	st	X, r24
		#elif INT_SENSE_CONTROL == RISING_EDGE
			/*RISING edge*/
			CLR_BIT(MCUCR_REG,6);
		#endif
	#endif
}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <EXTI_voidEnable>:

void EXTI_voidEnable(u8 Copy_u8IntNo , u8 Copy_u8Sensecontrol)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2a 97       	sbiw	r28, 0x0a	; 10
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8IntNo)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3a 87       	std	Y+10, r19	; 0x0a
    1512:	29 87       	std	Y+9, r18	; 0x09
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <EXTI_voidEnable+0x2e>
    151e:	6d c0       	rjmp	.+218    	; 0x15fa <EXTI_voidEnable+0x108>
    1520:	29 85       	ldd	r18, Y+9	; 0x09
    1522:	3a 85       	ldd	r19, Y+10	; 0x0a
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <EXTI_voidEnable+0x3a>
    152a:	c9 c0       	rjmp	.+402    	; 0x16be <EXTI_voidEnable+0x1cc>
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	09 f0       	breq	.+2      	; 0x1536 <EXTI_voidEnable+0x44>
    1534:	e9 c0       	rjmp	.+466    	; 0x1708 <EXTI_voidEnable+0x216>
	{
		case INT0:
			SET_BIT(GICR_REG,6);
    1536:	ab e5       	ldi	r26, 0x5B	; 91
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e5       	ldi	r30, 0x5B	; 91
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 64       	ori	r24, 0x40	; 64
    1542:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	38 87       	std	Y+8, r19	; 0x08
    154c:	2f 83       	std	Y+7, r18	; 0x07
    154e:	8f 81       	ldd	r24, Y+7	; 0x07
    1550:	98 85       	ldd	r25, Y+8	; 0x08
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	91 05       	cpc	r25, r1
    1556:	21 f1       	breq	.+72     	; 0x15a0 <EXTI_voidEnable+0xae>
    1558:	2f 81       	ldd	r18, Y+7	; 0x07
    155a:	38 85       	ldd	r19, Y+8	; 0x08
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	2c f4       	brge	.+10     	; 0x156c <EXTI_voidEnable+0x7a>
    1562:	8f 81       	ldd	r24, Y+7	; 0x07
    1564:	98 85       	ldd	r25, Y+8	; 0x08
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	61 f0       	breq	.+24     	; 0x1582 <EXTI_voidEnable+0x90>
    156a:	ce c0       	rjmp	.+412    	; 0x1708 <EXTI_voidEnable+0x216>
    156c:	2f 81       	ldd	r18, Y+7	; 0x07
    156e:	38 85       	ldd	r19, Y+8	; 0x08
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	21 f1       	breq	.+72     	; 0x15be <EXTI_voidEnable+0xcc>
    1576:	8f 81       	ldd	r24, Y+7	; 0x07
    1578:	98 85       	ldd	r25, Y+8	; 0x08
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	91 05       	cpc	r25, r1
    157e:	71 f1       	breq	.+92     	; 0x15dc <EXTI_voidEnable+0xea>
    1580:	c3 c0       	rjmp	.+390    	; 0x1708 <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					SET_BIT(MCUCR_REG,1);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	82 60       	ori	r24, 0x02	; 2
    158e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,0);
    1590:	a5 e5       	ldi	r26, 0x55	; 85
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e5       	ldi	r30, 0x55	; 85
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8e 7f       	andi	r24, 0xFE	; 254
    159c:	8c 93       	st	X, r24
    159e:	b4 c0       	rjmp	.+360    	; 0x1708 <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCR_REG,1);
    15a0:	a5 e5       	ldi	r26, 0x55	; 85
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e5       	ldi	r30, 0x55	; 85
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	82 60       	ori	r24, 0x02	; 2
    15ac:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,0);
    15ae:	a5 e5       	ldi	r26, 0x55	; 85
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e5 e5       	ldi	r30, 0x55	; 85
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	81 60       	ori	r24, 0x01	; 1
    15ba:	8c 93       	st	X, r24
    15bc:	a5 c0       	rjmp	.+330    	; 0x1708 <EXTI_voidEnable+0x216>
					break ;
				case LOWLEVEL_EDGE :
					CLR_BIT(MCUCR_REG,1);
    15be:	a5 e5       	ldi	r26, 0x55	; 85
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e5 e5       	ldi	r30, 0x55	; 85
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8d 7f       	andi	r24, 0xFD	; 253
    15ca:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,0);
    15cc:	a5 e5       	ldi	r26, 0x55	; 85
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e5 e5       	ldi	r30, 0x55	; 85
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	8e 7f       	andi	r24, 0xFE	; 254
    15d8:	8c 93       	st	X, r24
    15da:	96 c0       	rjmp	.+300    	; 0x1708 <EXTI_voidEnable+0x216>
					break ;
				case ONCHANGE_EDGE :
					CLR_BIT(MCUCR_REG,1);
    15dc:	a5 e5       	ldi	r26, 0x55	; 85
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e5 e5       	ldi	r30, 0x55	; 85
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8d 7f       	andi	r24, 0xFD	; 253
    15e8:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,0);
    15ea:	a5 e5       	ldi	r26, 0x55	; 85
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e5       	ldi	r30, 0x55	; 85
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	81 60       	ori	r24, 0x01	; 1
    15f6:	8c 93       	st	X, r24
    15f8:	87 c0       	rjmp	.+270    	; 0x1708 <EXTI_voidEnable+0x216>
				default:
					break;
			}
			break ;
		case INT1:
			SET_BIT(GICR_REG,7);
    15fa:	ab e5       	ldi	r26, 0x5B	; 91
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	eb e5       	ldi	r30, 0x5B	; 91
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 68       	ori	r24, 0x80	; 128
    1606:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3e 83       	std	Y+6, r19	; 0x06
    1610:	2d 83       	std	Y+5, r18	; 0x05
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	21 f1       	breq	.+72     	; 0x1664 <EXTI_voidEnable+0x172>
    161c:	2d 81       	ldd	r18, Y+5	; 0x05
    161e:	3e 81       	ldd	r19, Y+6	; 0x06
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <EXTI_voidEnable+0x13e>
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f0       	breq	.+24     	; 0x1646 <EXTI_voidEnable+0x154>
    162e:	6c c0       	rjmp	.+216    	; 0x1708 <EXTI_voidEnable+0x216>
    1630:	2d 81       	ldd	r18, Y+5	; 0x05
    1632:	3e 81       	ldd	r19, Y+6	; 0x06
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	21 f1       	breq	.+72     	; 0x1682 <EXTI_voidEnable+0x190>
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	71 f1       	breq	.+92     	; 0x16a0 <EXTI_voidEnable+0x1ae>
    1644:	61 c0       	rjmp	.+194    	; 0x1708 <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					SET_BIT(MCUCR_REG,3);
    1646:	a5 e5       	ldi	r26, 0x55	; 85
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e5 e5       	ldi	r30, 0x55	; 85
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 60       	ori	r24, 0x08	; 8
    1652:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,2);
    1654:	a5 e5       	ldi	r26, 0x55	; 85
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e5       	ldi	r30, 0x55	; 85
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8b 7f       	andi	r24, 0xFB	; 251
    1660:	8c 93       	st	X, r24
    1662:	52 c0       	rjmp	.+164    	; 0x1708 <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCR_REG,3);
    1664:	a5 e5       	ldi	r26, 0x55	; 85
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e5 e5       	ldi	r30, 0x55	; 85
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	88 60       	ori	r24, 0x08	; 8
    1670:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,2);
    1672:	a5 e5       	ldi	r26, 0x55	; 85
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e5 e5       	ldi	r30, 0x55	; 85
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	84 60       	ori	r24, 0x04	; 4
    167e:	8c 93       	st	X, r24
    1680:	43 c0       	rjmp	.+134    	; 0x1708 <EXTI_voidEnable+0x216>
					break ;
				case LOWLEVEL_EDGE :
					CLR_BIT(MCUCR_REG,3);
    1682:	a5 e5       	ldi	r26, 0x55	; 85
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e5 e5       	ldi	r30, 0x55	; 85
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	87 7f       	andi	r24, 0xF7	; 247
    168e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR_REG,2);
    1690:	a5 e5       	ldi	r26, 0x55	; 85
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e5 e5       	ldi	r30, 0x55	; 85
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8b 7f       	andi	r24, 0xFB	; 251
    169c:	8c 93       	st	X, r24
    169e:	34 c0       	rjmp	.+104    	; 0x1708 <EXTI_voidEnable+0x216>
					break ;
				case ONCHANGE_EDGE :
					CLR_BIT(MCUCR_REG,3);
    16a0:	a5 e5       	ldi	r26, 0x55	; 85
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e5 e5       	ldi	r30, 0x55	; 85
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	87 7f       	andi	r24, 0xF7	; 247
    16ac:	8c 93       	st	X, r24
					SET_BIT(MCUCR_REG,2);
    16ae:	a5 e5       	ldi	r26, 0x55	; 85
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e5       	ldi	r30, 0x55	; 85
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	84 60       	ori	r24, 0x04	; 4
    16ba:	8c 93       	st	X, r24
    16bc:	25 c0       	rjmp	.+74     	; 0x1708 <EXTI_voidEnable+0x216>
				default:
					break;
			}
			break ;
		case INT2:
			SET_BIT(GICR_REG,5);
    16be:	ab e5       	ldi	r26, 0x5B	; 91
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e5       	ldi	r30, 0x5B	; 91
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 62       	ori	r24, 0x20	; 32
    16ca:	8c 93       	st	X, r24
			switch(Copy_u8Sensecontrol)
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	3c 83       	std	Y+4, r19	; 0x04
    16d4:	2b 83       	std	Y+3, r18	; 0x03
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	31 f0       	breq	.+12     	; 0x16ea <EXTI_voidEnable+0x1f8>
    16de:	2b 81       	ldd	r18, Y+3	; 0x03
    16e0:	3c 81       	ldd	r19, Y+4	; 0x04
    16e2:	21 30       	cpi	r18, 0x01	; 1
    16e4:	31 05       	cpc	r19, r1
    16e6:	49 f0       	breq	.+18     	; 0x16fa <EXTI_voidEnable+0x208>
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <EXTI_voidEnable+0x216>
			{
				case FALLING_EDGE :
					CLR_BIT(MCUCSR_REG,6);
    16ea:	a4 e5       	ldi	r26, 0x54	; 84
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e4 e5       	ldi	r30, 0x54	; 84
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 7b       	andi	r24, 0xBF	; 191
    16f6:	8c 93       	st	X, r24
    16f8:	07 c0       	rjmp	.+14     	; 0x1708 <EXTI_voidEnable+0x216>
					break ;
				case RISING_EDGE:
					SET_BIT(MCUCSR_REG,6);
    16fa:	a4 e5       	ldi	r26, 0x54	; 84
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e4 e5       	ldi	r30, 0x54	; 84
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 64       	ori	r24, 0x40	; 64
    1706:	8c 93       	st	X, r24
			break ;
		default:
			break ;
	}

}
    1708:	2a 96       	adiw	r28, 0x0a	; 10
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8IntNo)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <EXTI_voidDisable+0x6>
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntNo)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3b 83       	std	Y+3, r19	; 0x03
    1730:	2a 83       	std	Y+2, r18	; 0x02
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	89 f0       	breq	.+34     	; 0x175e <EXTI_voidDisable+0x44>
    173c:	2a 81       	ldd	r18, Y+2	; 0x02
    173e:	3b 81       	ldd	r19, Y+3	; 0x03
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	a1 f0       	breq	.+40     	; 0x176e <EXTI_voidDisable+0x54>
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	b9 f4       	brne	.+46     	; 0x177c <EXTI_voidDisable+0x62>
	{
		case INT0 :
			CLR_BIT(GICR_REG,6);
    174e:	ab e5       	ldi	r26, 0x5B	; 91
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	eb e5       	ldi	r30, 0x5B	; 91
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8f 7b       	andi	r24, 0xBF	; 191
    175a:	8c 93       	st	X, r24
    175c:	0f c0       	rjmp	.+30     	; 0x177c <EXTI_voidDisable+0x62>
			break;
		case INT1 :
			CLR_BIT(GICR_REG,7);
    175e:	ab e5       	ldi	r26, 0x5B	; 91
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	eb e5       	ldi	r30, 0x5B	; 91
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	8c 93       	st	X, r24
    176c:	07 c0       	rjmp	.+14     	; 0x177c <EXTI_voidDisable+0x62>
			break;
		case INT2 :
			CLR_BIT(GICR_REG,5);
    176e:	ab e5       	ldi	r26, 0x5B	; 91
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	eb e5       	ldi	r30, 0x5B	; 91
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8f 7d       	andi	r24, 0xDF	; 223
    177a:	8c 93       	st	X, r24

	}



}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <EXTI_voidSetCallBack_INT0>:

void EXTI_voidSetCallBack_INT0(void(*LPF1)(void))
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <EXTI_voidSetCallBack_INT0+0x6>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
	GpF1 = LPF1 ;
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	90 93 8b 00 	sts	0x008B, r25
    179e:	80 93 8a 00 	sts	0x008A, r24
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <EXTI_voidSetCallBack_INT1>:

void EXTI_voidSetCallBack_INT1(void(*LPF2)(void))
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <EXTI_voidSetCallBack_INT1+0x6>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	GpF2 = LPF2 ;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	90 93 8d 00 	sts	0x008D, r25
    17c2:	80 93 8c 00 	sts	0x008C, r24
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <EXTI_voidSetCallBack_INT2>:

void EXTI_voidSetCallBack_INT2(void(*LPF3)(void))
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <EXTI_voidSetCallBack_INT2+0x6>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
	GpF3 = LPF3 ;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	90 93 8f 00 	sts	0x008F, r25
    17e6:	80 93 8e 00 	sts	0x008E, r24
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <__vector_1>:




void __vector_1(void)
{
    17f4:	1f 92       	push	r1
    17f6:	0f 92       	push	r0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	0f 92       	push	r0
    17fc:	11 24       	eor	r1, r1
    17fe:	2f 93       	push	r18
    1800:	3f 93       	push	r19
    1802:	4f 93       	push	r20
    1804:	5f 93       	push	r21
    1806:	6f 93       	push	r22
    1808:	7f 93       	push	r23
    180a:	8f 93       	push	r24
    180c:	9f 93       	push	r25
    180e:	af 93       	push	r26
    1810:	bf 93       	push	r27
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	if(GpF1!=NULL)
    181e:	80 91 8a 00 	lds	r24, 0x008A
    1822:	90 91 8b 00 	lds	r25, 0x008B
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	29 f0       	breq	.+10     	; 0x1834 <__vector_1+0x40>
	{
		GpF1();
    182a:	e0 91 8a 00 	lds	r30, 0x008A
    182e:	f0 91 8b 00 	lds	r31, 0x008B
    1832:	09 95       	icall
	}
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <__vector_2>:

void __vector_2(void)
{
    185a:	1f 92       	push	r1
    185c:	0f 92       	push	r0
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	11 24       	eor	r1, r1
    1864:	2f 93       	push	r18
    1866:	3f 93       	push	r19
    1868:	4f 93       	push	r20
    186a:	5f 93       	push	r21
    186c:	6f 93       	push	r22
    186e:	7f 93       	push	r23
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	af 93       	push	r26
    1876:	bf 93       	push	r27
    1878:	ef 93       	push	r30
    187a:	ff 93       	push	r31
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	if(GpF2!=NULL)
    1884:	80 91 8c 00 	lds	r24, 0x008C
    1888:	90 91 8d 00 	lds	r25, 0x008D
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	29 f0       	breq	.+10     	; 0x189a <__vector_2+0x40>
	{
		GpF2();
    1890:	e0 91 8c 00 	lds	r30, 0x008C
    1894:	f0 91 8d 00 	lds	r31, 0x008D
    1898:	09 95       	icall
	}
}
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <__vector_3>:

void __vector_3(void)
{
    18c0:	1f 92       	push	r1
    18c2:	0f 92       	push	r0
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	0f 92       	push	r0
    18c8:	11 24       	eor	r1, r1
    18ca:	2f 93       	push	r18
    18cc:	3f 93       	push	r19
    18ce:	4f 93       	push	r20
    18d0:	5f 93       	push	r21
    18d2:	6f 93       	push	r22
    18d4:	7f 93       	push	r23
    18d6:	8f 93       	push	r24
    18d8:	9f 93       	push	r25
    18da:	af 93       	push	r26
    18dc:	bf 93       	push	r27
    18de:	ef 93       	push	r30
    18e0:	ff 93       	push	r31
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	if(GpF3!=NULL)
    18ea:	80 91 8e 00 	lds	r24, 0x008E
    18ee:	90 91 8f 00 	lds	r25, 0x008F
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	29 f0       	breq	.+10     	; 0x1900 <__vector_3+0x40>
	{
		GpF3();
    18f6:	e0 91 8e 00 	lds	r30, 0x008E
    18fa:	f0 91 8f 00 	lds	r31, 0x008F
    18fe:	09 95       	icall
	}
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	0f 90       	pop	r0
    1922:	1f 90       	pop	r1
    1924:	18 95       	reti

00001926 <DIO_voidSetPinvalue>:




void DIO_voidSetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	29 97       	sbiw	r28, 0x09	; 9
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	6a 83       	std	Y+2, r22	; 0x02
    193e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	08 f0       	brcs	.+2      	; 0x1948 <DIO_voidSetPinvalue+0x22>
    1946:	f6 c0       	rjmp	.+492    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	88 30       	cpi	r24, 0x08	; 8
    194c:	08 f0       	brcs	.+2      	; 0x1950 <DIO_voidSetPinvalue+0x2a>
    194e:	f2 c0       	rjmp	.+484    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8Direction)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	39 87       	std	Y+9, r19	; 0x09
    1958:	28 87       	std	Y+8, r18	; 0x08
    195a:	88 85       	ldd	r24, Y+8	; 0x08
    195c:	99 85       	ldd	r25, Y+9	; 0x09
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	39 f0       	breq	.+14     	; 0x1970 <DIO_voidSetPinvalue+0x4a>
    1962:	28 85       	ldd	r18, Y+8	; 0x08
    1964:	39 85       	ldd	r19, Y+9	; 0x09
    1966:	21 30       	cpi	r18, 0x01	; 1
    1968:	31 05       	cpc	r19, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <DIO_voidSetPinvalue+0x48>
    196c:	75 c0       	rjmp	.+234    	; 0x1a58 <DIO_voidSetPinvalue+0x132>
    196e:	e2 c0       	rjmp	.+452    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
		{
			case LOW  : switch(Copy_u8PortId)
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3f 83       	std	Y+7, r19	; 0x07
    1978:	2e 83       	std	Y+6, r18	; 0x06
    197a:	8e 81       	ldd	r24, Y+6	; 0x06
    197c:	9f 81       	ldd	r25, Y+7	; 0x07
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	59 f1       	breq	.+86     	; 0x19da <DIO_voidSetPinvalue+0xb4>
    1984:	2e 81       	ldd	r18, Y+6	; 0x06
    1986:	3f 81       	ldd	r19, Y+7	; 0x07
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	2c f4       	brge	.+10     	; 0x1998 <DIO_voidSetPinvalue+0x72>
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	9f 81       	ldd	r25, Y+7	; 0x07
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	69 f0       	breq	.+26     	; 0x19b0 <DIO_voidSetPinvalue+0x8a>
    1996:	ce c0       	rjmp	.+412    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
    1998:	2e 81       	ldd	r18, Y+6	; 0x06
    199a:	3f 81       	ldd	r19, Y+7	; 0x07
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	89 f1       	breq	.+98     	; 0x1a04 <DIO_voidSetPinvalue+0xde>
    19a2:	8e 81       	ldd	r24, Y+6	; 0x06
    19a4:	9f 81       	ldd	r25, Y+7	; 0x07
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	91 05       	cpc	r25, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <DIO_voidSetPinvalue+0x88>
    19ac:	40 c0       	rjmp	.+128    	; 0x1a2e <DIO_voidSetPinvalue+0x108>
    19ae:	c2 c0       	rjmp	.+388    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										CLR_BIT(PORTA_REG,Copy_u8PinId);
    19b0:	ab e3       	ldi	r26, 0x3B	; 59
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	eb e3       	ldi	r30, 0x3B	; 59
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_voidSetPinvalue+0xa8>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_voidSetPinvalue+0xa4>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	ad c0       	rjmp	.+346    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										CLR_BIT(PORTB_REG,Copy_u8PinId);
    19da:	a8 e3       	ldi	r26, 0x38	; 56
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e8 e3       	ldi	r30, 0x38	; 56
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_voidSetPinvalue+0xd2>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_voidSetPinvalue+0xce>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	98 c0       	rjmp	.+304    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										CLR_BIT(PORTC_REG,Copy_u8PinId);
    1a04:	a5 e3       	ldi	r26, 0x35	; 53
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e5 e3       	ldi	r30, 0x35	; 53
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_voidSetPinvalue+0xfc>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_voidSetPinvalue+0xf8>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	83 c0       	rjmp	.+262    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										CLR_BIT(PORTD_REG,Copy_u8PinId);
    1a2e:	a2 e3       	ldi	r26, 0x32	; 50
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e2 e3       	ldi	r30, 0x32	; 50
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_voidSetPinvalue+0x126>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_voidSetPinvalue+0x122>
    1a50:	80 95       	com	r24
    1a52:	84 23       	and	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	6e c0       	rjmp	.+220    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
										break ;
							default :
										break ;
						}
						break ;
			case HIGH  : switch(Copy_u8PortId)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3d 83       	std	Y+5, r19	; 0x05
    1a60:	2c 83       	std	Y+4, r18	; 0x04
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	49 f1       	breq	.+82     	; 0x1abe <DIO_voidSetPinvalue+0x198>
    1a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_voidSetPinvalue+0x15a>
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <DIO_voidSetPinvalue+0x170>
    1a7e:	5a c0       	rjmp	.+180    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
    1a80:	2c 81       	ldd	r18, Y+4	; 0x04
    1a82:	3d 81       	ldd	r19, Y+5	; 0x05
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	71 f1       	breq	.+92     	; 0x1ae6 <DIO_voidSetPinvalue+0x1c0>
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	e9 f1       	breq	.+122    	; 0x1b0e <DIO_voidSetPinvalue+0x1e8>
    1a94:	4f c0       	rjmp	.+158    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
						{
							case PORTA :
										SET_BIT(PORTA_REG,Copy_u8PinId);
    1a96:	ab e3       	ldi	r26, 0x3B	; 59
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	eb e3       	ldi	r30, 0x3B	; 59
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_voidSetPinvalue+0x18e>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <DIO_voidSetPinvalue+0x18a>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	3b c0       	rjmp	.+118    	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTB :
										SET_BIT(PORTB_REG,Copy_u8PinId);
    1abe:	a8 e3       	ldi	r26, 0x38	; 56
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e8 e3       	ldi	r30, 0x38	; 56
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_voidSetPinvalue+0x1b6>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_voidSetPinvalue+0x1b2>
    1ae0:	84 2b       	or	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	27 c0       	rjmp	.+78     	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTC :
										SET_BIT(PORTC_REG,Copy_u8PinId);
    1ae6:	a5 e3       	ldi	r26, 0x35	; 53
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e5 e3       	ldi	r30, 0x35	; 53
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_voidSetPinvalue+0x1de>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_voidSetPinvalue+0x1da>
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <DIO_voidSetPinvalue+0x20e>
										break ;
							case PORTD :
										SET_BIT(PORTD_REG,Copy_u8PinId);
    1b0e:	a2 e3       	ldi	r26, 0x32	; 50
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e2 e3       	ldi	r30, 0x32	; 50
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_voidSetPinvalue+0x206>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_voidSetPinvalue+0x202>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24

			default :
				break ;
		}
	}
}
    1b34:	29 96       	adiw	r28, 0x09	; 9
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8PortId ,u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	29 97       	sbiw	r28, 0x09	; 9
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	6a 83       	std	Y+2, r22	; 0x02
    1b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortId>PORTD || Copy_u8PinId>PIN7)
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <DIO_voidSetPinDirection+0x22>
    1b66:	f6 c0       	rjmp	.+492    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	88 30       	cpi	r24, 0x08	; 8
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <DIO_voidSetPinDirection+0x2a>
    1b6e:	f2 c0       	rjmp	.+484    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
		{
			//do nothing
		}
		else
		{
			switch(Copy_u8Direction)
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	39 87       	std	Y+9, r19	; 0x09
    1b78:	28 87       	std	Y+8, r18	; 0x08
    1b7a:	88 85       	ldd	r24, Y+8	; 0x08
    1b7c:	99 85       	ldd	r25, Y+9	; 0x09
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <DIO_voidSetPinDirection+0x4a>
    1b82:	28 85       	ldd	r18, Y+8	; 0x08
    1b84:	39 85       	ldd	r19, Y+9	; 0x09
    1b86:	21 30       	cpi	r18, 0x01	; 1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <DIO_voidSetPinDirection+0x48>
    1b8c:	75 c0       	rjmp	.+234    	; 0x1c78 <DIO_voidSetPinDirection+0x132>
    1b8e:	e2 c0       	rjmp	.+452    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
			{
				case INPUT  : switch(Copy_u8PortId)
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	3f 83       	std	Y+7, r19	; 0x07
    1b98:	2e 83       	std	Y+6, r18	; 0x06
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	59 f1       	breq	.+86     	; 0x1bfa <DIO_voidSetPinDirection+0xb4>
    1ba4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <DIO_voidSetPinDirection+0x72>
    1bae:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f0       	breq	.+26     	; 0x1bd0 <DIO_voidSetPinDirection+0x8a>
    1bb6:	ce c0       	rjmp	.+412    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
    1bb8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bba:	3f 81       	ldd	r19, Y+7	; 0x07
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	89 f1       	breq	.+98     	; 0x1c24 <DIO_voidSetPinDirection+0xde>
    1bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	91 05       	cpc	r25, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <DIO_voidSetPinDirection+0x88>
    1bcc:	40 c0       	rjmp	.+128    	; 0x1c4e <DIO_voidSetPinDirection+0x108>
    1bce:	c2 c0       	rjmp	.+388    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											CLR_BIT(DDRA_REG,Copy_u8PinId);
    1bd0:	aa e3       	ldi	r26, 0x3A	; 58
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ea e3       	ldi	r30, 0x3A	; 58
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <DIO_voidSetPinDirection+0xa8>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <DIO_voidSetPinDirection+0xa4>
    1bf2:	80 95       	com	r24
    1bf4:	84 23       	and	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	ad c0       	rjmp	.+346    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											CLR_BIT(DDRB_REG,Copy_u8PinId);
    1bfa:	a7 e3       	ldi	r26, 0x37	; 55
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e7 e3       	ldi	r30, 0x37	; 55
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_voidSetPinDirection+0xd2>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_voidSetPinDirection+0xce>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	98 c0       	rjmp	.+304    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											CLR_BIT(DDRC_REG,Copy_u8PinId);
    1c24:	a4 e3       	ldi	r26, 0x34	; 52
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e4 e3       	ldi	r30, 0x34	; 52
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <DIO_voidSetPinDirection+0xfc>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <DIO_voidSetPinDirection+0xf8>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	83 c0       	rjmp	.+262    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											CLR_BIT(DDRD_REG,Copy_u8PinId);
    1c4e:	a1 e3       	ldi	r26, 0x31	; 49
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e1 e3       	ldi	r30, 0x31	; 49
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_voidSetPinDirection+0x126>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_voidSetPinDirection+0x122>
    1c70:	80 95       	com	r24
    1c72:	84 23       	and	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	6e c0       	rjmp	.+220    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
											break ;
								default :
											break ;
							}
							break ;
				case OUTPUT  : switch(Copy_u8PortId)
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3d 83       	std	Y+5, r19	; 0x05
    1c80:	2c 83       	std	Y+4, r18	; 0x04
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	49 f1       	breq	.+82     	; 0x1cde <DIO_voidSetPinDirection+0x198>
    1c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <DIO_voidSetPinDirection+0x15a>
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	61 f0       	breq	.+24     	; 0x1cb6 <DIO_voidSetPinDirection+0x170>
    1c9e:	5a c0       	rjmp	.+180    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
    1ca0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	71 f1       	breq	.+92     	; 0x1d06 <DIO_voidSetPinDirection+0x1c0>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	9d 81       	ldd	r25, Y+5	; 0x05
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	e9 f1       	breq	.+122    	; 0x1d2e <DIO_voidSetPinDirection+0x1e8>
    1cb4:	4f c0       	rjmp	.+158    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
							{
								case PORTA :
											SET_BIT(DDRA_REG,Copy_u8PinId);
    1cb6:	aa e3       	ldi	r26, 0x3A	; 58
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ea e3       	ldi	r30, 0x3A	; 58
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_voidSetPinDirection+0x18e>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_voidSetPinDirection+0x18a>
    1cd8:	84 2b       	or	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	3b c0       	rjmp	.+118    	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTB :
											SET_BIT(DDRB_REG,Copy_u8PinId);
    1cde:	a7 e3       	ldi	r26, 0x37	; 55
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_voidSetPinDirection+0x1b6>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_voidSetPinDirection+0x1b2>
    1d00:	84 2b       	or	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	27 c0       	rjmp	.+78     	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTC :
											SET_BIT(DDRC_REG,Copy_u8PinId);
    1d06:	a4 e3       	ldi	r26, 0x34	; 52
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e4 e3       	ldi	r30, 0x34	; 52
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	48 2f       	mov	r20, r24
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_voidSetPinDirection+0x1de>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 94       	dec	r0
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <DIO_voidSetPinDirection+0x1da>
    1d28:	84 2b       	or	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	13 c0       	rjmp	.+38     	; 0x1d54 <DIO_voidSetPinDirection+0x20e>
											break ;
								case PORTD :
											SET_BIT(DDRD_REG,Copy_u8PinId);
    1d2e:	a1 e3       	ldi	r26, 0x31	; 49
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e1 e3       	ldi	r30, 0x31	; 49
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <DIO_voidSetPinDirection+0x206>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <DIO_voidSetPinDirection+0x202>
    1d50:	84 2b       	or	r24, r20
    1d52:	8c 93       	st	X, r24

					default :
							break ;
			}
		}
}
    1d54:	29 96       	adiw	r28, 0x09	; 9
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <DIO_u8GetPinvalue>:


u8 DIO_u8GetPinvalue(u8 Copy_u8PortId ,u8 Copy_u8PinId)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <DIO_u8GetPinvalue+0x6>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <DIO_u8GetPinvalue+0x8>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	8a 83       	std	Y+2, r24	; 0x02
    1d76:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	3d 83       	std	Y+5, r19	; 0x05
    1d80:	2c 83       	std	Y+4, r18	; 0x04
    1d82:	4c 81       	ldd	r20, Y+4	; 0x04
    1d84:	5d 81       	ldd	r21, Y+5	; 0x05
    1d86:	41 30       	cpi	r20, 0x01	; 1
    1d88:	51 05       	cpc	r21, r1
    1d8a:	41 f1       	breq	.+80     	; 0x1ddc <DIO_u8GetPinvalue+0x76>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	91 05       	cpc	r25, r1
    1d94:	34 f4       	brge	.+12     	; 0x1da2 <DIO_u8GetPinvalue+0x3c>
    1d96:	2c 81       	ldd	r18, Y+4	; 0x04
    1d98:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9a:	21 15       	cp	r18, r1
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	61 f0       	breq	.+24     	; 0x1db8 <DIO_u8GetPinvalue+0x52>
    1da0:	52 c0       	rjmp	.+164    	; 0x1e46 <DIO_u8GetPinvalue+0xe0>
    1da2:	4c 81       	ldd	r20, Y+4	; 0x04
    1da4:	5d 81       	ldd	r21, Y+5	; 0x05
    1da6:	42 30       	cpi	r20, 0x02	; 2
    1da8:	51 05       	cpc	r21, r1
    1daa:	51 f1       	breq	.+84     	; 0x1e00 <DIO_u8GetPinvalue+0x9a>
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	9d 81       	ldd	r25, Y+5	; 0x05
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	91 05       	cpc	r25, r1
    1db4:	b9 f1       	breq	.+110    	; 0x1e24 <DIO_u8GetPinvalue+0xbe>
    1db6:	47 c0       	rjmp	.+142    	; 0x1e46 <DIO_u8GetPinvalue+0xe0>
	{
		case PORTA : Local_u8Variable=GET_BIT(PINA_REG , Copy_u8PinId) ;
    1db8:	e9 e3       	ldi	r30, 0x39	; 57
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a9 01       	movw	r20, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_u8GetPinvalue+0x6a>
    1dcc:	55 95       	asr	r21
    1dce:	47 95       	ror	r20
    1dd0:	8a 95       	dec	r24
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_u8GetPinvalue+0x66>
    1dd4:	ca 01       	movw	r24, r20
    1dd6:	81 70       	andi	r24, 0x01	; 1
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	35 c0       	rjmp	.+106    	; 0x1e46 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTB : Local_u8Variable=GET_BIT(PINB_REG , Copy_u8PinId) ;
    1ddc:	e6 e3       	ldi	r30, 0x36	; 54
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a9 01       	movw	r20, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <DIO_u8GetPinvalue+0x8e>
    1df0:	55 95       	asr	r21
    1df2:	47 95       	ror	r20
    1df4:	8a 95       	dec	r24
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <DIO_u8GetPinvalue+0x8a>
    1df8:	ca 01       	movw	r24, r20
    1dfa:	81 70       	andi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	23 c0       	rjmp	.+70     	; 0x1e46 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTC : Local_u8Variable=GET_BIT(PINC_REG , Copy_u8PinId) ;
    1e00:	e3 e3       	ldi	r30, 0x33	; 51
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a9 01       	movw	r20, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_u8GetPinvalue+0xb2>
    1e14:	55 95       	asr	r21
    1e16:	47 95       	ror	r20
    1e18:	8a 95       	dec	r24
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_u8GetPinvalue+0xae>
    1e1c:	ca 01       	movw	r24, r20
    1e1e:	81 70       	andi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	11 c0       	rjmp	.+34     	; 0x1e46 <DIO_u8GetPinvalue+0xe0>
			break ;
		case PORTD : Local_u8Variable=GET_BIT(PIND_REG , Copy_u8PinId) ;
    1e24:	e0 e3       	ldi	r30, 0x30	; 48
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a9 01       	movw	r20, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <DIO_u8GetPinvalue+0xd6>
    1e38:	55 95       	asr	r21
    1e3a:	47 95       	ror	r20
    1e3c:	8a 95       	dec	r24
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <DIO_u8GetPinvalue+0xd2>
    1e40:	ca 01       	movw	r24, r20
    1e42:	81 70       	andi	r24, 0x01	; 1
    1e44:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <DIO_voidSetPortvalue>:

void DIO_voidSetPortvalue(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <DIO_voidSetPortvalue+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <DIO_voidSetPortvalue+0x8>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	84 30       	cpi	r24, 0x04	; 4
    1e6c:	90 f5       	brcc	.+100    	; 0x1ed2 <DIO_voidSetPortvalue+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3c 83       	std	Y+4, r19	; 0x04
    1e76:	2b 83       	std	Y+3, r18	; 0x03
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	d1 f0       	breq	.+52     	; 0x1eb6 <DIO_voidSetPortvalue+0x5e>
    1e82:	2b 81       	ldd	r18, Y+3	; 0x03
    1e84:	3c 81       	ldd	r19, Y+4	; 0x04
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <DIO_voidSetPortvalue+0x3e>
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	61 f0       	breq	.+24     	; 0x1eac <DIO_voidSetPortvalue+0x54>
    1e94:	1e c0       	rjmp	.+60     	; 0x1ed2 <DIO_voidSetPortvalue+0x7a>
    1e96:	2b 81       	ldd	r18, Y+3	; 0x03
    1e98:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	81 f0       	breq	.+32     	; 0x1ec0 <DIO_voidSetPortvalue+0x68>
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	81 f0       	breq	.+32     	; 0x1eca <DIO_voidSetPortvalue+0x72>
    1eaa:	13 c0       	rjmp	.+38     	; 0x1ed2 <DIO_voidSetPortvalue+0x7a>
		{
			case PORTA :PORTA_REG = Copy_u8Direction ;
    1eac:	eb e3       	ldi	r30, 0x3B	; 59
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	80 83       	st	Z, r24
    1eb4:	0e c0       	rjmp	.+28     	; 0x1ed2 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTB :
						PORTB_REG = Copy_u8Direction ;
    1eb6:	e8 e3       	ldi	r30, 0x38	; 56
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	80 83       	st	Z, r24
    1ebe:	09 c0       	rjmp	.+18     	; 0x1ed2 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTC :
						PORTC_REG = Copy_u8Direction ;
    1ec0:	e5 e3       	ldi	r30, 0x35	; 53
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	80 83       	st	Z, r24
    1ec8:	04 c0       	rjmp	.+8      	; 0x1ed2 <DIO_voidSetPortvalue+0x7a>
						break ;
			case PORTD :
						PORTD_REG = Copy_u8Direction ;
    1eca:	e2 e3       	ldi	r30, 0x32	; 50
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	80 83       	st	Z, r24
						break ;

		}
	}

}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8PortId , u8 Copy_u8Direction )
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <DIO_voidSetPortDirection+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <DIO_voidSetPortDirection+0x8>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortId>PORTD)
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	90 f5       	brcc	.+100    	; 0x1f5a <DIO_voidSetPortDirection+0x7a>
	{
		//do nothing
	}
	else
	{
		switch(Copy_u8PortId)
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	3c 83       	std	Y+4, r19	; 0x04
    1efe:	2b 83       	std	Y+3, r18	; 0x03
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	d1 f0       	breq	.+52     	; 0x1f3e <DIO_voidSetPortDirection+0x5e>
    1f0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0e:	22 30       	cpi	r18, 0x02	; 2
    1f10:	31 05       	cpc	r19, r1
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <DIO_voidSetPortDirection+0x3e>
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	61 f0       	breq	.+24     	; 0x1f34 <DIO_voidSetPortDirection+0x54>
    1f1c:	1e c0       	rjmp	.+60     	; 0x1f5a <DIO_voidSetPortDirection+0x7a>
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	81 f0       	breq	.+32     	; 0x1f48 <DIO_voidSetPortDirection+0x68>
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	91 05       	cpc	r25, r1
    1f30:	81 f0       	breq	.+32     	; 0x1f52 <DIO_voidSetPortDirection+0x72>
    1f32:	13 c0       	rjmp	.+38     	; 0x1f5a <DIO_voidSetPortDirection+0x7a>
		{
			case PORTA :DDRA_REG = Copy_u8Direction ;
    1f34:	ea e3       	ldi	r30, 0x3A	; 58
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 83       	st	Z, r24
    1f3c:	0e c0       	rjmp	.+28     	; 0x1f5a <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTB :
						DDRB_REG = Copy_u8Direction ;
    1f3e:	e7 e3       	ldi	r30, 0x37	; 55
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	80 83       	st	Z, r24
    1f46:	09 c0       	rjmp	.+18     	; 0x1f5a <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTC :
						DDRC_REG = Copy_u8Direction ;
    1f48:	e4 e3       	ldi	r30, 0x34	; 52
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	80 83       	st	Z, r24
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <DIO_voidSetPortDirection+0x7a>
						break ;
			case PORTD :
						DDRD_REG = Copy_u8Direction ;
    1f52:	e1 e3       	ldi	r30, 0x31	; 49
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	80 83       	st	Z, r24
						break ;

		}
	}

}u8 DIO_u8GetPortvalue(u8 Copy_u8PortId)
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <DIO_u8GetPortvalue>:
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <DIO_u8GetPortvalue+0x6>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <DIO_u8GetPortvalue+0x8>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Variable ;
	switch(Copy_u8PortId)
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3c 83       	std	Y+4, r19	; 0x04
    1f7e:	2b 83       	std	Y+3, r18	; 0x03
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	91 05       	cpc	r25, r1
    1f88:	d1 f0       	breq	.+52     	; 0x1fbe <DIO_u8GetPortvalue+0x56>
    1f8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8e:	22 30       	cpi	r18, 0x02	; 2
    1f90:	31 05       	cpc	r19, r1
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <DIO_u8GetPortvalue+0x36>
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	61 f0       	breq	.+24     	; 0x1fb4 <DIO_u8GetPortvalue+0x4c>
    1f9c:	1e c0       	rjmp	.+60     	; 0x1fda <DIO_u8GetPortvalue+0x72>
    1f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	81 f0       	breq	.+32     	; 0x1fc8 <DIO_u8GetPortvalue+0x60>
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	91 05       	cpc	r25, r1
    1fb0:	81 f0       	breq	.+32     	; 0x1fd2 <DIO_u8GetPortvalue+0x6a>
    1fb2:	13 c0       	rjmp	.+38     	; 0x1fda <DIO_u8GetPortvalue+0x72>
	{
		case PORTA : Local_u8Variable=PINA_REG ;
    1fb4:	e9 e3       	ldi	r30, 0x39	; 57
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	0e c0       	rjmp	.+28     	; 0x1fda <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTB : Local_u8Variable=PINB_REG ;
    1fbe:	e6 e3       	ldi	r30, 0x36	; 54
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTC : Local_u8Variable=PINC_REG ;
    1fc8:	e3 e3       	ldi	r30, 0x33	; 51
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <DIO_u8GetPortvalue+0x72>
			break ;
		case PORTD : Local_u8Variable=PIND_REG ;
    1fd2:	e0 e3       	ldi	r30, 0x30	; 48
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	89 83       	std	Y+1, r24	; 0x01
			break ;
		default :
			break ;

	}
	return Local_u8Variable ;
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <ADC_voidInit>:
u32 ADC_u32ADCDigitalValue ;
u32 ADC_u32ADCAnalogValue ;
u8 ADC_Flag = 0 ;

void ADC_voidInit(void)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	//select ref voltage = AVCC
	SET_BIT(ADMUX_REG , ADMUX_REFS0);
    1ff2:	a7 e2       	ldi	r26, 0x27	; 39
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e7 e2       	ldi	r30, 0x27	; 39
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 64       	ori	r24, 0x40	; 64
    1ffe:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG , ADMUX_REFS1);
    2000:	a7 e2       	ldi	r26, 0x27	; 39
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e7 e2       	ldi	r30, 0x27	; 39
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 77       	andi	r24, 0x7F	; 127
    200c:	8c 93       	st	X, r24
	//right adjust
	CLR_BIT(ADMUX_REG , ADMUX_ADLAR);
    200e:	a7 e2       	ldi	r26, 0x27	; 39
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e7 e2       	ldi	r30, 0x27	; 39
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8f 7d       	andi	r24, 0xDF	; 223
    201a:	8c 93       	st	X, r24
	//ADC Enable
	SET_BIT(ADCSRA_REG , ADCSRA_ADEN);
    201c:	a6 e2       	ldi	r26, 0x26	; 38
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e6 e2       	ldi	r30, 0x26	; 38
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	80 68       	ori	r24, 0x80	; 128
    2028:	8c 93       	st	X, r24
	//Disable Auto Trigger
	CLR_BIT(ADCSRA_REG , ADCSRA_ADATE);
    202a:	a6 e2       	ldi	r26, 0x26	; 38
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e6 e2       	ldi	r30, 0x26	; 38
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8f 7d       	andi	r24, 0xDF	; 223
    2036:	8c 93       	st	X, r24
	//Disable PIE for ADC
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIF);
    2038:	a6 e2       	ldi	r26, 0x26	; 38
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e6 e2       	ldi	r30, 0x26	; 38
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8f 7e       	andi	r24, 0xEF	; 239
    2044:	8c 93       	st	X, r24
	//prescaler 64
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS2);
    2046:	a6 e2       	ldi	r26, 0x26	; 38
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e6 e2       	ldi	r30, 0x26	; 38
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	84 60       	ori	r24, 0x04	; 4
    2052:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
    2054:	a6 e2       	ldi	r26, 0x26	; 38
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e6 e2       	ldi	r30, 0x26	; 38
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	82 60       	ori	r24, 0x02	; 2
    2060:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG , ADCSRA_ADPS0);
    2062:	a6 e2       	ldi	r26, 0x26	; 38
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e6 e2       	ldi	r30, 0x26	; 38
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	8e 7f       	andi	r24, 0xFE	; 254
    206e:	8c 93       	st	X, r24
	//ADCSRA_REG &= 0b11111000
	//ADCSRA_REG |= ADC_PRESCALLER

}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <ADC_voidGetAnalogRead>:

u32 ADC_voidGetAnalogRead(u8 Copy_Channel)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	29 97       	sbiw	r28, 0x09	; 9
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_u32ADCDigitalValue ;
	u32 Local_u32ADCAnalogValue ;

	//clear Mux from 0 to 4 (reg&0b11100000)
	ADMUX_REG &= 0b11100000 ;
    208c:	a7 e2       	ldi	r26, 0x27	; 39
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e7 e2       	ldi	r30, 0x27	; 39
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	80 7e       	andi	r24, 0xE0	; 224
    2098:	8c 93       	st	X, r24
	//reg or with copy_channel
	ADMUX_REG |= Copy_Channel ;
    209a:	a7 e2       	ldi	r26, 0x27	; 39
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e7 e2       	ldi	r30, 0x27	; 39
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	90 81       	ld	r25, Z
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	89 2b       	or	r24, r25
    20a8:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    20aa:	a6 e2       	ldi	r26, 0x26	; 38
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e6 e2       	ldi	r30, 0x26	; 38
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 64       	ori	r24, 0x40	; 64
    20b6:	8c 93       	st	X, r24
	//polling flag
	while(GET_BIT(ADCSRA_REG , ADCSRA_ADIF)==0);
    20b8:	e6 e2       	ldi	r30, 0x26	; 38
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	82 95       	swap	r24
    20c0:	8f 70       	andi	r24, 0x0F	; 15
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	81 70       	andi	r24, 0x01	; 1
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	a9 f3       	breq	.-22     	; 0x20b8 <ADC_voidGetAnalogRead+0x42>
	//clear flag
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    20ce:	a6 e2       	ldi	r26, 0x26	; 38
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e6 e2       	ldi	r30, 0x26	; 38
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 61       	ori	r24, 0x10	; 16
    20da:	8c 93       	st	X, r24
	//get reading right adjust
	Local_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    20dc:	e4 e2       	ldi	r30, 0x24	; 36
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	e5 e2       	ldi	r30, 0x25	; 37
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	98 2f       	mov	r25, r24
    20f2:	88 27       	eor	r24, r24
    20f4:	82 0f       	add	r24, r18
    20f6:	93 1f       	adc	r25, r19
    20f8:	aa 27       	eor	r26, r26
    20fa:	97 fd       	sbrc	r25, 7
    20fc:	a0 95       	com	r26
    20fe:	ba 2f       	mov	r27, r26
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	af 83       	std	Y+7, r26	; 0x07
    2106:	b8 87       	std	Y+8, r27	; 0x08

	Local_u32ADCAnalogValue = (Local_u32ADCDigitalValue * 5000) / 1024 ;
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	af 81       	ldd	r26, Y+7	; 0x07
    210e:	b8 85       	ldd	r27, Y+8	; 0x08
    2110:	28 e8       	ldi	r18, 0x88	; 136
    2112:	33 e1       	ldi	r19, 0x13	; 19
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	07 2e       	mov	r0, r23
    2126:	7a e0       	ldi	r23, 0x0A	; 10
    2128:	b6 95       	lsr	r27
    212a:	a7 95       	ror	r26
    212c:	97 95       	ror	r25
    212e:	87 95       	ror	r24
    2130:	7a 95       	dec	r23
    2132:	d1 f7       	brne	.-12     	; 0x2128 <ADC_voidGetAnalogRead+0xb2>
    2134:	70 2d       	mov	r23, r0
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	ab 83       	std	Y+3, r26	; 0x03
    213c:	bc 83       	std	Y+4, r27	; 0x04


	return Local_u32ADCAnalogValue ;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	ab 81       	ldd	r26, Y+3	; 0x03
    2144:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	29 96       	adiw	r28, 0x09	; 9
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <ADC_voidGetAnalogReadAsynch>:

u32 ADC_voidGetAnalogReadAsynch(u8 Copy_Channel , void(*Copy_pvCallBackFunc)(void))
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	27 97       	sbiw	r28, 0x07	; 7
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	7b 83       	std	Y+3, r23	; 0x03
    2174:	6a 83       	std	Y+2, r22	; 0x02
	if((ADC_Flag==1) ||(Copy_pvCallBackFunc==  NULL) )
    2176:	80 91 92 00 	lds	r24, 0x0092
    217a:	81 30       	cpi	r24, 0x01	; 1
    217c:	21 f0       	breq	.+8      	; 0x2186 <ADC_voidGetAnalogReadAsynch+0x2a>
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	29 f4       	brne	.+10     	; 0x2190 <ADC_voidGetAnalogReadAsynch+0x34>
	{
		return 0 ;
    2186:	1c 82       	std	Y+4, r1	; 0x04
    2188:	1d 82       	std	Y+5, r1	; 0x05
    218a:	1e 82       	std	Y+6, r1	; 0x06
    218c:	1f 82       	std	Y+7, r1	; 0x07
    218e:	32 c0       	rjmp	.+100    	; 0x21f4 <ADC_voidGetAnalogReadAsynch+0x98>
	}
	else
	{
		ADC_Flag = 1 ; //busy
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 92 00 	sts	0x0092, r24
		//clear Mux from 0 to 4 (reg&0b11100000)
		ADMUX_REG &= 0b11100000 ;
    2196:	a7 e2       	ldi	r26, 0x27	; 39
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e7 e2       	ldi	r30, 0x27	; 39
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 7e       	andi	r24, 0xE0	; 224
    21a2:	8c 93       	st	X, r24
		//reg or with copy_channel
		ADMUX_REG |= Copy_Channel ;
    21a4:	a7 e2       	ldi	r26, 0x27	; 39
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e7 e2       	ldi	r30, 0x27	; 39
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	90 81       	ld	r25, Z
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	89 2b       	or	r24, r25
    21b2:	8c 93       	st	X, r24
		//set call back func
		ADC_GPF = Copy_pvCallBackFunc ;
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	90 93 91 00 	sts	0x0091, r25
    21bc:	80 93 90 00 	sts	0x0090, r24
		//start conversion
		SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    21c0:	a6 e2       	ldi	r26, 0x26	; 38
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e6 e2       	ldi	r30, 0x26	; 38
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 64       	ori	r24, 0x40	; 64
    21cc:	8c 93       	st	X, r24
		//Interrupt flag
		SET_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    21ce:	a6 e2       	ldi	r26, 0x26	; 38
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e6 e2       	ldi	r30, 0x26	; 38
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	88 60       	ori	r24, 0x08	; 8
    21da:	8c 93       	st	X, r24

		return ADC_u32ADCAnalogValue ;
    21dc:	80 91 93 00 	lds	r24, 0x0093
    21e0:	90 91 94 00 	lds	r25, 0x0094
    21e4:	a0 91 95 00 	lds	r26, 0x0095
    21e8:	b0 91 96 00 	lds	r27, 0x0096
    21ec:	8c 83       	std	Y+4, r24	; 0x04
    21ee:	9d 83       	std	Y+5, r25	; 0x05
    21f0:	ae 83       	std	Y+6, r26	; 0x06
    21f2:	bf 83       	std	Y+7, r27	; 0x07
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	9d 81       	ldd	r25, Y+5	; 0x05
    21f8:	ae 81       	ldd	r26, Y+6	; 0x06
    21fa:	bf 81       	ldd	r27, Y+7	; 0x07
	}
}
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	27 96       	adiw	r28, 0x07	; 7
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <__vector_16>:


void __vector_16(void)
{
    2212:	1f 92       	push	r1
    2214:	0f 92       	push	r0
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	0f 92       	push	r0
    221a:	11 24       	eor	r1, r1
    221c:	2f 93       	push	r18
    221e:	3f 93       	push	r19
    2220:	4f 93       	push	r20
    2222:	5f 93       	push	r21
    2224:	6f 93       	push	r22
    2226:	7f 93       	push	r23
    2228:	8f 93       	push	r24
    222a:	9f 93       	push	r25
    222c:	af 93       	push	r26
    222e:	bf 93       	push	r27
    2230:	ef 93       	push	r30
    2232:	ff 93       	push	r31
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	//get reading right adjust
	ADC_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
    223c:	e4 e2       	ldi	r30, 0x24	; 36
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	e5 e2       	ldi	r30, 0x25	; 37
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	98 2f       	mov	r25, r24
    2252:	88 27       	eor	r24, r24
    2254:	82 0f       	add	r24, r18
    2256:	93 1f       	adc	r25, r19
    2258:	aa 27       	eor	r26, r26
    225a:	97 fd       	sbrc	r25, 7
    225c:	a0 95       	com	r26
    225e:	ba 2f       	mov	r27, r26
    2260:	80 93 97 00 	sts	0x0097, r24
    2264:	90 93 98 00 	sts	0x0098, r25
    2268:	a0 93 99 00 	sts	0x0099, r26
    226c:	b0 93 9a 00 	sts	0x009A, r27
	ADC_u32ADCAnalogValue = (ADC_u32ADCDigitalValue * 5000) / 1024 ;
    2270:	80 91 97 00 	lds	r24, 0x0097
    2274:	90 91 98 00 	lds	r25, 0x0098
    2278:	a0 91 99 00 	lds	r26, 0x0099
    227c:	b0 91 9a 00 	lds	r27, 0x009A
    2280:	28 e8       	ldi	r18, 0x88	; 136
    2282:	33 e1       	ldi	r19, 0x13	; 19
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	07 2e       	mov	r0, r23
    2296:	7a e0       	ldi	r23, 0x0A	; 10
    2298:	b6 95       	lsr	r27
    229a:	a7 95       	ror	r26
    229c:	97 95       	ror	r25
    229e:	87 95       	ror	r24
    22a0:	7a 95       	dec	r23
    22a2:	d1 f7       	brne	.-12     	; 0x2298 <__vector_16+0x86>
    22a4:	70 2d       	mov	r23, r0
    22a6:	80 93 93 00 	sts	0x0093, r24
    22aa:	90 93 94 00 	sts	0x0094, r25
    22ae:	a0 93 95 00 	sts	0x0095, r26
    22b2:	b0 93 96 00 	sts	0x0096, r27

	ADC_Flag = 0 ; //not busy
    22b6:	10 92 92 00 	sts	0x0092, r1

	ADC_GPF() ; //call back function
    22ba:	e0 91 90 00 	lds	r30, 0x0090
    22be:	f0 91 91 00 	lds	r31, 0x0091
    22c2:	09 95       	icall

	//clear intuurrupt
	CLR_BIT(ADCSRA_REG , ADCSRA_ADIE) ;
    22c4:	a6 e2       	ldi	r26, 0x26	; 38
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e6 e2       	ldi	r30, 0x26	; 38
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	87 7f       	andi	r24, 0xF7	; 247
    22d0:	8c 93       	st	X, r24


}
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	ff 91       	pop	r31
    22d8:	ef 91       	pop	r30
    22da:	bf 91       	pop	r27
    22dc:	af 91       	pop	r26
    22de:	9f 91       	pop	r25
    22e0:	8f 91       	pop	r24
    22e2:	7f 91       	pop	r23
    22e4:	6f 91       	pop	r22
    22e6:	5f 91       	pop	r21
    22e8:	4f 91       	pop	r20
    22ea:	3f 91       	pop	r19
    22ec:	2f 91       	pop	r18
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti

000022f8 <STP_voidInit>:
#include"STP_private.h"
#include"STP_interface.h"


void STP_voidInit(void)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(STP_PORT , STP_C1 , OUTPUT) ;
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C2 , OUTPUT) ;
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	62 e0       	ldi	r22, 0x02	; 2
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C3 , OUTPUT) ;
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	63 e0       	ldi	r22, 0x03	; 3
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STP_PORT , STP_C4 , OUTPUT) ;
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	64 e0       	ldi	r22, 0x04	; 4
    2322:	41 e0       	ldi	r20, 0x01	; 1
    2324:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>

	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	61 e0       	ldi	r22, 0x01	; 1
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	62 e0       	ldi	r22, 0x02	; 2
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	63 e0       	ldi	r22, 0x03	; 3
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	64 e0       	ldi	r22, 0x04	; 4
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
}
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <STP_voidDirectionAngle>:

void STP_voidDirectionAngle(u8 Copy_u8Direction , u16 Copy_u8Angle)
{
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	ce 57       	subi	r28, 0x7E	; 126
    2364:	d0 40       	sbci	r29, 0x00	; 0
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	fe 01       	movw	r30, r28
    2372:	e6 58       	subi	r30, 0x86	; 134
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 83       	st	Z, r24
    2378:	fe 01       	movw	r30, r28
    237a:	e5 58       	subi	r30, 0x85	; 133
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	71 83       	std	Z+1, r23	; 0x01
    2380:	60 83       	st	Z, r22
	u32 Local_STPSteps ;
	Local_STPSteps = Copy_u8Angle * 512 /360 ;
    2382:	fe 01       	movw	r30, r28
    2384:	e5 58       	subi	r30, 0x85	; 133
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	98 2f       	mov	r25, r24
    238e:	88 27       	eor	r24, r24
    2390:	99 0f       	add	r25, r25
    2392:	28 e6       	ldi	r18, 0x68	; 104
    2394:	31 e0       	ldi	r19, 0x01	; 1
    2396:	b9 01       	movw	r22, r18
    2398:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__udivmodhi4>
    239c:	cb 01       	movw	r24, r22
    239e:	fe 01       	movw	r30, r28
    23a0:	ea 58       	subi	r30, 0x8A	; 138
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	cc 01       	movw	r24, r24
    23a6:	a0 e0       	ldi	r26, 0x00	; 0
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	80 83       	st	Z, r24
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	a2 83       	std	Z+2, r26	; 0x02
    23b0:	b3 83       	std	Z+3, r27	; 0x03

	switch(Copy_u8Direction)
    23b2:	fe 01       	movw	r30, r28
    23b4:	e6 58       	subi	r30, 0x86	; 134
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	ef 96       	adiw	r28, 0x3f	; 63
    23c0:	3f af       	std	Y+63, r19	; 0x3f
    23c2:	2e af       	std	Y+62, r18	; 0x3e
    23c4:	ef 97       	sbiw	r28, 0x3f	; 63
    23c6:	ef 96       	adiw	r28, 0x3f	; 63
    23c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    23ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    23cc:	ef 97       	sbiw	r28, 0x3f	; 63
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <STP_voidDirectionAngle+0x7e>
    23d2:	26 c3       	rjmp	.+1612   	; 0x2a20 <STP_voidDirectionAngle+0x6ca>
    23d4:	ef 96       	adiw	r28, 0x3f	; 63
    23d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    23d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    23da:	ef 97       	sbiw	r28, 0x3f	; 63
    23dc:	e1 30       	cpi	r30, 0x01	; 1
    23de:	f1 05       	cpc	r31, r1
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <STP_voidDirectionAngle+0x8e>
    23e2:	59 c5       	rjmp	.+2738   	; 0x2e96 <STP_voidDirectionAngle+0xb40>
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    23e4:	fe 01       	movw	r30, r28
    23e6:	ee 58       	subi	r30, 0x8E	; 142
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	10 82       	st	Z, r1
    23ec:	11 82       	std	Z+1, r1	; 0x01
    23ee:	12 82       	std	Z+2, r1	; 0x02
    23f0:	13 82       	std	Z+3, r1	; 0x03
    23f2:	00 c3       	rjmp	.+1536   	; 0x29f4 <STP_voidDirectionAngle+0x69e>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	63 e0       	ldi	r22, 0x03	; 3
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	64 e0       	ldi	r22, 0x04	; 4
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    241c:	fe 01       	movw	r30, r28
    241e:	e3 59       	subi	r30, 0x93	; 147
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a0 e2       	ldi	r26, 0x20	; 32
    2428:	b1 e4       	ldi	r27, 0x41	; 65
    242a:	80 83       	st	Z, r24
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	a2 83       	std	Z+2, r26	; 0x02
    2430:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2432:	8e 01       	movw	r16, r28
    2434:	07 59       	subi	r16, 0x97	; 151
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
    2438:	fe 01       	movw	r30, r28
    243a:	e3 59       	subi	r30, 0x93	; 147
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a ef       	ldi	r20, 0xFA	; 250
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	f8 01       	movw	r30, r16
    2458:	80 83       	st	Z, r24
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	a2 83       	std	Z+2, r26	; 0x02
    245e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2460:	fe 01       	movw	r30, r28
    2462:	e7 59       	subi	r30, 0x97	; 151
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	44 f4       	brge	.+16     	; 0x248e <STP_voidDirectionAngle+0x138>
		__ticks = 1;
    247e:	fe 01       	movw	r30, r28
    2480:	e9 59       	subi	r30, 0x99	; 153
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
    248c:	64 c0       	rjmp	.+200    	; 0x2556 <STP_voidDirectionAngle+0x200>
	else if (__tmp > 65535)
    248e:	fe 01       	movw	r30, r28
    2490:	e7 59       	subi	r30, 0x97	; 151
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	60 81       	ld	r22, Z
    2496:	71 81       	ldd	r23, Z+1	; 0x01
    2498:	82 81       	ldd	r24, Z+2	; 0x02
    249a:	93 81       	ldd	r25, Z+3	; 0x03
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	0c f0       	brlt	.+2      	; 0x24ae <STP_voidDirectionAngle+0x158>
    24ac:	43 c0       	rjmp	.+134    	; 0x2534 <STP_voidDirectionAngle+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	fe 01       	movw	r30, r28
    24b0:	e3 59       	subi	r30, 0x93	; 147
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	8e 01       	movw	r16, r28
    24ce:	09 59       	subi	r16, 0x99	; 153
    24d0:	1f 4f       	sbci	r17, 0xFF	; 255
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	f8 01       	movw	r30, r16
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	1f c0       	rjmp	.+62     	; 0x2524 <STP_voidDirectionAngle+0x1ce>
    24e6:	fe 01       	movw	r30, r28
    24e8:	eb 59       	subi	r30, 0x9B	; 155
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	88 ec       	ldi	r24, 0xC8	; 200
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f4:	fe 01       	movw	r30, r28
    24f6:	eb 59       	subi	r30, 0x9B	; 155
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <STP_voidDirectionAngle+0x1a8>
    2502:	fe 01       	movw	r30, r28
    2504:	eb 59       	subi	r30, 0x9B	; 155
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250c:	de 01       	movw	r26, r28
    250e:	a9 59       	subi	r26, 0x99	; 153
    2510:	bf 4f       	sbci	r27, 0xFF	; 255
    2512:	fe 01       	movw	r30, r28
    2514:	e9 59       	subi	r30, 0x99	; 153
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	11 96       	adiw	r26, 0x01	; 1
    2520:	9c 93       	st	X, r25
    2522:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2524:	fe 01       	movw	r30, r28
    2526:	e9 59       	subi	r30, 0x99	; 153
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	d1 f6       	brne	.-76     	; 0x24e6 <STP_voidDirectionAngle+0x190>
    2532:	27 c0       	rjmp	.+78     	; 0x2582 <STP_voidDirectionAngle+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	8e 01       	movw	r16, r28
    2536:	09 59       	subi	r16, 0x99	; 153
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	fe 01       	movw	r30, r28
    253c:	e7 59       	subi	r30, 0x97	; 151
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	f8 01       	movw	r30, r16
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	de 01       	movw	r26, r28
    2558:	ad 59       	subi	r26, 0x9D	; 157
    255a:	bf 4f       	sbci	r27, 0xFF	; 255
    255c:	fe 01       	movw	r30, r28
    255e:	e9 59       	subi	r30, 0x99	; 153
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	8d 93       	st	X+, r24
    2568:	9c 93       	st	X, r25
    256a:	fe 01       	movw	r30, r28
    256c:	ed 59       	subi	r30, 0x9D	; 157
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <STP_voidDirectionAngle+0x21e>
    2578:	fe 01       	movw	r30, r28
    257a:	ed 59       	subi	r30, 0x9D	; 157
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	61 e0       	ldi	r22, 0x01	; 1
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	62 e0       	ldi	r22, 0x02	; 2
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	63 e0       	ldi	r22, 0x03	; 3
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	64 e0       	ldi	r22, 0x04	; 4
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    25aa:	fe 01       	movw	r30, r28
    25ac:	e1 5a       	subi	r30, 0xA1	; 161
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	a0 e2       	ldi	r26, 0x20	; 32
    25b6:	b1 e4       	ldi	r27, 0x41	; 65
    25b8:	80 83       	st	Z, r24
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	a2 83       	std	Z+2, r26	; 0x02
    25be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	8e 01       	movw	r16, r28
    25c2:	05 5a       	subi	r16, 0xA5	; 165
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	fe 01       	movw	r30, r28
    25c8:	e1 5a       	subi	r30, 0xA1	; 161
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a ef       	ldi	r20, 0xFA	; 250
    25da:	54 e4       	ldi	r21, 0x44	; 68
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	f8 01       	movw	r30, r16
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ee:	fe 01       	movw	r30, r28
    25f0:	e5 5a       	subi	r30, 0xA5	; 165
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	44 f4       	brge	.+16     	; 0x261c <STP_voidDirectionAngle+0x2c6>
		__ticks = 1;
    260c:	fe 01       	movw	r30, r28
    260e:	e7 5a       	subi	r30, 0xA7	; 167
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
    261a:	64 c0       	rjmp	.+200    	; 0x26e4 <STP_voidDirectionAngle+0x38e>
	else if (__tmp > 65535)
    261c:	fe 01       	movw	r30, r28
    261e:	e5 5a       	subi	r30, 0xA5	; 165
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	0c f0       	brlt	.+2      	; 0x263c <STP_voidDirectionAngle+0x2e6>
    263a:	43 c0       	rjmp	.+134    	; 0x26c2 <STP_voidDirectionAngle+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	fe 01       	movw	r30, r28
    263e:	e1 5a       	subi	r30, 0xA1	; 161
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	8e 01       	movw	r16, r28
    265c:	07 5a       	subi	r16, 0xA7	; 167
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	f8 01       	movw	r30, r16
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	1f c0       	rjmp	.+62     	; 0x26b2 <STP_voidDirectionAngle+0x35c>
    2674:	fe 01       	movw	r30, r28
    2676:	e9 5a       	subi	r30, 0xA9	; 169
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	80 83       	st	Z, r24
    2682:	fe 01       	movw	r30, r28
    2684:	e9 5a       	subi	r30, 0xA9	; 169
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <STP_voidDirectionAngle+0x336>
    2690:	fe 01       	movw	r30, r28
    2692:	e9 5a       	subi	r30, 0xA9	; 169
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	de 01       	movw	r26, r28
    269c:	a7 5a       	subi	r26, 0xA7	; 167
    269e:	bf 4f       	sbci	r27, 0xFF	; 255
    26a0:	fe 01       	movw	r30, r28
    26a2:	e7 5a       	subi	r30, 0xA7	; 167
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	11 96       	adiw	r26, 0x01	; 1
    26ae:	9c 93       	st	X, r25
    26b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	fe 01       	movw	r30, r28
    26b4:	e7 5a       	subi	r30, 0xA7	; 167
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	d1 f6       	brne	.-76     	; 0x2674 <STP_voidDirectionAngle+0x31e>
    26c0:	27 c0       	rjmp	.+78     	; 0x2710 <STP_voidDirectionAngle+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	8e 01       	movw	r16, r28
    26c4:	07 5a       	subi	r16, 0xA7	; 167
    26c6:	1f 4f       	sbci	r17, 0xFF	; 255
    26c8:	fe 01       	movw	r30, r28
    26ca:	e5 5a       	subi	r30, 0xA5	; 165
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	de 01       	movw	r26, r28
    26e6:	ab 5a       	subi	r26, 0xAB	; 171
    26e8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	e7 5a       	subi	r30, 0xA7	; 167
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	8d 93       	st	X+, r24
    26f6:	9c 93       	st	X, r25
    26f8:	fe 01       	movw	r30, r28
    26fa:	eb 5a       	subi	r30, 0xAB	; 171
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <STP_voidDirectionAngle+0x3ac>
    2706:	fe 01       	movw	r30, r28
    2708:	eb 5a       	subi	r30, 0xAB	; 171
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	61 e0       	ldi	r22, 0x01	; 1
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	62 e0       	ldi	r22, 0x02	; 2
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	63 e0       	ldi	r22, 0x03	; 3
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	64 e0       	ldi	r22, 0x04	; 4
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    2738:	fe 01       	movw	r30, r28
    273a:	ef 5a       	subi	r30, 0xAF	; 175
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e2       	ldi	r26, 0x20	; 32
    2744:	b1 e4       	ldi	r27, 0x41	; 65
    2746:	80 83       	st	Z, r24
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	a2 83       	std	Z+2, r26	; 0x02
    274c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	8e 01       	movw	r16, r28
    2750:	03 5b       	subi	r16, 0xB3	; 179
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	fe 01       	movw	r30, r28
    2756:	ef 5a       	subi	r30, 0xAF	; 175
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	54 e4       	ldi	r21, 0x44	; 68
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	f8 01       	movw	r30, r16
    2774:	80 83       	st	Z, r24
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	a2 83       	std	Z+2, r26	; 0x02
    277a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277c:	fe 01       	movw	r30, r28
    277e:	e3 5b       	subi	r30, 0xB3	; 179
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	44 f4       	brge	.+16     	; 0x27aa <STP_voidDirectionAngle+0x454>
		__ticks = 1;
    279a:	fe 01       	movw	r30, r28
    279c:	e5 5b       	subi	r30, 0xB5	; 181
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
    27a8:	64 c0       	rjmp	.+200    	; 0x2872 <STP_voidDirectionAngle+0x51c>
	else if (__tmp > 65535)
    27aa:	fe 01       	movw	r30, r28
    27ac:	e3 5b       	subi	r30, 0xB3	; 179
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	3f ef       	ldi	r19, 0xFF	; 255
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	57 e4       	ldi	r21, 0x47	; 71
    27c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c4:	18 16       	cp	r1, r24
    27c6:	0c f0       	brlt	.+2      	; 0x27ca <STP_voidDirectionAngle+0x474>
    27c8:	43 c0       	rjmp	.+134    	; 0x2850 <STP_voidDirectionAngle+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	fe 01       	movw	r30, r28
    27cc:	ef 5a       	subi	r30, 0xAF	; 175
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e2       	ldi	r20, 0x20	; 32
    27de:	51 e4       	ldi	r21, 0x41	; 65
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8e 01       	movw	r16, r28
    27ea:	05 5b       	subi	r16, 0xB5	; 181
    27ec:	1f 4f       	sbci	r17, 0xFF	; 255
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	f8 01       	movw	r30, r16
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	80 83       	st	Z, r24
    2800:	1f c0       	rjmp	.+62     	; 0x2840 <STP_voidDirectionAngle+0x4ea>
    2802:	fe 01       	movw	r30, r28
    2804:	e7 5b       	subi	r30, 0xB7	; 183
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	88 ec       	ldi	r24, 0xC8	; 200
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
    2810:	fe 01       	movw	r30, r28
    2812:	e7 5b       	subi	r30, 0xB7	; 183
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <STP_voidDirectionAngle+0x4c4>
    281e:	fe 01       	movw	r30, r28
    2820:	e7 5b       	subi	r30, 0xB7	; 183
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2828:	de 01       	movw	r26, r28
    282a:	a5 5b       	subi	r26, 0xB5	; 181
    282c:	bf 4f       	sbci	r27, 0xFF	; 255
    282e:	fe 01       	movw	r30, r28
    2830:	e5 5b       	subi	r30, 0xB5	; 181
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	11 96       	adiw	r26, 0x01	; 1
    283c:	9c 93       	st	X, r25
    283e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	fe 01       	movw	r30, r28
    2842:	e5 5b       	subi	r30, 0xB5	; 181
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	d1 f6       	brne	.-76     	; 0x2802 <STP_voidDirectionAngle+0x4ac>
    284e:	27 c0       	rjmp	.+78     	; 0x289e <STP_voidDirectionAngle+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2850:	8e 01       	movw	r16, r28
    2852:	05 5b       	subi	r16, 0xB5	; 181
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	e3 5b       	subi	r30, 0xB3	; 179
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
    2872:	de 01       	movw	r26, r28
    2874:	a9 5b       	subi	r26, 0xB9	; 185
    2876:	bf 4f       	sbci	r27, 0xFF	; 255
    2878:	fe 01       	movw	r30, r28
    287a:	e5 5b       	subi	r30, 0xB5	; 181
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	8d 93       	st	X+, r24
    2884:	9c 93       	st	X, r25
    2886:	fe 01       	movw	r30, r28
    2888:	e9 5b       	subi	r30, 0xB9	; 185
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <STP_voidDirectionAngle+0x53a>
    2894:	fe 01       	movw	r30, r28
    2896:	e9 5b       	subi	r30, 0xB9	; 185
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	62 e0       	ldi	r22, 0x02	; 2
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	63 e0       	ldi	r22, 0x03	; 3
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	64 e0       	ldi	r22, 0x04	; 4
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    28c6:	fe 01       	movw	r30, r28
    28c8:	ed 5b       	subi	r30, 0xBD	; 189
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	a0 e2       	ldi	r26, 0x20	; 32
    28d2:	b1 e4       	ldi	r27, 0x41	; 65
    28d4:	80 83       	st	Z, r24
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	a2 83       	std	Z+2, r26	; 0x02
    28da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28dc:	8e 01       	movw	r16, r28
    28de:	01 5c       	subi	r16, 0xC1	; 193
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	fe 01       	movw	r30, r28
    28e4:	ed 5b       	subi	r30, 0xBD	; 189
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	60 81       	ld	r22, Z
    28ea:	71 81       	ldd	r23, Z+1	; 0x01
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
    28ee:	93 81       	ldd	r25, Z+3	; 0x03
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	f8 01       	movw	r30, r16
    2902:	80 83       	st	Z, r24
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	a2 83       	std	Z+2, r26	; 0x02
    2908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290a:	fe 01       	movw	r30, r28
    290c:	ff 96       	adiw	r30, 0x3f	; 63
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e8       	ldi	r20, 0x80	; 128
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2922:	88 23       	and	r24, r24
    2924:	2c f4       	brge	.+10     	; 0x2930 <STP_voidDirectionAngle+0x5da>
		__ticks = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9e af       	std	Y+62, r25	; 0x3e
    292c:	8d af       	std	Y+61, r24	; 0x3d
    292e:	46 c0       	rjmp	.+140    	; 0x29bc <STP_voidDirectionAngle+0x666>
	else if (__tmp > 65535)
    2930:	fe 01       	movw	r30, r28
    2932:	ff 96       	adiw	r30, 0x3f	; 63
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	64 f5       	brge	.+88     	; 0x29a4 <STP_voidDirectionAngle+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	fe 01       	movw	r30, r28
    294e:	ed 5b       	subi	r30, 0xBD	; 189
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e af       	std	Y+62, r25	; 0x3e
    2978:	8d af       	std	Y+61, r24	; 0x3d
    297a:	0f c0       	rjmp	.+30     	; 0x299a <STP_voidDirectionAngle+0x644>
    297c:	88 ec       	ldi	r24, 0xC8	; 200
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9c af       	std	Y+60, r25	; 0x3c
    2982:	8b af       	std	Y+59, r24	; 0x3b
    2984:	8b ad       	ldd	r24, Y+59	; 0x3b
    2986:	9c ad       	ldd	r25, Y+60	; 0x3c
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <STP_voidDirectionAngle+0x632>
    298c:	9c af       	std	Y+60, r25	; 0x3c
    298e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8d ad       	ldd	r24, Y+61	; 0x3d
    2992:	9e ad       	ldd	r25, Y+62	; 0x3e
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9e af       	std	Y+62, r25	; 0x3e
    2998:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8d ad       	ldd	r24, Y+61	; 0x3d
    299c:	9e ad       	ldd	r25, Y+62	; 0x3e
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <STP_voidDirectionAngle+0x626>
    29a2:	16 c0       	rjmp	.+44     	; 0x29d0 <STP_voidDirectionAngle+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	fe 01       	movw	r30, r28
    29a6:	ff 96       	adiw	r30, 0x3f	; 63
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9e af       	std	Y+62, r25	; 0x3e
    29ba:	8d af       	std	Y+61, r24	; 0x3d
    29bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29be:	9e ad       	ldd	r25, Y+62	; 0x3e
    29c0:	9a af       	std	Y+58, r25	; 0x3a
    29c2:	89 af       	std	Y+57, r24	; 0x39
    29c4:	89 ad       	ldd	r24, Y+57	; 0x39
    29c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <STP_voidDirectionAngle+0x672>
    29cc:	9a af       	std	Y+58, r25	; 0x3a
    29ce:	89 af       	std	Y+57, r24	; 0x39
	Local_STPSteps = Copy_u8Angle * 512 /360 ;

	switch(Copy_u8Direction)
	{
		case ClockWise :
			for(u32 i =0 ; i<Local_STPSteps;i++)
    29d0:	9e 01       	movw	r18, r28
    29d2:	2e 58       	subi	r18, 0x8E	; 142
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	fe 01       	movw	r30, r28
    29d8:	ee 58       	subi	r30, 0x8E	; 142
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	a2 81       	ldd	r26, Z+2	; 0x02
    29e2:	b3 81       	ldd	r27, Z+3	; 0x03
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	a1 1d       	adc	r26, r1
    29e8:	b1 1d       	adc	r27, r1
    29ea:	f9 01       	movw	r30, r18
    29ec:	80 83       	st	Z, r24
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	a2 83       	std	Z+2, r26	; 0x02
    29f2:	b3 83       	std	Z+3, r27	; 0x03
    29f4:	fe 01       	movw	r30, r28
    29f6:	ee 58       	subi	r30, 0x8E	; 142
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	de 01       	movw	r26, r28
    29fc:	aa 58       	subi	r26, 0x8A	; 138
    29fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2a00:	20 81       	ld	r18, Z
    2a02:	31 81       	ldd	r19, Z+1	; 0x01
    2a04:	42 81       	ldd	r20, Z+2	; 0x02
    2a06:	53 81       	ldd	r21, Z+3	; 0x03
    2a08:	8d 91       	ld	r24, X+
    2a0a:	9d 91       	ld	r25, X+
    2a0c:	0d 90       	ld	r0, X+
    2a0e:	bc 91       	ld	r27, X
    2a10:	a0 2d       	mov	r26, r0
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	4a 07       	cpc	r20, r26
    2a18:	5b 07       	cpc	r21, r27
    2a1a:	08 f4       	brcc	.+2      	; 0x2a1e <STP_voidDirectionAngle+0x6c8>
    2a1c:	eb cc       	rjmp	.-1578   	; 0x23f4 <STP_voidDirectionAngle+0x9e>
    2a1e:	3b c2       	rjmp	.+1142   	; 0x2e96 <STP_voidDirectionAngle+0xb40>
				_delay_ms(10);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    2a20:	fe 01       	movw	r30, r28
    2a22:	ef 58       	subi	r30, 0x8F	; 143
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	10 82       	st	Z, r1
    2a28:	21 c2       	rjmp	.+1090   	; 0x2e6c <STP_voidDirectionAngle+0xb16>
			{
				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	61 e0       	ldi	r22, 0x01	; 1
    2a2e:	41 e0       	ldi	r20, 0x01	; 1
    2a30:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	63 e0       	ldi	r22, 0x03	; 3
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	64 e0       	ldi	r22, 0x04	; 4
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	a0 e2       	ldi	r26, 0x20	; 32
    2a58:	b1 e4       	ldi	r27, 0x41	; 65
    2a5a:	8d ab       	std	Y+53, r24	; 0x35
    2a5c:	9e ab       	std	Y+54, r25	; 0x36
    2a5e:	af ab       	std	Y+55, r26	; 0x37
    2a60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a62:	6d a9       	ldd	r22, Y+53	; 0x35
    2a64:	7e a9       	ldd	r23, Y+54	; 0x36
    2a66:	8f a9       	ldd	r24, Y+55	; 0x37
    2a68:	98 ad       	ldd	r25, Y+56	; 0x38
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	4a ef       	ldi	r20, 0xFA	; 250
    2a70:	54 e4       	ldi	r21, 0x44	; 68
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	89 ab       	std	Y+49, r24	; 0x31
    2a7c:	9a ab       	std	Y+50, r25	; 0x32
    2a7e:	ab ab       	std	Y+51, r26	; 0x33
    2a80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a82:	69 a9       	ldd	r22, Y+49	; 0x31
    2a84:	7a a9       	ldd	r23, Y+50	; 0x32
    2a86:	8b a9       	ldd	r24, Y+51	; 0x33
    2a88:	9c a9       	ldd	r25, Y+52	; 0x34
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <STP_voidDirectionAngle+0x74e>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	98 ab       	std	Y+48, r25	; 0x30
    2aa0:	8f a7       	std	Y+47, r24	; 0x2f
    2aa2:	3f c0       	rjmp	.+126    	; 0x2b22 <STP_voidDirectionAngle+0x7cc>
	else if (__tmp > 65535)
    2aa4:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa6:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa8:	8b a9       	ldd	r24, Y+51	; 0x33
    2aaa:	9c a9       	ldd	r25, Y+52	; 0x34
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	4c f5       	brge	.+82     	; 0x2b0e <STP_voidDirectionAngle+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	6d a9       	ldd	r22, Y+53	; 0x35
    2abe:	7e a9       	ldd	r23, Y+54	; 0x36
    2ac0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ac2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	98 ab       	std	Y+48, r25	; 0x30
    2ae2:	8f a7       	std	Y+47, r24	; 0x2f
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <STP_voidDirectionAngle+0x7ae>
    2ae6:	88 ec       	ldi	r24, 0xC8	; 200
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9e a7       	std	Y+46, r25	; 0x2e
    2aec:	8d a7       	std	Y+45, r24	; 0x2d
    2aee:	8d a5       	ldd	r24, Y+45	; 0x2d
    2af0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <STP_voidDirectionAngle+0x79c>
    2af6:	9e a7       	std	Y+46, r25	; 0x2e
    2af8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afc:	98 a9       	ldd	r25, Y+48	; 0x30
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	98 ab       	std	Y+48, r25	; 0x30
    2b02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b06:	98 a9       	ldd	r25, Y+48	; 0x30
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	69 f7       	brne	.-38     	; 0x2ae6 <STP_voidDirectionAngle+0x790>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <STP_voidDirectionAngle+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b10:	7a a9       	ldd	r23, Y+50	; 0x32
    2b12:	8b a9       	ldd	r24, Y+51	; 0x33
    2b14:	9c a9       	ldd	r25, Y+52	; 0x34
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	98 ab       	std	Y+48, r25	; 0x30
    2b20:	8f a7       	std	Y+47, r24	; 0x2f
    2b22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b24:	98 a9       	ldd	r25, Y+48	; 0x30
    2b26:	9c a7       	std	Y+44, r25	; 0x2c
    2b28:	8b a7       	std	Y+43, r24	; 0x2b
    2b2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <STP_voidDirectionAngle+0x7d8>
    2b32:	9c a7       	std	Y+44, r25	; 0x2c
    2b34:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	61 e0       	ldi	r22, 0x01	; 1
    2b3a:	41 e0       	ldi	r20, 0x01	; 1
    2b3c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	62 e0       	ldi	r22, 0x02	; 2
    2b44:	41 e0       	ldi	r20, 0x01	; 1
    2b46:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	63 e0       	ldi	r22, 0x03	; 3
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	64 e0       	ldi	r22, 0x04	; 4
    2b58:	41 e0       	ldi	r20, 0x01	; 1
    2b5a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e2       	ldi	r26, 0x20	; 32
    2b64:	b1 e4       	ldi	r27, 0x41	; 65
    2b66:	8f a3       	std	Y+39, r24	; 0x27
    2b68:	98 a7       	std	Y+40, r25	; 0x28
    2b6a:	a9 a7       	std	Y+41, r26	; 0x29
    2b6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b70:	78 a5       	ldd	r23, Y+40	; 0x28
    2b72:	89 a5       	ldd	r24, Y+41	; 0x29
    2b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	4a ef       	ldi	r20, 0xFA	; 250
    2b7c:	54 e4       	ldi	r21, 0x44	; 68
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	8b a3       	std	Y+35, r24	; 0x23
    2b88:	9c a3       	std	Y+36, r25	; 0x24
    2b8a:	ad a3       	std	Y+37, r26	; 0x25
    2b8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b90:	7c a1       	ldd	r23, Y+36	; 0x24
    2b92:	8d a1       	ldd	r24, Y+37	; 0x25
    2b94:	9e a1       	ldd	r25, Y+38	; 0x26
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e8       	ldi	r20, 0x80	; 128
    2b9c:	5f e3       	ldi	r21, 0x3F	; 63
    2b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba2:	88 23       	and	r24, r24
    2ba4:	2c f4       	brge	.+10     	; 0x2bb0 <STP_voidDirectionAngle+0x85a>
		__ticks = 1;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9a a3       	std	Y+34, r25	; 0x22
    2bac:	89 a3       	std	Y+33, r24	; 0x21
    2bae:	3f c0       	rjmp	.+126    	; 0x2c2e <STP_voidDirectionAngle+0x8d8>
	else if (__tmp > 65535)
    2bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	3f ef       	ldi	r19, 0xFF	; 255
    2bbc:	4f e7       	ldi	r20, 0x7F	; 127
    2bbe:	57 e4       	ldi	r21, 0x47	; 71
    2bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc4:	18 16       	cp	r1, r24
    2bc6:	4c f5       	brge	.+82     	; 0x2c1a <STP_voidDirectionAngle+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bca:	78 a5       	ldd	r23, Y+40	; 0x28
    2bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9a a3       	std	Y+34, r25	; 0x22
    2bee:	89 a3       	std	Y+33, r24	; 0x21
    2bf0:	0f c0       	rjmp	.+30     	; 0x2c10 <STP_voidDirectionAngle+0x8ba>
    2bf2:	88 ec       	ldi	r24, 0xC8	; 200
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	98 a3       	std	Y+32, r25	; 0x20
    2bf8:	8f 8f       	std	Y+31, r24	; 0x1f
    2bfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bfc:	98 a1       	ldd	r25, Y+32	; 0x20
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <STP_voidDirectionAngle+0x8a8>
    2c02:	98 a3       	std	Y+32, r25	; 0x20
    2c04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c06:	89 a1       	ldd	r24, Y+33	; 0x21
    2c08:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	9a a3       	std	Y+34, r25	; 0x22
    2c0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c10:	89 a1       	ldd	r24, Y+33	; 0x21
    2c12:	9a a1       	ldd	r25, Y+34	; 0x22
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	69 f7       	brne	.-38     	; 0x2bf2 <STP_voidDirectionAngle+0x89c>
    2c18:	14 c0       	rjmp	.+40     	; 0x2c42 <STP_voidDirectionAngle+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c20:	9e a1       	ldd	r25, Y+38	; 0x26
    2c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	9a a3       	std	Y+34, r25	; 0x22
    2c2c:	89 a3       	std	Y+33, r24	; 0x21
    2c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c30:	9a a1       	ldd	r25, Y+34	; 0x22
    2c32:	9e 8f       	std	Y+30, r25	; 0x1e
    2c34:	8d 8f       	std	Y+29, r24	; 0x1d
    2c36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <STP_voidDirectionAngle+0x8e4>
    2c3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c40:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	41 e0       	ldi	r20, 0x01	; 1
    2c48:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	62 e0       	ldi	r22, 0x02	; 2
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	63 e0       	ldi	r22, 0x03	; 3
    2c5a:	41 e0       	ldi	r20, 0x01	; 1
    2c5c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	64 e0       	ldi	r22, 0x04	; 4
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 e2       	ldi	r26, 0x20	; 32
    2c70:	b1 e4       	ldi	r27, 0x41	; 65
    2c72:	89 8f       	std	Y+25, r24	; 0x19
    2c74:	9a 8f       	std	Y+26, r25	; 0x1a
    2c76:	ab 8f       	std	Y+27, r26	; 0x1b
    2c78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a ef       	ldi	r20, 0xFA	; 250
    2c88:	54 e4       	ldi	r21, 0x44	; 68
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	8d 8b       	std	Y+21, r24	; 0x15
    2c94:	9e 8b       	std	Y+22, r25	; 0x16
    2c96:	af 8b       	std	Y+23, r26	; 0x17
    2c98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	2c f4       	brge	.+10     	; 0x2cbc <STP_voidDirectionAngle+0x966>
		__ticks = 1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9c 8b       	std	Y+20, r25	; 0x14
    2cb8:	8b 8b       	std	Y+19, r24	; 0x13
    2cba:	3f c0       	rjmp	.+126    	; 0x2d3a <STP_voidDirectionAngle+0x9e4>
	else if (__tmp > 65535)
    2cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	57 e4       	ldi	r21, 0x47	; 71
    2ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	4c f5       	brge	.+82     	; 0x2d26 <STP_voidDirectionAngle+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e2       	ldi	r20, 0x20	; 32
    2ce2:	51 e4       	ldi	r21, 0x41	; 65
    2ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9c 8b       	std	Y+20, r25	; 0x14
    2cfa:	8b 8b       	std	Y+19, r24	; 0x13
    2cfc:	0f c0       	rjmp	.+30     	; 0x2d1c <STP_voidDirectionAngle+0x9c6>
    2cfe:	88 ec       	ldi	r24, 0xC8	; 200
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9a 8b       	std	Y+18, r25	; 0x12
    2d04:	89 8b       	std	Y+17, r24	; 0x11
    2d06:	89 89       	ldd	r24, Y+17	; 0x11
    2d08:	9a 89       	ldd	r25, Y+18	; 0x12
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <STP_voidDirectionAngle+0x9b4>
    2d0e:	9a 8b       	std	Y+18, r25	; 0x12
    2d10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	8b 89       	ldd	r24, Y+19	; 0x13
    2d14:	9c 89       	ldd	r25, Y+20	; 0x14
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	9c 8b       	std	Y+20, r25	; 0x14
    2d1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	69 f7       	brne	.-38     	; 0x2cfe <STP_voidDirectionAngle+0x9a8>
    2d24:	14 c0       	rjmp	.+40     	; 0x2d4e <STP_voidDirectionAngle+0x9f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d26:	6d 89       	ldd	r22, Y+21	; 0x15
    2d28:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9c 8b       	std	Y+20, r25	; 0x14
    2d38:	8b 8b       	std	Y+19, r24	; 0x13
    2d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3e:	98 8b       	std	Y+16, r25	; 0x10
    2d40:	8f 87       	std	Y+15, r24	; 0x0f
    2d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d44:	98 89       	ldd	r25, Y+16	; 0x10
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <STP_voidDirectionAngle+0x9f0>
    2d4a:	98 8b       	std	Y+16, r25	; 0x10
    2d4c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);

				DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	61 e0       	ldi	r22, 0x01	; 1
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	62 e0       	ldi	r22, 0x02	; 2
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	63 e0       	ldi	r22, 0x03	; 3
    2d66:	41 e0       	ldi	r20, 0x01	; 1
    2d68:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
				DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	64 e0       	ldi	r22, 0x04	; 4
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	a0 e2       	ldi	r26, 0x20	; 32
    2d7c:	b1 e4       	ldi	r27, 0x41	; 65
    2d7e:	8b 87       	std	Y+11, r24	; 0x0b
    2d80:	9c 87       	std	Y+12, r25	; 0x0c
    2d82:	ad 87       	std	Y+13, r26	; 0x0d
    2d84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a ef       	ldi	r20, 0xFA	; 250
    2d94:	54 e4       	ldi	r21, 0x44	; 68
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	8f 83       	std	Y+7, r24	; 0x07
    2da0:	98 87       	std	Y+8, r25	; 0x08
    2da2:	a9 87       	std	Y+9, r26	; 0x09
    2da4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e8       	ldi	r20, 0x80	; 128
    2db4:	5f e3       	ldi	r21, 0x3F	; 63
    2db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	2c f4       	brge	.+10     	; 0x2dc8 <STP_voidDirectionAngle+0xa72>
		__ticks = 1;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9e 83       	std	Y+6, r25	; 0x06
    2dc4:	8d 83       	std	Y+5, r24	; 0x05
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <STP_voidDirectionAngle+0xaf0>
	else if (__tmp > 65535)
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	3f ef       	ldi	r19, 0xFF	; 255
    2dd4:	4f e7       	ldi	r20, 0x7F	; 127
    2dd6:	57 e4       	ldi	r21, 0x47	; 71
    2dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	4c f5       	brge	.+82     	; 0x2e32 <STP_voidDirectionAngle+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <STP_voidDirectionAngle+0xad2>
    2e0a:	88 ec       	ldi	r24, 0xC8	; 200
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <STP_voidDirectionAngle+0xac0>
    2e1a:	9c 83       	std	Y+4, r25	; 0x04
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <STP_voidDirectionAngle+0xab4>
    2e30:	14 c0       	rjmp	.+40     	; 0x2e5a <STP_voidDirectionAngle+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <STP_voidDirectionAngle+0xafc>
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);

			}
			break ;
		case AntiClockWise :
			for(u8 i =0 ; i<Local_STPSteps;i++)
    2e5a:	de 01       	movw	r26, r28
    2e5c:	af 58       	subi	r26, 0x8F	; 143
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	ef 58       	subi	r30, 0x8F	; 143
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	8f 5f       	subi	r24, 0xFF	; 255
    2e6a:	8c 93       	st	X, r24
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ef 58       	subi	r30, 0x8F	; 143
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	80 81       	ld	r24, Z
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	50 e0       	ldi	r21, 0x00	; 0
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ea 58       	subi	r30, 0x8A	; 138
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	a2 81       	ldd	r26, Z+2	; 0x02
    2e88:	b3 81       	ldd	r27, Z+3	; 0x03
    2e8a:	28 17       	cp	r18, r24
    2e8c:	39 07       	cpc	r19, r25
    2e8e:	4a 07       	cpc	r20, r26
    2e90:	5b 07       	cpc	r21, r27
    2e92:	08 f4       	brcc	.+2      	; 0x2e96 <STP_voidDirectionAngle+0xb40>
    2e94:	ca cd       	rjmp	.-1132   	; 0x2a2a <STP_voidDirectionAngle+0x6d4>
			break;
		default :
			break ;
	}

}
    2e96:	c2 58       	subi	r28, 0x82	; 130
    2e98:	df 4f       	sbci	r29, 0xFF	; 255
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	1f 91       	pop	r17
    2eaa:	0f 91       	pop	r16
    2eac:	08 95       	ret

00002eae <STP_voidMove>:

void STP_voidMove(void)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	e8 97       	sbiw	r28, 0x38	; 56
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,LOW);
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	61 e0       	ldi	r22, 0x01	; 1
    2ec6:	40 e0       	ldi	r20, 0x00	; 0
    2ec8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	62 e0       	ldi	r22, 0x02	; 2
    2ed0:	41 e0       	ldi	r20, 0x01	; 1
    2ed2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	63 e0       	ldi	r22, 0x03	; 3
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	64 e0       	ldi	r22, 0x04	; 4
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a0 e2       	ldi	r26, 0x20	; 32
    2ef0:	b1 e4       	ldi	r27, 0x41	; 65
    2ef2:	8d ab       	std	Y+53, r24	; 0x35
    2ef4:	9e ab       	std	Y+54, r25	; 0x36
    2ef6:	af ab       	std	Y+55, r26	; 0x37
    2ef8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efa:	6d a9       	ldd	r22, Y+53	; 0x35
    2efc:	7e a9       	ldd	r23, Y+54	; 0x36
    2efe:	8f a9       	ldd	r24, Y+55	; 0x37
    2f00:	98 ad       	ldd	r25, Y+56	; 0x38
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	4a ef       	ldi	r20, 0xFA	; 250
    2f08:	54 e4       	ldi	r21, 0x44	; 68
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	89 ab       	std	Y+49, r24	; 0x31
    2f14:	9a ab       	std	Y+50, r25	; 0x32
    2f16:	ab ab       	std	Y+51, r26	; 0x33
    2f18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f20:	9c a9       	ldd	r25, Y+52	; 0x34
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e8       	ldi	r20, 0x80	; 128
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2e:	88 23       	and	r24, r24
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <STP_voidMove+0x8e>
		__ticks = 1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	98 ab       	std	Y+48, r25	; 0x30
    2f38:	8f a7       	std	Y+47, r24	; 0x2f
    2f3a:	3f c0       	rjmp	.+126    	; 0x2fba <STP_voidMove+0x10c>
	else if (__tmp > 65535)
    2f3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f40:	8b a9       	ldd	r24, Y+51	; 0x33
    2f42:	9c a9       	ldd	r25, Y+52	; 0x34
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	3f ef       	ldi	r19, 0xFF	; 255
    2f48:	4f e7       	ldi	r20, 0x7F	; 127
    2f4a:	57 e4       	ldi	r21, 0x47	; 71
    2f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f50:	18 16       	cp	r1, r24
    2f52:	4c f5       	brge	.+82     	; 0x2fa6 <STP_voidMove+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f54:	6d a9       	ldd	r22, Y+53	; 0x35
    2f56:	7e a9       	ldd	r23, Y+54	; 0x36
    2f58:	8f a9       	ldd	r24, Y+55	; 0x37
    2f5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e2       	ldi	r20, 0x20	; 32
    2f62:	51 e4       	ldi	r21, 0x41	; 65
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	98 ab       	std	Y+48, r25	; 0x30
    2f7a:	8f a7       	std	Y+47, r24	; 0x2f
    2f7c:	0f c0       	rjmp	.+30     	; 0x2f9c <STP_voidMove+0xee>
    2f7e:	88 ec       	ldi	r24, 0xC8	; 200
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9e a7       	std	Y+46, r25	; 0x2e
    2f84:	8d a7       	std	Y+45, r24	; 0x2d
    2f86:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f88:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <STP_voidMove+0xdc>
    2f8e:	9e a7       	std	Y+46, r25	; 0x2e
    2f90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f94:	98 a9       	ldd	r25, Y+48	; 0x30
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	98 ab       	std	Y+48, r25	; 0x30
    2f9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	69 f7       	brne	.-38     	; 0x2f7e <STP_voidMove+0xd0>
    2fa4:	14 c0       	rjmp	.+40     	; 0x2fce <STP_voidMove+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    2faa:	8b a9       	ldd	r24, Y+51	; 0x33
    2fac:	9c a9       	ldd	r25, Y+52	; 0x34
    2fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	98 ab       	std	Y+48, r25	; 0x30
    2fb8:	8f a7       	std	Y+47, r24	; 0x2f
    2fba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fbe:	9c a7       	std	Y+44, r25	; 0x2c
    2fc0:	8b a7       	std	Y+43, r24	; 0x2b
    2fc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <STP_voidMove+0x118>
    2fca:	9c a7       	std	Y+44, r25	; 0x2c
    2fcc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	41 e0       	ldi	r20, 0x01	; 1
    2fd4:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,LOW);
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	62 e0       	ldi	r22, 0x02	; 2
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	63 e0       	ldi	r22, 0x03	; 3
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	64 e0       	ldi	r22, 0x04	; 4
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a0 e2       	ldi	r26, 0x20	; 32
    2ffc:	b1 e4       	ldi	r27, 0x41	; 65
    2ffe:	8f a3       	std	Y+39, r24	; 0x27
    3000:	98 a7       	std	Y+40, r25	; 0x28
    3002:	a9 a7       	std	Y+41, r26	; 0x29
    3004:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	6f a1       	ldd	r22, Y+39	; 0x27
    3008:	78 a5       	ldd	r23, Y+40	; 0x28
    300a:	89 a5       	ldd	r24, Y+41	; 0x29
    300c:	9a a5       	ldd	r25, Y+42	; 0x2a
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a ef       	ldi	r20, 0xFA	; 250
    3014:	54 e4       	ldi	r21, 0x44	; 68
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	8b a3       	std	Y+35, r24	; 0x23
    3020:	9c a3       	std	Y+36, r25	; 0x24
    3022:	ad a3       	std	Y+37, r26	; 0x25
    3024:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3026:	6b a1       	ldd	r22, Y+35	; 0x23
    3028:	7c a1       	ldd	r23, Y+36	; 0x24
    302a:	8d a1       	ldd	r24, Y+37	; 0x25
    302c:	9e a1       	ldd	r25, Y+38	; 0x26
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	2c f4       	brge	.+10     	; 0x3048 <STP_voidMove+0x19a>
		__ticks = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9a a3       	std	Y+34, r25	; 0x22
    3044:	89 a3       	std	Y+33, r24	; 0x21
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <STP_voidMove+0x218>
	else if (__tmp > 65535)
    3048:	6b a1       	ldd	r22, Y+35	; 0x23
    304a:	7c a1       	ldd	r23, Y+36	; 0x24
    304c:	8d a1       	ldd	r24, Y+37	; 0x25
    304e:	9e a1       	ldd	r25, Y+38	; 0x26
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	4f e7       	ldi	r20, 0x7F	; 127
    3056:	57 e4       	ldi	r21, 0x47	; 71
    3058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    305c:	18 16       	cp	r1, r24
    305e:	4c f5       	brge	.+82     	; 0x30b2 <STP_voidMove+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	6f a1       	ldd	r22, Y+39	; 0x27
    3062:	78 a5       	ldd	r23, Y+40	; 0x28
    3064:	89 a5       	ldd	r24, Y+41	; 0x29
    3066:	9a a5       	ldd	r25, Y+42	; 0x2a
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9a a3       	std	Y+34, r25	; 0x22
    3086:	89 a3       	std	Y+33, r24	; 0x21
    3088:	0f c0       	rjmp	.+30     	; 0x30a8 <STP_voidMove+0x1fa>
    308a:	88 ec       	ldi	r24, 0xC8	; 200
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	98 a3       	std	Y+32, r25	; 0x20
    3090:	8f 8f       	std	Y+31, r24	; 0x1f
    3092:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3094:	98 a1       	ldd	r25, Y+32	; 0x20
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <STP_voidMove+0x1e8>
    309a:	98 a3       	std	Y+32, r25	; 0x20
    309c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309e:	89 a1       	ldd	r24, Y+33	; 0x21
    30a0:	9a a1       	ldd	r25, Y+34	; 0x22
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	9a a3       	std	Y+34, r25	; 0x22
    30a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	89 a1       	ldd	r24, Y+33	; 0x21
    30aa:	9a a1       	ldd	r25, Y+34	; 0x22
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	69 f7       	brne	.-38     	; 0x308a <STP_voidMove+0x1dc>
    30b0:	14 c0       	rjmp	.+40     	; 0x30da <STP_voidMove+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	6b a1       	ldd	r22, Y+35	; 0x23
    30b4:	7c a1       	ldd	r23, Y+36	; 0x24
    30b6:	8d a1       	ldd	r24, Y+37	; 0x25
    30b8:	9e a1       	ldd	r25, Y+38	; 0x26
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9a a3       	std	Y+34, r25	; 0x22
    30c4:	89 a3       	std	Y+33, r24	; 0x21
    30c6:	89 a1       	ldd	r24, Y+33	; 0x21
    30c8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ca:	9e 8f       	std	Y+30, r25	; 0x1e
    30cc:	8d 8f       	std	Y+29, r24	; 0x1d
    30ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <STP_voidMove+0x224>
    30d6:	9e 8f       	std	Y+30, r25	; 0x1e
    30d8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	61 e0       	ldi	r22, 0x01	; 1
    30de:	41 e0       	ldi	r20, 0x01	; 1
    30e0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	62 e0       	ldi	r22, 0x02	; 2
    30e8:	41 e0       	ldi	r20, 0x01	; 1
    30ea:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,LOW);
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	63 e0       	ldi	r22, 0x03	; 3
    30f2:	40 e0       	ldi	r20, 0x00	; 0
    30f4:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	64 e0       	ldi	r22, 0x04	; 4
    30fc:	41 e0       	ldi	r20, 0x01	; 1
    30fe:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	a0 e2       	ldi	r26, 0x20	; 32
    3108:	b1 e4       	ldi	r27, 0x41	; 65
    310a:	89 8f       	std	Y+25, r24	; 0x19
    310c:	9a 8f       	std	Y+26, r25	; 0x1a
    310e:	ab 8f       	std	Y+27, r26	; 0x1b
    3110:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3112:	69 8d       	ldd	r22, Y+25	; 0x19
    3114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	4a ef       	ldi	r20, 0xFA	; 250
    3120:	54 e4       	ldi	r21, 0x44	; 68
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	8d 8b       	std	Y+21, r24	; 0x15
    312c:	9e 8b       	std	Y+22, r25	; 0x16
    312e:	af 8b       	std	Y+23, r26	; 0x17
    3130:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3132:	6d 89       	ldd	r22, Y+21	; 0x15
    3134:	7e 89       	ldd	r23, Y+22	; 0x16
    3136:	8f 89       	ldd	r24, Y+23	; 0x17
    3138:	98 8d       	ldd	r25, Y+24	; 0x18
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e8       	ldi	r20, 0x80	; 128
    3140:	5f e3       	ldi	r21, 0x3F	; 63
    3142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3146:	88 23       	and	r24, r24
    3148:	2c f4       	brge	.+10     	; 0x3154 <STP_voidMove+0x2a6>
		__ticks = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9c 8b       	std	Y+20, r25	; 0x14
    3150:	8b 8b       	std	Y+19, r24	; 0x13
    3152:	3f c0       	rjmp	.+126    	; 0x31d2 <STP_voidMove+0x324>
	else if (__tmp > 65535)
    3154:	6d 89       	ldd	r22, Y+21	; 0x15
    3156:	7e 89       	ldd	r23, Y+22	; 0x16
    3158:	8f 89       	ldd	r24, Y+23	; 0x17
    315a:	98 8d       	ldd	r25, Y+24	; 0x18
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	3f ef       	ldi	r19, 0xFF	; 255
    3160:	4f e7       	ldi	r20, 0x7F	; 127
    3162:	57 e4       	ldi	r21, 0x47	; 71
    3164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3168:	18 16       	cp	r1, r24
    316a:	4c f5       	brge	.+82     	; 0x31be <STP_voidMove+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316c:	69 8d       	ldd	r22, Y+25	; 0x19
    316e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e2       	ldi	r20, 0x20	; 32
    317a:	51 e4       	ldi	r21, 0x41	; 65
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9c 8b       	std	Y+20, r25	; 0x14
    3192:	8b 8b       	std	Y+19, r24	; 0x13
    3194:	0f c0       	rjmp	.+30     	; 0x31b4 <STP_voidMove+0x306>
    3196:	88 ec       	ldi	r24, 0xC8	; 200
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	9a 8b       	std	Y+18, r25	; 0x12
    319c:	89 8b       	std	Y+17, r24	; 0x11
    319e:	89 89       	ldd	r24, Y+17	; 0x11
    31a0:	9a 89       	ldd	r25, Y+18	; 0x12
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <STP_voidMove+0x2f4>
    31a6:	9a 8b       	std	Y+18, r25	; 0x12
    31a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31aa:	8b 89       	ldd	r24, Y+19	; 0x13
    31ac:	9c 89       	ldd	r25, Y+20	; 0x14
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	9c 8b       	std	Y+20, r25	; 0x14
    31b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b4:	8b 89       	ldd	r24, Y+19	; 0x13
    31b6:	9c 89       	ldd	r25, Y+20	; 0x14
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	69 f7       	brne	.-38     	; 0x3196 <STP_voidMove+0x2e8>
    31bc:	14 c0       	rjmp	.+40     	; 0x31e6 <STP_voidMove+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31be:	6d 89       	ldd	r22, Y+21	; 0x15
    31c0:	7e 89       	ldd	r23, Y+22	; 0x16
    31c2:	8f 89       	ldd	r24, Y+23	; 0x17
    31c4:	98 8d       	ldd	r25, Y+24	; 0x18
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9c 8b       	std	Y+20, r25	; 0x14
    31d0:	8b 8b       	std	Y+19, r24	; 0x13
    31d2:	8b 89       	ldd	r24, Y+19	; 0x13
    31d4:	9c 89       	ldd	r25, Y+20	; 0x14
    31d6:	98 8b       	std	Y+16, r25	; 0x10
    31d8:	8f 87       	std	Y+15, r24	; 0x0f
    31da:	8f 85       	ldd	r24, Y+15	; 0x0f
    31dc:	98 89       	ldd	r25, Y+16	; 0x10
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	f1 f7       	brne	.-4      	; 0x31de <STP_voidMove+0x330>
    31e2:	98 8b       	std	Y+16, r25	; 0x10
    31e4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);

			DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	61 e0       	ldi	r22, 0x01	; 1
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	62 e0       	ldi	r22, 0x02	; 2
    31f4:	41 e0       	ldi	r20, 0x01	; 1
    31f6:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	63 e0       	ldi	r22, 0x03	; 3
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
			DIO_voidSetPinvalue(STP_PORT , STP_C4 ,LOW);
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	64 e0       	ldi	r22, 0x04	; 4
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	a0 e2       	ldi	r26, 0x20	; 32
    3214:	b1 e4       	ldi	r27, 0x41	; 65
    3216:	8b 87       	std	Y+11, r24	; 0x0b
    3218:	9c 87       	std	Y+12, r25	; 0x0c
    321a:	ad 87       	std	Y+13, r26	; 0x0d
    321c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3220:	7c 85       	ldd	r23, Y+12	; 0x0c
    3222:	8d 85       	ldd	r24, Y+13	; 0x0d
    3224:	9e 85       	ldd	r25, Y+14	; 0x0e
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	4a ef       	ldi	r20, 0xFA	; 250
    322c:	54 e4       	ldi	r21, 0x44	; 68
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	8f 83       	std	Y+7, r24	; 0x07
    3238:	98 87       	std	Y+8, r25	; 0x08
    323a:	a9 87       	std	Y+9, r26	; 0x09
    323c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    323e:	6f 81       	ldd	r22, Y+7	; 0x07
    3240:	78 85       	ldd	r23, Y+8	; 0x08
    3242:	89 85       	ldd	r24, Y+9	; 0x09
    3244:	9a 85       	ldd	r25, Y+10	; 0x0a
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f e3       	ldi	r21, 0x3F	; 63
    324e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3252:	88 23       	and	r24, r24
    3254:	2c f4       	brge	.+10     	; 0x3260 <STP_voidMove+0x3b2>
		__ticks = 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9e 83       	std	Y+6, r25	; 0x06
    325c:	8d 83       	std	Y+5, r24	; 0x05
    325e:	3f c0       	rjmp	.+126    	; 0x32de <STP_voidMove+0x430>
	else if (__tmp > 65535)
    3260:	6f 81       	ldd	r22, Y+7	; 0x07
    3262:	78 85       	ldd	r23, Y+8	; 0x08
    3264:	89 85       	ldd	r24, Y+9	; 0x09
    3266:	9a 85       	ldd	r25, Y+10	; 0x0a
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	3f ef       	ldi	r19, 0xFF	; 255
    326c:	4f e7       	ldi	r20, 0x7F	; 127
    326e:	57 e4       	ldi	r21, 0x47	; 71
    3270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3274:	18 16       	cp	r1, r24
    3276:	4c f5       	brge	.+82     	; 0x32ca <STP_voidMove+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3278:	6b 85       	ldd	r22, Y+11	; 0x0b
    327a:	7c 85       	ldd	r23, Y+12	; 0x0c
    327c:	8d 85       	ldd	r24, Y+13	; 0x0d
    327e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e2       	ldi	r20, 0x20	; 32
    3286:	51 e4       	ldi	r21, 0x41	; 65
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	0f c0       	rjmp	.+30     	; 0x32c0 <STP_voidMove+0x412>
    32a2:	88 ec       	ldi	r24, 0xC8	; 200
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	9c 81       	ldd	r25, Y+4	; 0x04
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <STP_voidMove+0x400>
    32b2:	9c 83       	std	Y+4, r25	; 0x04
    32b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c0:	8d 81       	ldd	r24, Y+5	; 0x05
    32c2:	9e 81       	ldd	r25, Y+6	; 0x06
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	69 f7       	brne	.-38     	; 0x32a2 <STP_voidMove+0x3f4>
    32c8:	fc cd       	rjmp	.-1032   	; 0x2ec2 <STP_voidMove+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ca:	6f 81       	ldd	r22, Y+7	; 0x07
    32cc:	78 85       	ldd	r23, Y+8	; 0x08
    32ce:	89 85       	ldd	r24, Y+9	; 0x09
    32d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9e 83       	std	Y+6, r25	; 0x06
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <STP_voidMove+0x43c>
    32ee:	9a 83       	std	Y+2, r25	; 0x02
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	e7 cd       	rjmp	.-1074   	; 0x2ec2 <STP_voidMove+0x14>

000032f4 <STP_voidStop>:
			_delay_ms(10);
	}
}

void STP_voidStop(void)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	2e 97       	sbiw	r28, 0x0e	; 14
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinvalue(STP_PORT , STP_C1 ,HIGH);
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	61 e0       	ldi	r22, 0x01	; 1
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C2 ,HIGH);
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	62 e0       	ldi	r22, 0x02	; 2
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C3 ,HIGH);
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	63 e0       	ldi	r22, 0x03	; 3
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(STP_PORT , STP_C4 ,HIGH);
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	64 e0       	ldi	r22, 0x04	; 4
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e2       	ldi	r26, 0x20	; 32
    3336:	b1 e4       	ldi	r27, 0x41	; 65
    3338:	8b 87       	std	Y+11, r24	; 0x0b
    333a:	9c 87       	std	Y+12, r25	; 0x0c
    333c:	ad 87       	std	Y+13, r26	; 0x0d
    333e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	6b 85       	ldd	r22, Y+11	; 0x0b
    3342:	7c 85       	ldd	r23, Y+12	; 0x0c
    3344:	8d 85       	ldd	r24, Y+13	; 0x0d
    3346:	9e 85       	ldd	r25, Y+14	; 0x0e
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a ef       	ldi	r20, 0xFA	; 250
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	8f 83       	std	Y+7, r24	; 0x07
    335a:	98 87       	std	Y+8, r25	; 0x08
    335c:	a9 87       	std	Y+9, r26	; 0x09
    335e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <STP_voidStop+0x8e>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <STP_voidStop+0x10c>
	else if (__tmp > 65535)
    3382:	6f 81       	ldd	r22, Y+7	; 0x07
    3384:	78 85       	ldd	r23, Y+8	; 0x08
    3386:	89 85       	ldd	r24, Y+9	; 0x09
    3388:	9a 85       	ldd	r25, Y+10	; 0x0a
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <STP_voidStop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	6b 85       	ldd	r22, Y+11	; 0x0b
    339c:	7c 85       	ldd	r23, Y+12	; 0x0c
    339e:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <STP_voidStop+0xee>
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 83       	std	Y+4, r25	; 0x04
    33ca:	8b 83       	std	Y+3, r24	; 0x03
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	9c 81       	ldd	r25, Y+4	; 0x04
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <STP_voidStop+0xdc>
    33d4:	9c 83       	std	Y+4, r25	; 0x04
    33d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8d 81       	ldd	r24, Y+5	; 0x05
    33da:	9e 81       	ldd	r25, Y+6	; 0x06
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <STP_voidStop+0xd0>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <STP_voidStop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	6f 81       	ldd	r22, Y+7	; 0x07
    33ee:	78 85       	ldd	r23, Y+8	; 0x08
    33f0:	89 85       	ldd	r24, Y+9	; 0x09
    33f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	9a 83       	std	Y+2, r25	; 0x02
    3406:	89 83       	std	Y+1, r24	; 0x01
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <STP_voidStop+0x118>
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    3414:	2e 96       	adiw	r28, 0x0e	; 14
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <SevenSeg_voidInit>:




void SevenSeg_voidInit(u8 Copy_u8PortId)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	0f 92       	push	r0
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	89 83       	std	Y+1, r24	; 0x01
	LED_voidInitLedString(Copy_u8PortId);
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	0e 94 48 1a 	call	0x3490	; 0x3490 <LED_voidInitLedString>
}
    3438:	0f 90       	pop	r0
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	08 95       	ret

00003440 <SevenSeg_voidDisplayNumber>:

void SevenSeg_voidDisplayNumber(u8 Copy_u8PortId,u8 Copy_u8DisblayNumber)
{
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	00 d0       	rcall	.+0      	; 0x3446 <SevenSeg_voidDisplayNumber+0x6>
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	6a 83       	std	Y+2, r22	; 0x02
	if ( (Copy_u8DisblayNumber >= 0) || (Copy_u8DisblayNumber<10) )
	{
		LED_voidLedStringOnOff(Copy_u8PortId ,SevenSEG_u8SevenSegArray[Copy_u8DisblayNumber]);
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	fc 01       	movw	r30, r24
    3456:	e8 59       	subi	r30, 0x98	; 152
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	90 81       	ld	r25, Z
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	69 2f       	mov	r22, r25
    3460:	0e 94 81 1a 	call	0x3502	; 0x3502 <LED_voidLedStringOnOff>
	}
	else
	{
		//Do nothing
	}
}
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	08 95       	ret

0000346e <LED_voidInitOneLed>:
#include"LED_interface.h"



void LED_voidInitOneLed(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	00 d0       	rcall	.+0      	; 0x3474 <LED_voidInitOneLed+0x6>
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Copy_u8PortId ,Copy_u8PinId , OUTPUT) ;
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	6a 81       	ldd	r22, Y+2	; 0x02
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <LED_voidInitLedString>:

void LED_voidInitLedString(u8 Copy_u8PortId)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	0f 92       	push	r0
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection(Copy_u8PortId , DIO_u8PORT_OUTPUT);
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	6f ef       	ldi	r22, 0xFF	; 255
    34a0:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DIO_voidSetPortDirection>
}
    34a4:	0f 90       	pop	r0
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <LED_voidLedOnOff>:

void LED_voidLedOnOff(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8State)
{
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <LED_voidLedOnOff+0x6>
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <LED_voidLedOnOff+0x8>
    34b4:	0f 92       	push	r0
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	6a 83       	std	Y+2, r22	; 0x02
    34be:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8State)
    34c0:	8b 81       	ldd	r24, Y+3	; 0x03
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	3d 83       	std	Y+5, r19	; 0x05
    34c8:	2c 83       	std	Y+4, r18	; 0x04
    34ca:	8c 81       	ldd	r24, Y+4	; 0x04
    34cc:	9d 81       	ldd	r25, Y+5	; 0x05
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	59 f0       	breq	.+22     	; 0x34e8 <LED_voidLedOnOff+0x3c>
    34d2:	2c 81       	ldd	r18, Y+4	; 0x04
    34d4:	3d 81       	ldd	r19, Y+5	; 0x05
    34d6:	21 30       	cpi	r18, 0x01	; 1
    34d8:	31 05       	cpc	r19, r1
    34da:	59 f4       	brne	.+22     	; 0x34f2 <LED_voidLedOnOff+0x46>
	{
		case ON  :	DIO_voidSetPinvalue(Copy_u8PortId ,Copy_u8PinId , HIGH) ; break ;
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	6a 81       	ldd	r22, Y+2	; 0x02
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <LED_voidLedOnOff+0x46>
		case OFF :	DIO_voidSetPinvalue(Copy_u8PortId ,Copy_u8PinId , LOW ) ; break ;
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	6a 81       	ldd	r22, Y+2	; 0x02
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
		default  :
			break ;
	}
}
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <LED_voidLedStringOnOff>:
void LED_voidLedStringOnOff(u8 Copy_u8PortId,u8 Copy_u8Value)
{
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	00 d0       	rcall	.+0      	; 0x3508 <LED_voidLedStringOnOff+0x6>
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	89 83       	std	Y+1, r24	; 0x01
    350e:	6a 83       	std	Y+2, r22	; 0x02

	DIO_voidSetPortvalue(Copy_u8PortId , Copy_u8Value) ;
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	6a 81       	ldd	r22, Y+2	; 0x02
    3514:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_voidSetPortvalue>

}
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	cf 91       	pop	r28
    351e:	df 91       	pop	r29
    3520:	08 95       	ret

00003522 <LCD_voidInit>:
#include"LCD_config.h"
#include"LCD_private.h"
#include"LCD_interface.h"

void LCD_voidInit(void)
{
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	c6 54       	subi	r28, 0x46	; 70
    3530:	d0 40       	sbci	r29, 0x00	; 0
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
	/*config LCD control pins*/
	DIO_voidSetPinDirection(LCD_CR , RS_PIN , OUTPUT) ; //rs output
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	41 e0       	ldi	r20, 0x01	; 1
    3542:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR , RW_PIN , OUTPUT) ; //rw output
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	61 e0       	ldi	r22, 0x01	; 1
    354a:	41 e0       	ldi	r20, 0x01	; 1
    354c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR , E_PIN , OUTPUT) ; //E output
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	62 e0       	ldi	r22, 0x02	; 2
    3554:	41 e0       	ldi	r20, 0x01	; 1
    3556:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>

	/*Direction of data pins*/
	DIO_voidSetPortDirection(LCD_DR , DIO_u8PORT_OUTPUT);
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	6f ef       	ldi	r22, 0xFF	; 255
    355e:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <DIO_voidSetPortDirection>
    3562:	fe 01       	movw	r30, r28
    3564:	ed 5b       	subi	r30, 0xBD	; 189
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	a8 e4       	ldi	r26, 0x48	; 72
    356e:	b2 e4       	ldi	r27, 0x42	; 66
    3570:	80 83       	st	Z, r24
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	a2 83       	std	Z+2, r26	; 0x02
    3576:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3578:	8e 01       	movw	r16, r28
    357a:	01 5c       	subi	r16, 0xC1	; 193
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	fe 01       	movw	r30, r28
    3580:	ed 5b       	subi	r30, 0xBD	; 189
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	93 81       	ldd	r25, Z+3	; 0x03
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	4a ef       	ldi	r20, 0xFA	; 250
    3592:	54 e4       	ldi	r21, 0x44	; 68
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	f8 01       	movw	r30, r16
    359e:	80 83       	st	Z, r24
    35a0:	91 83       	std	Z+1, r25	; 0x01
    35a2:	a2 83       	std	Z+2, r26	; 0x02
    35a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35a6:	fe 01       	movw	r30, r28
    35a8:	ff 96       	adiw	r30, 0x3f	; 63
    35aa:	60 81       	ld	r22, Z
    35ac:	71 81       	ldd	r23, Z+1	; 0x01
    35ae:	82 81       	ldd	r24, Z+2	; 0x02
    35b0:	93 81       	ldd	r25, Z+3	; 0x03
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e8       	ldi	r20, 0x80	; 128
    35b8:	5f e3       	ldi	r21, 0x3F	; 63
    35ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35be:	88 23       	and	r24, r24
    35c0:	2c f4       	brge	.+10     	; 0x35cc <LCD_voidInit+0xaa>
		__ticks = 1;
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9e af       	std	Y+62, r25	; 0x3e
    35c8:	8d af       	std	Y+61, r24	; 0x3d
    35ca:	46 c0       	rjmp	.+140    	; 0x3658 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    35cc:	fe 01       	movw	r30, r28
    35ce:	ff 96       	adiw	r30, 0x3f	; 63
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	3f ef       	ldi	r19, 0xFF	; 255
    35dc:	4f e7       	ldi	r20, 0x7F	; 127
    35de:	57 e4       	ldi	r21, 0x47	; 71
    35e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35e4:	18 16       	cp	r1, r24
    35e6:	64 f5       	brge	.+88     	; 0x3640 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e8:	fe 01       	movw	r30, r28
    35ea:	ed 5b       	subi	r30, 0xBD	; 189
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	60 81       	ld	r22, Z
    35f0:	71 81       	ldd	r23, Z+1	; 0x01
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	93 81       	ldd	r25, Z+3	; 0x03
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	51 e4       	ldi	r21, 0x41	; 65
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9e af       	std	Y+62, r25	; 0x3e
    3614:	8d af       	std	Y+61, r24	; 0x3d
    3616:	0f c0       	rjmp	.+30     	; 0x3636 <LCD_voidInit+0x114>
    3618:	88 ec       	ldi	r24, 0xC8	; 200
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	9c af       	std	Y+60, r25	; 0x3c
    361e:	8b af       	std	Y+59, r24	; 0x3b
    3620:	8b ad       	ldd	r24, Y+59	; 0x3b
    3622:	9c ad       	ldd	r25, Y+60	; 0x3c
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <LCD_voidInit+0x102>
    3628:	9c af       	std	Y+60, r25	; 0x3c
    362a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362c:	8d ad       	ldd	r24, Y+61	; 0x3d
    362e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	9e af       	std	Y+62, r25	; 0x3e
    3634:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	8d ad       	ldd	r24, Y+61	; 0x3d
    3638:	9e ad       	ldd	r25, Y+62	; 0x3e
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	69 f7       	brne	.-38     	; 0x3618 <LCD_voidInit+0xf6>
    363e:	16 c0       	rjmp	.+44     	; 0x366c <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3640:	fe 01       	movw	r30, r28
    3642:	ff 96       	adiw	r30, 0x3f	; 63
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9e af       	std	Y+62, r25	; 0x3e
    3656:	8d af       	std	Y+61, r24	; 0x3d
    3658:	8d ad       	ldd	r24, Y+61	; 0x3d
    365a:	9e ad       	ldd	r25, Y+62	; 0x3e
    365c:	9a af       	std	Y+58, r25	; 0x3a
    365e:	89 af       	std	Y+57, r24	; 0x39
    3660:	89 ad       	ldd	r24, Y+57	; 0x39
    3662:	9a ad       	ldd	r25, Y+58	; 0x3a
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	f1 f7       	brne	.-4      	; 0x3664 <LCD_voidInit+0x142>
    3668:	9a af       	std	Y+58, r25	; 0x3a
    366a:	89 af       	std	Y+57, r24	; 0x39

	/*delay 50 ms*/
	_delay_ms(50);

	/*Send Function Set instruction*/
	LCD_voidSendCommand(0b00111000);
    366c:	88 e3       	ldi	r24, 0x38	; 56
    366e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a0 e0       	ldi	r26, 0x00	; 0
    3678:	b0 e4       	ldi	r27, 0x40	; 64
    367a:	8d ab       	std	Y+53, r24	; 0x35
    367c:	9e ab       	std	Y+54, r25	; 0x36
    367e:	af ab       	std	Y+55, r26	; 0x37
    3680:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3682:	6d a9       	ldd	r22, Y+53	; 0x35
    3684:	7e a9       	ldd	r23, Y+54	; 0x36
    3686:	8f a9       	ldd	r24, Y+55	; 0x37
    3688:	98 ad       	ldd	r25, Y+56	; 0x38
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	4a ef       	ldi	r20, 0xFA	; 250
    3690:	54 e4       	ldi	r21, 0x44	; 68
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	89 ab       	std	Y+49, r24	; 0x31
    369c:	9a ab       	std	Y+50, r25	; 0x32
    369e:	ab ab       	std	Y+51, r26	; 0x33
    36a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36a2:	69 a9       	ldd	r22, Y+49	; 0x31
    36a4:	7a a9       	ldd	r23, Y+50	; 0x32
    36a6:	8b a9       	ldd	r24, Y+51	; 0x33
    36a8:	9c a9       	ldd	r25, Y+52	; 0x34
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	2c f4       	brge	.+10     	; 0x36c4 <LCD_voidInit+0x1a2>
		__ticks = 1;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	98 ab       	std	Y+48, r25	; 0x30
    36c0:	8f a7       	std	Y+47, r24	; 0x2f
    36c2:	3f c0       	rjmp	.+126    	; 0x3742 <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    36c4:	69 a9       	ldd	r22, Y+49	; 0x31
    36c6:	7a a9       	ldd	r23, Y+50	; 0x32
    36c8:	8b a9       	ldd	r24, Y+51	; 0x33
    36ca:	9c a9       	ldd	r25, Y+52	; 0x34
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36d8:	18 16       	cp	r1, r24
    36da:	4c f5       	brge	.+82     	; 0x372e <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	6d a9       	ldd	r22, Y+53	; 0x35
    36de:	7e a9       	ldd	r23, Y+54	; 0x36
    36e0:	8f a9       	ldd	r24, Y+55	; 0x37
    36e2:	98 ad       	ldd	r25, Y+56	; 0x38
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	40 e2       	ldi	r20, 0x20	; 32
    36ea:	51 e4       	ldi	r21, 0x41	; 65
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	98 ab       	std	Y+48, r25	; 0x30
    3702:	8f a7       	std	Y+47, r24	; 0x2f
    3704:	0f c0       	rjmp	.+30     	; 0x3724 <LCD_voidInit+0x202>
    3706:	88 ec       	ldi	r24, 0xC8	; 200
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9e a7       	std	Y+46, r25	; 0x2e
    370c:	8d a7       	std	Y+45, r24	; 0x2d
    370e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3710:	9e a5       	ldd	r25, Y+46	; 0x2e
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <LCD_voidInit+0x1f0>
    3716:	9e a7       	std	Y+46, r25	; 0x2e
    3718:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371a:	8f a5       	ldd	r24, Y+47	; 0x2f
    371c:	98 a9       	ldd	r25, Y+48	; 0x30
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	98 ab       	std	Y+48, r25	; 0x30
    3722:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3724:	8f a5       	ldd	r24, Y+47	; 0x2f
    3726:	98 a9       	ldd	r25, Y+48	; 0x30
    3728:	00 97       	sbiw	r24, 0x00	; 0
    372a:	69 f7       	brne	.-38     	; 0x3706 <LCD_voidInit+0x1e4>
    372c:	14 c0       	rjmp	.+40     	; 0x3756 <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372e:	69 a9       	ldd	r22, Y+49	; 0x31
    3730:	7a a9       	ldd	r23, Y+50	; 0x32
    3732:	8b a9       	ldd	r24, Y+51	; 0x33
    3734:	9c a9       	ldd	r25, Y+52	; 0x34
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	98 ab       	std	Y+48, r25	; 0x30
    3740:	8f a7       	std	Y+47, r24	; 0x2f
    3742:	8f a5       	ldd	r24, Y+47	; 0x2f
    3744:	98 a9       	ldd	r25, Y+48	; 0x30
    3746:	9c a7       	std	Y+44, r25	; 0x2c
    3748:	8b a7       	std	Y+43, r24	; 0x2b
    374a:	8b a5       	ldd	r24, Y+43	; 0x2b
    374c:	9c a5       	ldd	r25, Y+44	; 0x2c
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <LCD_voidInit+0x22c>
    3752:	9c a7       	std	Y+44, r25	; 0x2c
    3754:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/*clear display inst*/
	LCD_voidSendCommand(0b00000001);
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	a0 e0       	ldi	r26, 0x00	; 0
    3762:	b0 e4       	ldi	r27, 0x40	; 64
    3764:	8f a3       	std	Y+39, r24	; 0x27
    3766:	98 a7       	std	Y+40, r25	; 0x28
    3768:	a9 a7       	std	Y+41, r26	; 0x29
    376a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376c:	6f a1       	ldd	r22, Y+39	; 0x27
    376e:	78 a5       	ldd	r23, Y+40	; 0x28
    3770:	89 a5       	ldd	r24, Y+41	; 0x29
    3772:	9a a5       	ldd	r25, Y+42	; 0x2a
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	4a ef       	ldi	r20, 0xFA	; 250
    377a:	54 e4       	ldi	r21, 0x44	; 68
    377c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	8b a3       	std	Y+35, r24	; 0x23
    3786:	9c a3       	std	Y+36, r25	; 0x24
    3788:	ad a3       	std	Y+37, r26	; 0x25
    378a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    378c:	6b a1       	ldd	r22, Y+35	; 0x23
    378e:	7c a1       	ldd	r23, Y+36	; 0x24
    3790:	8d a1       	ldd	r24, Y+37	; 0x25
    3792:	9e a1       	ldd	r25, Y+38	; 0x26
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	40 e8       	ldi	r20, 0x80	; 128
    379a:	5f e3       	ldi	r21, 0x3F	; 63
    379c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a0:	88 23       	and	r24, r24
    37a2:	2c f4       	brge	.+10     	; 0x37ae <LCD_voidInit+0x28c>
		__ticks = 1;
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	9a a3       	std	Y+34, r25	; 0x22
    37aa:	89 a3       	std	Y+33, r24	; 0x21
    37ac:	3f c0       	rjmp	.+126    	; 0x382c <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    37ae:	6b a1       	ldd	r22, Y+35	; 0x23
    37b0:	7c a1       	ldd	r23, Y+36	; 0x24
    37b2:	8d a1       	ldd	r24, Y+37	; 0x25
    37b4:	9e a1       	ldd	r25, Y+38	; 0x26
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	3f ef       	ldi	r19, 0xFF	; 255
    37ba:	4f e7       	ldi	r20, 0x7F	; 127
    37bc:	57 e4       	ldi	r21, 0x47	; 71
    37be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c2:	18 16       	cp	r1, r24
    37c4:	4c f5       	brge	.+82     	; 0x3818 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c6:	6f a1       	ldd	r22, Y+39	; 0x27
    37c8:	78 a5       	ldd	r23, Y+40	; 0x28
    37ca:	89 a5       	ldd	r24, Y+41	; 0x29
    37cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e2       	ldi	r20, 0x20	; 32
    37d4:	51 e4       	ldi	r21, 0x41	; 65
    37d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	9a a3       	std	Y+34, r25	; 0x22
    37ec:	89 a3       	std	Y+33, r24	; 0x21
    37ee:	0f c0       	rjmp	.+30     	; 0x380e <LCD_voidInit+0x2ec>
    37f0:	88 ec       	ldi	r24, 0xC8	; 200
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	98 a3       	std	Y+32, r25	; 0x20
    37f6:	8f 8f       	std	Y+31, r24	; 0x1f
    37f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37fa:	98 a1       	ldd	r25, Y+32	; 0x20
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <LCD_voidInit+0x2da>
    3800:	98 a3       	std	Y+32, r25	; 0x20
    3802:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3804:	89 a1       	ldd	r24, Y+33	; 0x21
    3806:	9a a1       	ldd	r25, Y+34	; 0x22
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	9a a3       	std	Y+34, r25	; 0x22
    380c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380e:	89 a1       	ldd	r24, Y+33	; 0x21
    3810:	9a a1       	ldd	r25, Y+34	; 0x22
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	69 f7       	brne	.-38     	; 0x37f0 <LCD_voidInit+0x2ce>
    3816:	14 c0       	rjmp	.+40     	; 0x3840 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3818:	6b a1       	ldd	r22, Y+35	; 0x23
    381a:	7c a1       	ldd	r23, Y+36	; 0x24
    381c:	8d a1       	ldd	r24, Y+37	; 0x25
    381e:	9e a1       	ldd	r25, Y+38	; 0x26
    3820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	9a a3       	std	Y+34, r25	; 0x22
    382a:	89 a3       	std	Y+33, r24	; 0x21
    382c:	89 a1       	ldd	r24, Y+33	; 0x21
    382e:	9a a1       	ldd	r25, Y+34	; 0x22
    3830:	9e 8f       	std	Y+30, r25	; 0x1e
    3832:	8d 8f       	std	Y+29, r24	; 0x1d
    3834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3836:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <LCD_voidInit+0x316>
    383c:	9e 8f       	std	Y+30, r25	; 0x1e
    383e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*display*/
	LCD_voidSendCommand(0b00001100);
    3840:	8c e0       	ldi	r24, 0x0C	; 12
    3842:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	a0 e0       	ldi	r26, 0x00	; 0
    384c:	b0 e4       	ldi	r27, 0x40	; 64
    384e:	89 8f       	std	Y+25, r24	; 0x19
    3850:	9a 8f       	std	Y+26, r25	; 0x1a
    3852:	ab 8f       	std	Y+27, r26	; 0x1b
    3854:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3856:	69 8d       	ldd	r22, Y+25	; 0x19
    3858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    385a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    385c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	4a ef       	ldi	r20, 0xFA	; 250
    3864:	54 e4       	ldi	r21, 0x44	; 68
    3866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	8d 8b       	std	Y+21, r24	; 0x15
    3870:	9e 8b       	std	Y+22, r25	; 0x16
    3872:	af 8b       	std	Y+23, r26	; 0x17
    3874:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3876:	6d 89       	ldd	r22, Y+21	; 0x15
    3878:	7e 89       	ldd	r23, Y+22	; 0x16
    387a:	8f 89       	ldd	r24, Y+23	; 0x17
    387c:	98 8d       	ldd	r25, Y+24	; 0x18
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e8       	ldi	r20, 0x80	; 128
    3884:	5f e3       	ldi	r21, 0x3F	; 63
    3886:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    388a:	88 23       	and	r24, r24
    388c:	2c f4       	brge	.+10     	; 0x3898 <LCD_voidInit+0x376>
		__ticks = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	9c 8b       	std	Y+20, r25	; 0x14
    3894:	8b 8b       	std	Y+19, r24	; 0x13
    3896:	3f c0       	rjmp	.+126    	; 0x3916 <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    3898:	6d 89       	ldd	r22, Y+21	; 0x15
    389a:	7e 89       	ldd	r23, Y+22	; 0x16
    389c:	8f 89       	ldd	r24, Y+23	; 0x17
    389e:	98 8d       	ldd	r25, Y+24	; 0x18
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	3f ef       	ldi	r19, 0xFF	; 255
    38a4:	4f e7       	ldi	r20, 0x7F	; 127
    38a6:	57 e4       	ldi	r21, 0x47	; 71
    38a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ac:	18 16       	cp	r1, r24
    38ae:	4c f5       	brge	.+82     	; 0x3902 <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b0:	69 8d       	ldd	r22, Y+25	; 0x19
    38b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e2       	ldi	r20, 0x20	; 32
    38be:	51 e4       	ldi	r21, 0x41	; 65
    38c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	bc 01       	movw	r22, r24
    38ca:	cd 01       	movw	r24, r26
    38cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	9c 8b       	std	Y+20, r25	; 0x14
    38d6:	8b 8b       	std	Y+19, r24	; 0x13
    38d8:	0f c0       	rjmp	.+30     	; 0x38f8 <LCD_voidInit+0x3d6>
    38da:	88 ec       	ldi	r24, 0xC8	; 200
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9a 8b       	std	Y+18, r25	; 0x12
    38e0:	89 8b       	std	Y+17, r24	; 0x11
    38e2:	89 89       	ldd	r24, Y+17	; 0x11
    38e4:	9a 89       	ldd	r25, Y+18	; 0x12
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	f1 f7       	brne	.-4      	; 0x38e6 <LCD_voidInit+0x3c4>
    38ea:	9a 8b       	std	Y+18, r25	; 0x12
    38ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ee:	8b 89       	ldd	r24, Y+19	; 0x13
    38f0:	9c 89       	ldd	r25, Y+20	; 0x14
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	9c 8b       	std	Y+20, r25	; 0x14
    38f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f8:	8b 89       	ldd	r24, Y+19	; 0x13
    38fa:	9c 89       	ldd	r25, Y+20	; 0x14
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	69 f7       	brne	.-38     	; 0x38da <LCD_voidInit+0x3b8>
    3900:	14 c0       	rjmp	.+40     	; 0x392a <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3902:	6d 89       	ldd	r22, Y+21	; 0x15
    3904:	7e 89       	ldd	r23, Y+22	; 0x16
    3906:	8f 89       	ldd	r24, Y+23	; 0x17
    3908:	98 8d       	ldd	r25, Y+24	; 0x18
    390a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	9c 8b       	std	Y+20, r25	; 0x14
    3914:	8b 8b       	std	Y+19, r24	; 0x13
    3916:	8b 89       	ldd	r24, Y+19	; 0x13
    3918:	9c 89       	ldd	r25, Y+20	; 0x14
    391a:	98 8b       	std	Y+16, r25	; 0x10
    391c:	8f 87       	std	Y+15, r24	; 0x0f
    391e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3920:	98 89       	ldd	r25, Y+16	; 0x10
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	f1 f7       	brne	.-4      	; 0x3922 <LCD_voidInit+0x400>
    3926:	98 8b       	std	Y+16, r25	; 0x10
    3928:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/*entry mode*/
	LCD_voidSendCommand(0b00000110);
    392a:	86 e0       	ldi	r24, 0x06	; 6
    392c:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	a0 e0       	ldi	r26, 0x00	; 0
    3936:	b0 e4       	ldi	r27, 0x40	; 64
    3938:	8b 87       	std	Y+11, r24	; 0x0b
    393a:	9c 87       	std	Y+12, r25	; 0x0c
    393c:	ad 87       	std	Y+13, r26	; 0x0d
    393e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3940:	6b 85       	ldd	r22, Y+11	; 0x0b
    3942:	7c 85       	ldd	r23, Y+12	; 0x0c
    3944:	8d 85       	ldd	r24, Y+13	; 0x0d
    3946:	9e 85       	ldd	r25, Y+14	; 0x0e
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	4a ef       	ldi	r20, 0xFA	; 250
    394e:	54 e4       	ldi	r21, 0x44	; 68
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	8f 83       	std	Y+7, r24	; 0x07
    395a:	98 87       	std	Y+8, r25	; 0x08
    395c:	a9 87       	std	Y+9, r26	; 0x09
    395e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3960:	6f 81       	ldd	r22, Y+7	; 0x07
    3962:	78 85       	ldd	r23, Y+8	; 0x08
    3964:	89 85       	ldd	r24, Y+9	; 0x09
    3966:	9a 85       	ldd	r25, Y+10	; 0x0a
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e8       	ldi	r20, 0x80	; 128
    396e:	5f e3       	ldi	r21, 0x3F	; 63
    3970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3974:	88 23       	and	r24, r24
    3976:	2c f4       	brge	.+10     	; 0x3982 <LCD_voidInit+0x460>
		__ticks = 1;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	9e 83       	std	Y+6, r25	; 0x06
    397e:	8d 83       	std	Y+5, r24	; 0x05
    3980:	3f c0       	rjmp	.+126    	; 0x3a00 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    3982:	6f 81       	ldd	r22, Y+7	; 0x07
    3984:	78 85       	ldd	r23, Y+8	; 0x08
    3986:	89 85       	ldd	r24, Y+9	; 0x09
    3988:	9a 85       	ldd	r25, Y+10	; 0x0a
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	3f ef       	ldi	r19, 0xFF	; 255
    398e:	4f e7       	ldi	r20, 0x7F	; 127
    3990:	57 e4       	ldi	r21, 0x47	; 71
    3992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3996:	18 16       	cp	r1, r24
    3998:	4c f5       	brge	.+82     	; 0x39ec <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399a:	6b 85       	ldd	r22, Y+11	; 0x0b
    399c:	7c 85       	ldd	r23, Y+12	; 0x0c
    399e:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e2       	ldi	r20, 0x20	; 32
    39a8:	51 e4       	ldi	r21, 0x41	; 65
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9e 83       	std	Y+6, r25	; 0x06
    39c0:	8d 83       	std	Y+5, r24	; 0x05
    39c2:	0f c0       	rjmp	.+30     	; 0x39e2 <LCD_voidInit+0x4c0>
    39c4:	88 ec       	ldi	r24, 0xC8	; 200
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	9c 83       	std	Y+4, r25	; 0x04
    39ca:	8b 83       	std	Y+3, r24	; 0x03
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	9c 81       	ldd	r25, Y+4	; 0x04
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <LCD_voidInit+0x4ae>
    39d4:	9c 83       	std	Y+4, r25	; 0x04
    39d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d8:	8d 81       	ldd	r24, Y+5	; 0x05
    39da:	9e 81       	ldd	r25, Y+6	; 0x06
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	9e 83       	std	Y+6, r25	; 0x06
    39e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	9e 81       	ldd	r25, Y+6	; 0x06
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	69 f7       	brne	.-38     	; 0x39c4 <LCD_voidInit+0x4a2>
    39ea:	14 c0       	rjmp	.+40     	; 0x3a14 <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ec:	6f 81       	ldd	r22, Y+7	; 0x07
    39ee:	78 85       	ldd	r23, Y+8	; 0x08
    39f0:	89 85       	ldd	r24, Y+9	; 0x09
    39f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	9e 83       	std	Y+6, r25	; 0x06
    39fe:	8d 83       	std	Y+5, r24	; 0x05
    3a00:	8d 81       	ldd	r24, Y+5	; 0x05
    3a02:	9e 81       	ldd	r25, Y+6	; 0x06
    3a04:	9a 83       	std	Y+2, r25	; 0x02
    3a06:	89 83       	std	Y+1, r24	; 0x01
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
    3a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <LCD_voidInit+0x4ea>
    3a10:	9a 83       	std	Y+2, r25	; 0x02
    3a12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3a14:	ca 5b       	subi	r28, 0xBA	; 186
    3a16:	df 4f       	sbci	r29, 0xFF	; 255
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	1f 91       	pop	r17
    3a28:	0f 91       	pop	r16
    3a2a:	08 95       	ret

00003a2c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	2f 97       	sbiw	r28, 0x0f	; 15
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	f8 94       	cli
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	cd bf       	out	0x3d, r28	; 61
    3a40:	8f 87       	std	Y+15, r24	; 0x0f
	/*rs = 0 to send*/
	DIO_voidSetPinvalue(LCD_CR , RS_PIN , LOW);
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	60 e0       	ldi	r22, 0x00	; 0
    3a46:	40 e0       	ldi	r20, 0x00	; 0
    3a48:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>

	/*rw = 0*/
	DIO_voidSetPinvalue(LCD_CR , RW_PIN , LOW);
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	61 e0       	ldi	r22, 0x01	; 1
    3a50:	40 e0       	ldi	r20, 0x00	; 0
    3a52:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>

	/*send coomand*/
	DIO_voidSetPortvalue(LCD_DR , Copy_u8Command) ;
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a5a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_voidSetPortvalue>

	/*falling edge pin E */
	DIO_voidSetPinvalue(LCD_CR , E_PIN , HIGH);
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	62 e0       	ldi	r22, 0x02	; 2
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	a0 e0       	ldi	r26, 0x00	; 0
    3a6e:	b0 e4       	ldi	r27, 0x40	; 64
    3a70:	8b 87       	std	Y+11, r24	; 0x0b
    3a72:	9c 87       	std	Y+12, r25	; 0x0c
    3a74:	ad 87       	std	Y+13, r26	; 0x0d
    3a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4a ef       	ldi	r20, 0xFA	; 250
    3a86:	54 e4       	ldi	r21, 0x44	; 68
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	8f 83       	std	Y+7, r24	; 0x07
    3a92:	98 87       	std	Y+8, r25	; 0x08
    3a94:	a9 87       	std	Y+9, r26	; 0x09
    3a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a98:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9a:	78 85       	ldd	r23, Y+8	; 0x08
    3a9c:	89 85       	ldd	r24, Y+9	; 0x09
    3a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	2c f4       	brge	.+10     	; 0x3aba <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	3f c0       	rjmp	.+126    	; 0x3b38 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    3aba:	6f 81       	ldd	r22, Y+7	; 0x07
    3abc:	78 85       	ldd	r23, Y+8	; 0x08
    3abe:	89 85       	ldd	r24, Y+9	; 0x09
    3ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	57 e4       	ldi	r21, 0x47	; 71
    3aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ace:	18 16       	cp	r1, r24
    3ad0:	4c f5       	brge	.+82     	; 0x3b24 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e2       	ldi	r20, 0x20	; 32
    3ae0:	51 e4       	ldi	r21, 0x41	; 65
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	bc 01       	movw	r22, r24
    3aec:	cd 01       	movw	r24, r26
    3aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	9e 83       	std	Y+6, r25	; 0x06
    3af8:	8d 83       	std	Y+5, r24	; 0x05
    3afa:	0f c0       	rjmp	.+30     	; 0x3b1a <LCD_voidSendCommand+0xee>
    3afc:	88 ec       	ldi	r24, 0xC8	; 200
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9c 83       	std	Y+4, r25	; 0x04
    3b02:	8b 83       	std	Y+3, r24	; 0x03
    3b04:	8b 81       	ldd	r24, Y+3	; 0x03
    3b06:	9c 81       	ldd	r25, Y+4	; 0x04
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <LCD_voidSendCommand+0xdc>
    3b0c:	9c 83       	std	Y+4, r25	; 0x04
    3b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	9e 81       	ldd	r25, Y+6	; 0x06
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	69 f7       	brne	.-38     	; 0x3afc <LCD_voidSendCommand+0xd0>
    3b22:	14 c0       	rjmp	.+40     	; 0x3b4c <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b24:	6f 81       	ldd	r22, Y+7	; 0x07
    3b26:	78 85       	ldd	r23, Y+8	; 0x08
    3b28:	89 85       	ldd	r24, Y+9	; 0x09
    3b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	9e 83       	std	Y+6, r25	; 0x06
    3b36:	8d 83       	std	Y+5, r24	; 0x05
    3b38:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3c:	9a 83       	std	Y+2, r25	; 0x02
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	9a 81       	ldd	r25, Y+2	; 0x02
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <LCD_voidSendCommand+0x118>
    3b48:	9a 83       	std	Y+2, r25	; 0x02
    3b4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinvalue(LCD_CR , E_PIN , LOW);
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	62 e0       	ldi	r22, 0x02	; 2
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>

}
    3b56:	2f 96       	adiw	r28, 0x0f	; 15
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Data)
{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	2f 97       	sbiw	r28, 0x0f	; 15
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	8f 87       	std	Y+15, r24	; 0x0f
	/*rs = 1 to send*/
	DIO_voidSetPinvalue(LCD_CR , RS_PIN , HIGH);
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	60 e0       	ldi	r22, 0x00	; 0
    3b82:	41 e0       	ldi	r20, 0x01	; 1
    3b84:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>

	/*rw = 0*/
	DIO_voidSetPinvalue(LCD_CR , RW_PIN , LOW);
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	61 e0       	ldi	r22, 0x01	; 1
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>

	/*send coomand*/
	DIO_voidSetPortvalue(LCD_DR , Copy_u8Data) ;
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	6f 85       	ldd	r22, Y+15	; 0x0f
    3b96:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_voidSetPortvalue>

	/*falling edge pin E */
	DIO_voidSetPinvalue(LCD_CR , E_PIN , HIGH);
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	62 e0       	ldi	r22, 0x02	; 2
    3b9e:	41 e0       	ldi	r20, 0x01	; 1
    3ba0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	a0 e0       	ldi	r26, 0x00	; 0
    3baa:	b0 e4       	ldi	r27, 0x40	; 64
    3bac:	8b 87       	std	Y+11, r24	; 0x0b
    3bae:	9c 87       	std	Y+12, r25	; 0x0c
    3bb0:	ad 87       	std	Y+13, r26	; 0x0d
    3bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	4a ef       	ldi	r20, 0xFA	; 250
    3bc2:	54 e4       	ldi	r21, 0x44	; 68
    3bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	8f 83       	std	Y+7, r24	; 0x07
    3bce:	98 87       	std	Y+8, r25	; 0x08
    3bd0:	a9 87       	std	Y+9, r26	; 0x09
    3bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd6:	78 85       	ldd	r23, Y+8	; 0x08
    3bd8:	89 85       	ldd	r24, Y+9	; 0x09
    3bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e8       	ldi	r20, 0x80	; 128
    3be2:	5f e3       	ldi	r21, 0x3F	; 63
    3be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3be8:	88 23       	and	r24, r24
    3bea:	2c f4       	brge	.+10     	; 0x3bf6 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9e 83       	std	Y+6, r25	; 0x06
    3bf2:	8d 83       	std	Y+5, r24	; 0x05
    3bf4:	3f c0       	rjmp	.+126    	; 0x3c74 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    3bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf8:	78 85       	ldd	r23, Y+8	; 0x08
    3bfa:	89 85       	ldd	r24, Y+9	; 0x09
    3bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	3f ef       	ldi	r19, 0xFF	; 255
    3c02:	4f e7       	ldi	r20, 0x7F	; 127
    3c04:	57 e4       	ldi	r21, 0x47	; 71
    3c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c0a:	18 16       	cp	r1, r24
    3c0c:	4c f5       	brge	.+82     	; 0x3c60 <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e2       	ldi	r20, 0x20	; 32
    3c1c:	51 e4       	ldi	r21, 0x41	; 65
    3c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	bc 01       	movw	r22, r24
    3c28:	cd 01       	movw	r24, r26
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	0f c0       	rjmp	.+30     	; 0x3c56 <LCD_voidSendChar+0xee>
    3c38:	88 ec       	ldi	r24, 0xC8	; 200
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9c 83       	std	Y+4, r25	; 0x04
    3c3e:	8b 83       	std	Y+3, r24	; 0x03
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	9c 81       	ldd	r25, Y+4	; 0x04
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <LCD_voidSendChar+0xdc>
    3c48:	9c 83       	std	Y+4, r25	; 0x04
    3c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	9e 83       	std	Y+6, r25	; 0x06
    3c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
    3c58:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	69 f7       	brne	.-38     	; 0x3c38 <LCD_voidSendChar+0xd0>
    3c5e:	14 c0       	rjmp	.+40     	; 0x3c88 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c60:	6f 81       	ldd	r22, Y+7	; 0x07
    3c62:	78 85       	ldd	r23, Y+8	; 0x08
    3c64:	89 85       	ldd	r24, Y+9	; 0x09
    3c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	9e 83       	std	Y+6, r25	; 0x06
    3c72:	8d 83       	std	Y+5, r24	; 0x05
    3c74:	8d 81       	ldd	r24, Y+5	; 0x05
    3c76:	9e 81       	ldd	r25, Y+6	; 0x06
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	f1 f7       	brne	.-4      	; 0x3c80 <LCD_voidSendChar+0x118>
    3c84:	9a 83       	std	Y+2, r25	; 0x02
    3c86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinvalue(LCD_CR , E_PIN , LOW);
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	62 e0       	ldi	r22, 0x02	; 2
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>

}
    3c92:	2f 96       	adiw	r28, 0x0f	; 15
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <LCD_voidSendString>:

void LCD_voidSendString(const char* Copy_u8Arr)
{
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <LCD_voidSendString+0x6>
    3caa:	0f 92       	push	r0
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	9b 83       	std	Y+3, r25	; 0x03
    3cb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0 ;
    3cb4:	19 82       	std	Y+1, r1	; 0x01
    3cb6:	0e c0       	rjmp	.+28     	; 0x3cd4 <LCD_voidSendString+0x30>
	while(Copy_u8Arr[i]!='\0')
	{
		LCD_voidSendChar(Copy_u8Arr[i]);
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	28 2f       	mov	r18, r24
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	e2 0f       	add	r30, r18
    3cc6:	f3 1f       	adc	r31, r19
    3cc8:	80 81       	ld	r24, Z
    3cca:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_voidSendChar>
		i++;
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	8f 5f       	subi	r24, 0xFF	; 255
    3cd2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* Copy_u8Arr)
{
	u8 i=0 ;
	while(Copy_u8Arr[i]!='\0')
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	28 2f       	mov	r18, r24
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	8a 81       	ldd	r24, Y+2	; 0x02
    3cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cde:	fc 01       	movw	r30, r24
    3ce0:	e2 0f       	add	r30, r18
    3ce2:	f3 1f       	adc	r31, r19
    3ce4:	80 81       	ld	r24, Z
    3ce6:	88 23       	and	r24, r24
    3ce8:	39 f7       	brne	.-50     	; 0x3cb8 <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(Copy_u8Arr[i]);
		i++;
	}

}
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <LCD_voidSendNum>:

void LCD_voidSendNum(u32 Copy_u32Num)
{
    3cf6:	ef 92       	push	r14
    3cf8:	ff 92       	push	r15
    3cfa:	0f 93       	push	r16
    3cfc:	1f 93       	push	r17
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	28 97       	sbiw	r28, 0x08	; 8
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	de bf       	out	0x3e, r29	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	6d 83       	std	Y+5, r22	; 0x05
    3d14:	7e 83       	std	Y+6, r23	; 0x06
    3d16:	8f 83       	std	Y+7, r24	; 0x07
    3d18:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Number = 1 ;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	a0 e0       	ldi	r26, 0x00	; 0
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	89 83       	std	Y+1, r24	; 0x01
    3d24:	9a 83       	std	Y+2, r25	; 0x02
    3d26:	ab 83       	std	Y+3, r26	; 0x03
    3d28:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u32Num==0)
    3d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2e:	af 81       	ldd	r26, Y+7	; 0x07
    3d30:	b8 85       	ldd	r27, Y+8	; 0x08
    3d32:	00 97       	sbiw	r24, 0x00	; 0
    3d34:	a1 05       	cpc	r26, r1
    3d36:	b1 05       	cpc	r27, r1
    3d38:	d1 f5       	brne	.+116    	; 0x3dae <LCD_voidSendNum+0xb8>
	{
		LCD_voidSendChar(0+'0');
    3d3a:	80 e3       	ldi	r24, 0x30	; 48
    3d3c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_voidSendChar>
    3d40:	6b c0       	rjmp	.+214    	; 0x3e18 <LCD_voidSendNum+0x122>
	}
	else
	{
		while(Copy_u32Num!=0)
		{
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	9a 81       	ldd	r25, Y+2	; 0x02
    3d46:	ab 81       	ldd	r26, Y+3	; 0x03
    3d48:	bc 81       	ldd	r27, Y+4	; 0x04
    3d4a:	2a e0       	ldi	r18, 0x0A	; 10
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e0       	ldi	r20, 0x00	; 0
    3d50:	50 e0       	ldi	r21, 0x00	; 0
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 c7 22 	call	0x458e	; 0x458e <__mulsi3>
    3d5a:	7b 01       	movw	r14, r22
    3d5c:	8c 01       	movw	r16, r24
    3d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d60:	9e 81       	ldd	r25, Y+6	; 0x06
    3d62:	af 81       	ldd	r26, Y+7	; 0x07
    3d64:	b8 85       	ldd	r27, Y+8	; 0x08
    3d66:	2a e0       	ldi	r18, 0x0A	; 10
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	40 e0       	ldi	r20, 0x00	; 0
    3d6c:	50 e0       	ldi	r21, 0x00	; 0
    3d6e:	bc 01       	movw	r22, r24
    3d70:	cd 01       	movw	r24, r26
    3d72:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__udivmodsi4>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	8e 0d       	add	r24, r14
    3d7c:	9f 1d       	adc	r25, r15
    3d7e:	a0 1f       	adc	r26, r16
    3d80:	b1 1f       	adc	r27, r17
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	ab 83       	std	Y+3, r26	; 0x03
    3d88:	bc 83       	std	Y+4, r27	; 0x04
			Copy_u32Num /= 10 ;
    3d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8e:	af 81       	ldd	r26, Y+7	; 0x07
    3d90:	b8 85       	ldd	r27, Y+8	; 0x08
    3d92:	2a e0       	ldi	r18, 0x0A	; 10
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__udivmodsi4>
    3da2:	da 01       	movw	r26, r20
    3da4:	c9 01       	movw	r24, r18
    3da6:	8d 83       	std	Y+5, r24	; 0x05
    3da8:	9e 83       	std	Y+6, r25	; 0x06
    3daa:	af 83       	std	Y+7, r26	; 0x07
    3dac:	b8 87       	std	Y+8, r27	; 0x08
	{
		LCD_voidSendChar(0+'0');
	}
	else
	{
		while(Copy_u32Num!=0)
    3dae:	8d 81       	ldd	r24, Y+5	; 0x05
    3db0:	9e 81       	ldd	r25, Y+6	; 0x06
    3db2:	af 81       	ldd	r26, Y+7	; 0x07
    3db4:	b8 85       	ldd	r27, Y+8	; 0x08
    3db6:	00 97       	sbiw	r24, 0x00	; 0
    3db8:	a1 05       	cpc	r26, r1
    3dba:	b1 05       	cpc	r27, r1
    3dbc:	11 f6       	brne	.-124    	; 0x3d42 <LCD_voidSendNum+0x4c>
    3dbe:	23 c0       	rjmp	.+70     	; 0x3e06 <LCD_voidSendNum+0x110>
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
			Copy_u32Num /= 10 ;
		}
		while(Local_u32Number != 1)
		{
			LCD_voidSendChar('0'+(Local_u32Number % 10));
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc4:	ab 81       	ldd	r26, Y+3	; 0x03
    3dc6:	bc 81       	ldd	r27, Y+4	; 0x04
    3dc8:	2a e0       	ldi	r18, 0x0A	; 10
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	cd 01       	movw	r24, r26
    3dd4:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__udivmodsi4>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	80 5d       	subi	r24, 0xD0	; 208
    3dde:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_voidSendChar>
			Local_u32Number = Local_u32Number / 10 ;
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	9a 81       	ldd	r25, Y+2	; 0x02
    3de6:	ab 81       	ldd	r26, Y+3	; 0x03
    3de8:	bc 81       	ldd	r27, Y+4	; 0x04
    3dea:	2a e0       	ldi	r18, 0x0A	; 10
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__udivmodsi4>
    3dfa:	da 01       	movw	r26, r20
    3dfc:	c9 01       	movw	r24, r18
    3dfe:	89 83       	std	Y+1, r24	; 0x01
    3e00:	9a 83       	std	Y+2, r25	; 0x02
    3e02:	ab 83       	std	Y+3, r26	; 0x03
    3e04:	bc 83       	std	Y+4, r27	; 0x04
		while(Copy_u32Num!=0)
		{
			Local_u32Number = (Local_u32Number*10) + (Copy_u32Num %10) ;
			Copy_u32Num /= 10 ;
		}
		while(Local_u32Number != 1)
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0a:	ab 81       	ldd	r26, Y+3	; 0x03
    3e0c:	bc 81       	ldd	r27, Y+4	; 0x04
    3e0e:	81 30       	cpi	r24, 0x01	; 1
    3e10:	91 05       	cpc	r25, r1
    3e12:	a1 05       	cpc	r26, r1
    3e14:	b1 05       	cpc	r27, r1
    3e16:	a1 f6       	brne	.-88     	; 0x3dc0 <LCD_voidSendNum+0xca>
		{
			LCD_voidSendChar('0'+(Local_u32Number % 10));
			Local_u32Number = Local_u32Number / 10 ;
		}
	}
}
    3e18:	28 96       	adiw	r28, 0x08	; 8
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	f8 94       	cli
    3e1e:	de bf       	out	0x3e, r29	; 62
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	cd bf       	out	0x3d, r28	; 61
    3e24:	cf 91       	pop	r28
    3e26:	df 91       	pop	r29
    3e28:	1f 91       	pop	r17
    3e2a:	0f 91       	pop	r16
    3e2c:	ff 90       	pop	r15
    3e2e:	ef 90       	pop	r14
    3e30:	08 95       	ret

00003e32 <LCD_voidGoToXY>:
void LCD_voidGoToXY(u8 Copy_u8Line , u8 Copy_u8Position)
{
    3e32:	df 93       	push	r29
    3e34:	cf 93       	push	r28
    3e36:	00 d0       	rcall	.+0      	; 0x3e38 <LCD_voidGoToXY+0x6>
    3e38:	00 d0       	rcall	.+0      	; 0x3e3a <LCD_voidGoToXY+0x8>
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
    3e3e:	89 83       	std	Y+1, r24	; 0x01
    3e40:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Line)
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	28 2f       	mov	r18, r24
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	3c 83       	std	Y+4, r19	; 0x04
    3e4a:	2b 83       	std	Y+3, r18	; 0x03
    3e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e50:	00 97       	sbiw	r24, 0x00	; 0
    3e52:	31 f0       	breq	.+12     	; 0x3e60 <LCD_voidGoToXY+0x2e>
    3e54:	2b 81       	ldd	r18, Y+3	; 0x03
    3e56:	3c 81       	ldd	r19, Y+4	; 0x04
    3e58:	21 30       	cpi	r18, 0x01	; 1
    3e5a:	31 05       	cpc	r19, r1
    3e5c:	31 f0       	breq	.+12     	; 0x3e6a <LCD_voidGoToXY+0x38>
    3e5e:	09 c0       	rjmp	.+18     	; 0x3e72 <LCD_voidGoToXY+0x40>
	{
		case 0 : LCD_voidSendCommand(0x80+Copy_u8Position); break ;
    3e60:	8a 81       	ldd	r24, Y+2	; 0x02
    3e62:	80 58       	subi	r24, 0x80	; 128
    3e64:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>
    3e68:	04 c0       	rjmp	.+8      	; 0x3e72 <LCD_voidGoToXY+0x40>
		case 1 : LCD_voidSendCommand(0xC0+Copy_u8Position); break ;
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	80 54       	subi	r24, 0x40	; 64
    3e6e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>
		default: break;
	}
}
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <LCD_voidCLR>:
void LCD_voidCLR(void)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
	/*clear the LCD*/
	LCD_voidSendCommand(0b00000001);
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>
}
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	08 95       	ret

00003e94 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber ,u8 Copy_u8xPos , u8 Copy_u8YPos )
{
    3e94:	df 93       	push	r29
    3e96:	cf 93       	push	r28
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
    3e9c:	27 97       	sbiw	r28, 0x07	; 7
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
    3eac:	6d 83       	std	Y+5, r22	; 0x05
    3eae:	4e 83       	std	Y+6, r20	; 0x06
    3eb0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0 , Local_u8Iterator ;
    3eb2:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate the CGRAM Address*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8 ;
    3eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb6:	88 2f       	mov	r24, r24
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	88 0f       	add	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	88 0f       	add	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	8a 83       	std	Y+2, r24	; 0x02

	/*sending CGRam address and  setting bit 6 */
	LCD_voidSendCommand(Local_u8CGRAMAddress + 64) ;
    3ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eca:	80 5c       	subi	r24, 0xC0	; 192
    3ecc:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_voidSendCommand>

	/*wrte the pattern into CG ram*/
	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    3ed0:	19 82       	std	Y+1, r1	; 0x01
    3ed2:	0e c0       	rjmp	.+28     	; 0x3ef0 <LCD_voidWriteSpecialCharacter+0x5c>
	{
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8Iterator]) ;
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	28 2f       	mov	r18, r24
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	8b 81       	ldd	r24, Y+3	; 0x03
    3edc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ede:	fc 01       	movw	r30, r24
    3ee0:	e2 0f       	add	r30, r18
    3ee2:	f3 1f       	adc	r31, r19
    3ee4:	80 81       	ld	r24, Z
    3ee6:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_voidSendChar>

	/*sending CGRam address and  setting bit 6 */
	LCD_voidSendCommand(Local_u8CGRAMAddress + 64) ;

	/*wrte the pattern into CG ram*/
	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	8f 5f       	subi	r24, 0xFF	; 255
    3eee:	89 83       	std	Y+1, r24	; 0x01
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	88 30       	cpi	r24, 0x08	; 8
    3ef4:	78 f3       	brcs	.-34     	; 0x3ed4 <LCD_voidWriteSpecialCharacter+0x40>
	{
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8Iterator]) ;
	}

	/*Go bach to the DDRAM to display the pattern*/
	LCD_voidGoToXY(Copy_u8xPos , Copy_u8YPos) ;
    3ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    3efa:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <LCD_voidGoToXY>

	/*Display the pattern writen in CGRAm*/
	LCD_voidSendChar(Copy_u8PatternNumber) ;
    3efe:	8d 81       	ldd	r24, Y+5	; 0x05
    3f00:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_voidSendChar>

}
    3f04:	27 96       	adiw	r28, 0x07	; 7
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	cf 91       	pop	r28
    3f12:	df 91       	pop	r29
    3f14:	08 95       	ret

00003f16 <KPD_voidInit>:
#include"KPD_interface.h"



void KPD_voidInit(void)
{
    3f16:	df 93       	push	r29
    3f18:	cf 93       	push	r28
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
	/*rows input*/
	DIO_voidSetPinDirection(KPD_PORT , KPD_R1 , INPUT);
    3f1e:	83 e0       	ldi	r24, 0x03	; 3
    3f20:	60 e0       	ldi	r22, 0x00	; 0
    3f22:	40 e0       	ldi	r20, 0x00	; 0
    3f24:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R2 , INPUT);
    3f28:	83 e0       	ldi	r24, 0x03	; 3
    3f2a:	61 e0       	ldi	r22, 0x01	; 1
    3f2c:	40 e0       	ldi	r20, 0x00	; 0
    3f2e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R3 , INPUT);
    3f32:	83 e0       	ldi	r24, 0x03	; 3
    3f34:	62 e0       	ldi	r22, 0x02	; 2
    3f36:	40 e0       	ldi	r20, 0x00	; 0
    3f38:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_R4 , INPUT);
    3f3c:	83 e0       	ldi	r24, 0x03	; 3
    3f3e:	63 e0       	ldi	r22, 0x03	; 3
    3f40:	40 e0       	ldi	r20, 0x00	; 0
    3f42:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>


	/*columns pins*/
	DIO_voidSetPinDirection(KPD_PORT , KPD_C1 , OUTPUT);
    3f46:	83 e0       	ldi	r24, 0x03	; 3
    3f48:	64 e0       	ldi	r22, 0x04	; 4
    3f4a:	41 e0       	ldi	r20, 0x01	; 1
    3f4c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C2 , OUTPUT);
    3f50:	83 e0       	ldi	r24, 0x03	; 3
    3f52:	65 e0       	ldi	r22, 0x05	; 5
    3f54:	41 e0       	ldi	r20, 0x01	; 1
    3f56:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C3 , OUTPUT);
    3f5a:	83 e0       	ldi	r24, 0x03	; 3
    3f5c:	66 e0       	ldi	r22, 0x06	; 6
    3f5e:	41 e0       	ldi	r20, 0x01	; 1
    3f60:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , KPD_C4 , OUTPUT);
    3f64:	83 e0       	ldi	r24, 0x03	; 3
    3f66:	67 e0       	ldi	r22, 0x07	; 7
    3f68:	41 e0       	ldi	r20, 0x01	; 1
    3f6a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>


	/*columns deactive , rows pullup */
	DIO_voidSetPortvalue(KPD_PORT , DIO_u8PORT_HIGH);
    3f6e:	83 e0       	ldi	r24, 0x03	; 3
    3f70:	6f ef       	ldi	r22, 0xFF	; 255
    3f72:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_voidSetPortvalue>

}
    3f76:	cf 91       	pop	r28
    3f78:	df 91       	pop	r29
    3f7a:	08 95       	ret

00003f7c <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    3f7c:	df 93       	push	r29
    3f7e:	cf 93       	push	r28
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	6b 97       	sbiw	r28, 0x1b	; 27
    3f86:	0f b6       	in	r0, 0x3f	; 63
    3f88:	f8 94       	cli
    3f8a:	de bf       	out	0x3e, r29	; 62
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iterator1 , Local_u8Iterator2 ;
	u8 Local_Au8ColsArr[4]={KPD_C1,KPD_C2,KPD_C3,KPD_C4};
    3f90:	84 e0       	ldi	r24, 0x04	; 4
    3f92:	8c 8b       	std	Y+20, r24	; 0x14
    3f94:	85 e0       	ldi	r24, 0x05	; 5
    3f96:	8d 8b       	std	Y+21, r24	; 0x15
    3f98:	86 e0       	ldi	r24, 0x06	; 6
    3f9a:	8e 8b       	std	Y+22, r24	; 0x16
    3f9c:	87 e0       	ldi	r24, 0x07	; 7
    3f9e:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_Au8RowsArr[4]={KPD_R1,KPD_R2,KPD_R3,KPD_R4};
    3fa0:	18 8e       	std	Y+24, r1	; 0x18
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	89 8f       	std	Y+25, r24	; 0x19
    3fa6:	82 e0       	ldi	r24, 0x02	; 2
    3fa8:	8a 8f       	std	Y+26, r24	; 0x1a
    3faa:	83 e0       	ldi	r24, 0x03	; 3
    3fac:	8b 8f       	std	Y+27, r24	; 0x1b
	u8 Local_PinValue ;
	u8 Local_PressedKey = 0xff ;
    3fae:	8f ef       	ldi	r24, 0xFF	; 255
    3fb0:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Flag =0 ;
    3fb2:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
    3fb4:	1b 8a       	std	Y+19, r1	; 0x13
    3fb6:	e3 c0       	rjmp	.+454    	; 0x417e <KPD_u8GetPressedKey+0x202>
	{
		//Activate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , LOW);
    3fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3fba:	28 2f       	mov	r18, r24
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	44 96       	adiw	r24, 0x14	; 20
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	e2 0f       	add	r30, r18
    3fc6:	f3 1f       	adc	r31, r19
    3fc8:	90 81       	ld	r25, Z
    3fca:	83 e0       	ldi	r24, 0x03	; 3
    3fcc:	69 2f       	mov	r22, r25
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>

		for(Local_u8Iterator2=0;Local_u8Iterator2<4;Local_u8Iterator2 ++)
    3fd4:	1a 8a       	std	Y+18, r1	; 0x12
    3fd6:	bb c0       	rjmp	.+374    	; 0x414e <KPD_u8GetPressedKey+0x1d2>
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	a0 ea       	ldi	r26, 0xA0	; 160
    3fde:	b0 e4       	ldi	r27, 0x40	; 64
    3fe0:	8b 87       	std	Y+11, r24	; 0x0b
    3fe2:	9c 87       	std	Y+12, r25	; 0x0c
    3fe4:	ad 87       	std	Y+13, r26	; 0x0d
    3fe6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	4a ef       	ldi	r20, 0xFA	; 250
    3ff6:	54 e4       	ldi	r21, 0x44	; 68
    3ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	8f 83       	std	Y+7, r24	; 0x07
    4002:	98 87       	std	Y+8, r25	; 0x08
    4004:	a9 87       	std	Y+9, r26	; 0x09
    4006:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4008:	6f 81       	ldd	r22, Y+7	; 0x07
    400a:	78 85       	ldd	r23, Y+8	; 0x08
    400c:	89 85       	ldd	r24, Y+9	; 0x09
    400e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e8       	ldi	r20, 0x80	; 128
    4016:	5f e3       	ldi	r21, 0x3F	; 63
    4018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    401c:	88 23       	and	r24, r24
    401e:	2c f4       	brge	.+10     	; 0x402a <KPD_u8GetPressedKey+0xae>
		__ticks = 1;
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	9e 83       	std	Y+6, r25	; 0x06
    4026:	8d 83       	std	Y+5, r24	; 0x05
    4028:	3f c0       	rjmp	.+126    	; 0x40a8 <KPD_u8GetPressedKey+0x12c>
	else if (__tmp > 65535)
    402a:	6f 81       	ldd	r22, Y+7	; 0x07
    402c:	78 85       	ldd	r23, Y+8	; 0x08
    402e:	89 85       	ldd	r24, Y+9	; 0x09
    4030:	9a 85       	ldd	r25, Y+10	; 0x0a
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	3f ef       	ldi	r19, 0xFF	; 255
    4036:	4f e7       	ldi	r20, 0x7F	; 127
    4038:	57 e4       	ldi	r21, 0x47	; 71
    403a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    403e:	18 16       	cp	r1, r24
    4040:	4c f5       	brge	.+82     	; 0x4094 <KPD_u8GetPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4042:	6b 85       	ldd	r22, Y+11	; 0x0b
    4044:	7c 85       	ldd	r23, Y+12	; 0x0c
    4046:	8d 85       	ldd	r24, Y+13	; 0x0d
    4048:	9e 85       	ldd	r25, Y+14	; 0x0e
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e2       	ldi	r20, 0x20	; 32
    4050:	51 e4       	ldi	r21, 0x41	; 65
    4052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	bc 01       	movw	r22, r24
    405c:	cd 01       	movw	r24, r26
    405e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	9e 83       	std	Y+6, r25	; 0x06
    4068:	8d 83       	std	Y+5, r24	; 0x05
    406a:	0f c0       	rjmp	.+30     	; 0x408a <KPD_u8GetPressedKey+0x10e>
    406c:	88 ec       	ldi	r24, 0xC8	; 200
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	9c 83       	std	Y+4, r25	; 0x04
    4072:	8b 83       	std	Y+3, r24	; 0x03
    4074:	8b 81       	ldd	r24, Y+3	; 0x03
    4076:	9c 81       	ldd	r25, Y+4	; 0x04
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <KPD_u8GetPressedKey+0xfc>
    407c:	9c 83       	std	Y+4, r25	; 0x04
    407e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4080:	8d 81       	ldd	r24, Y+5	; 0x05
    4082:	9e 81       	ldd	r25, Y+6	; 0x06
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	9e 83       	std	Y+6, r25	; 0x06
    4088:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408a:	8d 81       	ldd	r24, Y+5	; 0x05
    408c:	9e 81       	ldd	r25, Y+6	; 0x06
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	69 f7       	brne	.-38     	; 0x406c <KPD_u8GetPressedKey+0xf0>
    4092:	14 c0       	rjmp	.+40     	; 0x40bc <KPD_u8GetPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4094:	6f 81       	ldd	r22, Y+7	; 0x07
    4096:	78 85       	ldd	r23, Y+8	; 0x08
    4098:	89 85       	ldd	r24, Y+9	; 0x09
    409a:	9a 85       	ldd	r25, Y+10	; 0x0a
    409c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	9e 83       	std	Y+6, r25	; 0x06
    40a6:	8d 83       	std	Y+5, r24	; 0x05
    40a8:	8d 81       	ldd	r24, Y+5	; 0x05
    40aa:	9e 81       	ldd	r25, Y+6	; 0x06
    40ac:	9a 83       	std	Y+2, r25	; 0x02
    40ae:	89 83       	std	Y+1, r24	; 0x01
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	9a 81       	ldd	r25, Y+2	; 0x02
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <KPD_u8GetPressedKey+0x138>
    40b8:	9a 83       	std	Y+2, r25	; 0x02
    40ba:	89 83       	std	Y+1, r24	; 0x01
		{
			//debouncing
			_delay_ms(5);

			Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    40bc:	8a 89       	ldd	r24, Y+18	; 0x12
    40be:	28 2f       	mov	r18, r24
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	ce 01       	movw	r24, r28
    40c4:	48 96       	adiw	r24, 0x18	; 24
    40c6:	fc 01       	movw	r30, r24
    40c8:	e2 0f       	add	r30, r18
    40ca:	f3 1f       	adc	r31, r19
    40cc:	90 81       	ld	r25, Z
    40ce:	83 e0       	ldi	r24, 0x03	; 3
    40d0:	69 2f       	mov	r22, r25
    40d2:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <DIO_u8GetPinvalue>
    40d6:	89 8b       	std	Y+17, r24	; 0x11

			if(Local_PinValue==0)
    40d8:	89 89       	ldd	r24, Y+17	; 0x11
    40da:	88 23       	and	r24, r24
    40dc:	a9 f5       	brne	.+106    	; 0x4148 <KPD_u8GetPressedKey+0x1cc>
			{
				Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    40de:	8a 89       	ldd	r24, Y+18	; 0x12
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	ce 01       	movw	r24, r28
    40e6:	48 96       	adiw	r24, 0x18	; 24
    40e8:	fc 01       	movw	r30, r24
    40ea:	e2 0f       	add	r30, r18
    40ec:	f3 1f       	adc	r31, r19
    40ee:	90 81       	ld	r25, Z
    40f0:	83 e0       	ldi	r24, 0x03	; 3
    40f2:	69 2f       	mov	r22, r25
    40f4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <DIO_u8GetPinvalue>
    40f8:	89 8b       	std	Y+17, r24	; 0x11
    40fa:	0e c0       	rjmp	.+28     	; 0x4118 <KPD_u8GetPressedKey+0x19c>

				while(Local_PinValue==0)
				{
					Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
    40fc:	8a 89       	ldd	r24, Y+18	; 0x12
    40fe:	28 2f       	mov	r18, r24
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	ce 01       	movw	r24, r28
    4104:	48 96       	adiw	r24, 0x18	; 24
    4106:	fc 01       	movw	r30, r24
    4108:	e2 0f       	add	r30, r18
    410a:	f3 1f       	adc	r31, r19
    410c:	90 81       	ld	r25, Z
    410e:	83 e0       	ldi	r24, 0x03	; 3
    4110:	69 2f       	mov	r22, r25
    4112:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <DIO_u8GetPinvalue>
    4116:	89 8b       	std	Y+17, r24	; 0x11

			if(Local_PinValue==0)
			{
				Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);

				while(Local_PinValue==0)
    4118:	89 89       	ldd	r24, Y+17	; 0x11
    411a:	88 23       	and	r24, r24
    411c:	79 f3       	breq	.-34     	; 0x40fc <KPD_u8GetPressedKey+0x180>
					Local_PinValue = DIO_u8GetPinvalue(KPD_PORT,Local_Au8RowsArr[Local_u8Iterator2]);
				}
				//Safety debouncing


				Local_PressedKey = KeyPadArr[Local_u8Iterator2][Local_u8Iterator1];
    411e:	8a 89       	ldd	r24, Y+18	; 0x12
    4120:	48 2f       	mov	r20, r24
    4122:	50 e0       	ldi	r21, 0x00	; 0
    4124:	8b 89       	ldd	r24, Y+19	; 0x13
    4126:	28 2f       	mov	r18, r24
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	ca 01       	movw	r24, r20
    412c:	88 0f       	add	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	82 0f       	add	r24, r18
    4136:	93 1f       	adc	r25, r19
    4138:	fc 01       	movw	r30, r24
    413a:	ee 58       	subi	r30, 0x8E	; 142
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	80 81       	ld	r24, Z
    4140:	88 8b       	std	Y+16, r24	; 0x10
				Local_u8Flag = 1 ;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	8f 87       	std	Y+15, r24	; 0x0f
    4146:	07 c0       	rjmp	.+14     	; 0x4156 <KPD_u8GetPressedKey+0x1da>
	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
	{
		//Activate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , LOW);

		for(Local_u8Iterator2=0;Local_u8Iterator2<4;Local_u8Iterator2 ++)
    4148:	8a 89       	ldd	r24, Y+18	; 0x12
    414a:	8f 5f       	subi	r24, 0xFF	; 255
    414c:	8a 8b       	std	Y+18, r24	; 0x12
    414e:	8a 89       	ldd	r24, Y+18	; 0x12
    4150:	84 30       	cpi	r24, 0x04	; 4
    4152:	08 f4       	brcc	.+2      	; 0x4156 <KPD_u8GetPressedKey+0x1da>
    4154:	41 cf       	rjmp	.-382    	; 0x3fd8 <KPD_u8GetPressedKey+0x5c>
				break ;
			}

		}
		//deactivate colmn
		DIO_voidSetPinvalue(KPD_PORT , Local_Au8ColsArr[Local_u8Iterator1] , HIGH);
    4156:	8b 89       	ldd	r24, Y+19	; 0x13
    4158:	28 2f       	mov	r18, r24
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	ce 01       	movw	r24, r28
    415e:	44 96       	adiw	r24, 0x14	; 20
    4160:	fc 01       	movw	r30, r24
    4162:	e2 0f       	add	r30, r18
    4164:	f3 1f       	adc	r31, r19
    4166:	90 81       	ld	r25, Z
    4168:	83 e0       	ldi	r24, 0x03	; 3
    416a:	69 2f       	mov	r22, r25
    416c:	41 e0       	ldi	r20, 0x01	; 1
    416e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
		if(Local_u8Flag==1)
    4172:	8f 85       	ldd	r24, Y+15	; 0x0f
    4174:	81 30       	cpi	r24, 0x01	; 1
    4176:	39 f0       	breq	.+14     	; 0x4186 <KPD_u8GetPressedKey+0x20a>
	u8 Local_Au8RowsArr[4]={KPD_R1,KPD_R2,KPD_R3,KPD_R4};
	u8 Local_PinValue ;
	u8 Local_PressedKey = 0xff ;
	u8 Local_u8Flag =0 ;

	for(Local_u8Iterator1=0 ; Local_u8Iterator1<4 ;Local_u8Iterator1++)
    4178:	8b 89       	ldd	r24, Y+19	; 0x13
    417a:	8f 5f       	subi	r24, 0xFF	; 255
    417c:	8b 8b       	std	Y+19, r24	; 0x13
    417e:	8b 89       	ldd	r24, Y+19	; 0x13
    4180:	84 30       	cpi	r24, 0x04	; 4
    4182:	08 f4       	brcc	.+2      	; 0x4186 <KPD_u8GetPressedKey+0x20a>
    4184:	19 cf       	rjmp	.-462    	; 0x3fb8 <KPD_u8GetPressedKey+0x3c>
		if(Local_u8Flag==1)
		{
			break ;
		}
	}
	return Local_PressedKey ;
    4186:	88 89       	ldd	r24, Y+16	; 0x10
}
    4188:	6b 96       	adiw	r28, 0x1b	; 27
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	08 95       	ret

0000419a <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    419a:	df 93       	push	r29
    419c:	cf 93       	push	r28
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
    41a2:	62 97       	sbiw	r28, 0x12	; 18
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	f8 94       	cli
    41a8:	de bf       	out	0x3e, r29	; 62
    41aa:	0f be       	out	0x3f, r0	; 63
    41ac:	cd bf       	out	0x3d, r28	; 61
    41ae:	99 8b       	std	Y+17, r25	; 0x11
    41b0:	88 8b       	std	Y+16, r24	; 0x10
    41b2:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    41b4:	88 89       	ldd	r24, Y+16	; 0x10
    41b6:	99 89       	ldd	r25, Y+17	; 0x11
    41b8:	89 2f       	mov	r24, r25
    41ba:	99 27       	eor	r25, r25
    41bc:	80 65       	ori	r24, 0x50	; 80
    41be:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    41c0:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    41c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c6:	0e 94 07 07 	call	0xe0e	; 0xe0e <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    41ca:	88 89       	ldd	r24, Y+16	; 0x10
    41cc:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    41d0:	8a 89       	ldd	r24, Y+18	; 0x12
    41d2:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    41d6:	0e 94 cb 07 	call	0xf96	; 0xf96 <TWI_voidSendStopCondition>
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	a0 e2       	ldi	r26, 0x20	; 32
    41e0:	b1 e4       	ldi	r27, 0x41	; 65
    41e2:	8b 87       	std	Y+11, r24	; 0x0b
    41e4:	9c 87       	std	Y+12, r25	; 0x0c
    41e6:	ad 87       	std	Y+13, r26	; 0x0d
    41e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	4a ef       	ldi	r20, 0xFA	; 250
    41f8:	54 e4       	ldi	r21, 0x44	; 68
    41fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	8f 83       	std	Y+7, r24	; 0x07
    4204:	98 87       	std	Y+8, r25	; 0x08
    4206:	a9 87       	std	Y+9, r26	; 0x09
    4208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    420a:	6f 81       	ldd	r22, Y+7	; 0x07
    420c:	78 85       	ldd	r23, Y+8	; 0x08
    420e:	89 85       	ldd	r24, Y+9	; 0x09
    4210:	9a 85       	ldd	r25, Y+10	; 0x0a
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e8       	ldi	r20, 0x80	; 128
    4218:	5f e3       	ldi	r21, 0x3F	; 63
    421a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    421e:	88 23       	and	r24, r24
    4220:	2c f4       	brge	.+10     	; 0x422c <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	9e 83       	std	Y+6, r25	; 0x06
    4228:	8d 83       	std	Y+5, r24	; 0x05
    422a:	3f c0       	rjmp	.+126    	; 0x42aa <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    422c:	6f 81       	ldd	r22, Y+7	; 0x07
    422e:	78 85       	ldd	r23, Y+8	; 0x08
    4230:	89 85       	ldd	r24, Y+9	; 0x09
    4232:	9a 85       	ldd	r25, Y+10	; 0x0a
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	3f ef       	ldi	r19, 0xFF	; 255
    4238:	4f e7       	ldi	r20, 0x7F	; 127
    423a:	57 e4       	ldi	r21, 0x47	; 71
    423c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4240:	18 16       	cp	r1, r24
    4242:	4c f5       	brge	.+82     	; 0x4296 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4244:	6b 85       	ldd	r22, Y+11	; 0x0b
    4246:	7c 85       	ldd	r23, Y+12	; 0x0c
    4248:	8d 85       	ldd	r24, Y+13	; 0x0d
    424a:	9e 85       	ldd	r25, Y+14	; 0x0e
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	40 e2       	ldi	r20, 0x20	; 32
    4252:	51 e4       	ldi	r21, 0x41	; 65
    4254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	bc 01       	movw	r22, r24
    425e:	cd 01       	movw	r24, r26
    4260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	9e 83       	std	Y+6, r25	; 0x06
    426a:	8d 83       	std	Y+5, r24	; 0x05
    426c:	0f c0       	rjmp	.+30     	; 0x428c <EEPROM_voidSendDataByte+0xf2>
    426e:	88 ec       	ldi	r24, 0xC8	; 200
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	9c 83       	std	Y+4, r25	; 0x04
    4274:	8b 83       	std	Y+3, r24	; 0x03
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	9c 81       	ldd	r25, Y+4	; 0x04
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	f1 f7       	brne	.-4      	; 0x427a <EEPROM_voidSendDataByte+0xe0>
    427e:	9c 83       	std	Y+4, r25	; 0x04
    4280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4282:	8d 81       	ldd	r24, Y+5	; 0x05
    4284:	9e 81       	ldd	r25, Y+6	; 0x06
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	9e 83       	std	Y+6, r25	; 0x06
    428a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    428c:	8d 81       	ldd	r24, Y+5	; 0x05
    428e:	9e 81       	ldd	r25, Y+6	; 0x06
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	69 f7       	brne	.-38     	; 0x426e <EEPROM_voidSendDataByte+0xd4>
    4294:	14 c0       	rjmp	.+40     	; 0x42be <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4296:	6f 81       	ldd	r22, Y+7	; 0x07
    4298:	78 85       	ldd	r23, Y+8	; 0x08
    429a:	89 85       	ldd	r24, Y+9	; 0x09
    429c:	9a 85       	ldd	r25, Y+10	; 0x0a
    429e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a2:	dc 01       	movw	r26, r24
    42a4:	cb 01       	movw	r24, r22
    42a6:	9e 83       	std	Y+6, r25	; 0x06
    42a8:	8d 83       	std	Y+5, r24	; 0x05
    42aa:	8d 81       	ldd	r24, Y+5	; 0x05
    42ac:	9e 81       	ldd	r25, Y+6	; 0x06
    42ae:	9a 83       	std	Y+2, r25	; 0x02
    42b0:	89 83       	std	Y+1, r24	; 0x01
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	9a 81       	ldd	r25, Y+2	; 0x02
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	f1 f7       	brne	.-4      	; 0x42b6 <EEPROM_voidSendDataByte+0x11c>
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);

}
    42be:	62 96       	adiw	r28, 0x12	; 18
    42c0:	0f b6       	in	r0, 0x3f	; 63
    42c2:	f8 94       	cli
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	0f be       	out	0x3f, r0	; 63
    42c8:	cd bf       	out	0x3d, r28	; 61
    42ca:	cf 91       	pop	r28
    42cc:	df 91       	pop	r29
    42ce:	08 95       	ret

000042d0 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    42d0:	df 93       	push	r29
    42d2:	cf 93       	push	r28
    42d4:	cd b7       	in	r28, 0x3d	; 61
    42d6:	de b7       	in	r29, 0x3e	; 62
    42d8:	62 97       	sbiw	r28, 0x12	; 18
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	f8 94       	cli
    42de:	de bf       	out	0x3e, r29	; 62
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	cd bf       	out	0x3d, r28	; 61
    42e4:	9a 8b       	std	Y+18, r25	; 0x12
    42e6:	89 8b       	std	Y+17, r24	; 0x11
	u8 Data ;
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    42e8:	89 89       	ldd	r24, Y+17	; 0x11
    42ea:	9a 89       	ldd	r25, Y+18	; 0x12
    42ec:	89 2f       	mov	r24, r25
    42ee:	99 27       	eor	r25, r25
    42f0:	80 65       	ori	r24, 0x50	; 80
    42f2:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    42f4:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    42f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    42fa:	0e 94 07 07 	call	0xe0e	; 0xe0e <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    42fe:	89 89       	ldd	r24, Y+17	; 0x11
    4300:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    4304:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_add);
    4308:	8f 85       	ldd	r24, Y+15	; 0x0f
    430a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <TWI_ErrorStatusSendSlaveAddressWithReadACK>

	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithACK(&Data);
    430e:	ce 01       	movw	r24, r28
    4310:	40 96       	adiw	r24, 0x10	; 16
    4312:	0e 94 9c 07 	call	0xf38	; 0xf38 <TWI_ErrorStatusMasterReadDataByteWithACK>

	/*send the stop condition*/
	TWI_voidSendStopCondition();
    4316:	0e 94 cb 07 	call	0xf96	; 0xf96 <TWI_voidSendStopCondition>
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	a0 e2       	ldi	r26, 0x20	; 32
    4320:	b1 e4       	ldi	r27, 0x41	; 65
    4322:	8b 87       	std	Y+11, r24	; 0x0b
    4324:	9c 87       	std	Y+12, r25	; 0x0c
    4326:	ad 87       	std	Y+13, r26	; 0x0d
    4328:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    432a:	6b 85       	ldd	r22, Y+11	; 0x0b
    432c:	7c 85       	ldd	r23, Y+12	; 0x0c
    432e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4330:	9e 85       	ldd	r25, Y+14	; 0x0e
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	4a ef       	ldi	r20, 0xFA	; 250
    4338:	54 e4       	ldi	r21, 0x44	; 68
    433a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    433e:	dc 01       	movw	r26, r24
    4340:	cb 01       	movw	r24, r22
    4342:	8f 83       	std	Y+7, r24	; 0x07
    4344:	98 87       	std	Y+8, r25	; 0x08
    4346:	a9 87       	std	Y+9, r26	; 0x09
    4348:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    434a:	6f 81       	ldd	r22, Y+7	; 0x07
    434c:	78 85       	ldd	r23, Y+8	; 0x08
    434e:	89 85       	ldd	r24, Y+9	; 0x09
    4350:	9a 85       	ldd	r25, Y+10	; 0x0a
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e8       	ldi	r20, 0x80	; 128
    4358:	5f e3       	ldi	r21, 0x3F	; 63
    435a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    435e:	88 23       	and	r24, r24
    4360:	2c f4       	brge	.+10     	; 0x436c <EEPROM_u8ReadDataByte+0x9c>
		__ticks = 1;
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	9e 83       	std	Y+6, r25	; 0x06
    4368:	8d 83       	std	Y+5, r24	; 0x05
    436a:	3f c0       	rjmp	.+126    	; 0x43ea <EEPROM_u8ReadDataByte+0x11a>
	else if (__tmp > 65535)
    436c:	6f 81       	ldd	r22, Y+7	; 0x07
    436e:	78 85       	ldd	r23, Y+8	; 0x08
    4370:	89 85       	ldd	r24, Y+9	; 0x09
    4372:	9a 85       	ldd	r25, Y+10	; 0x0a
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	3f ef       	ldi	r19, 0xFF	; 255
    4378:	4f e7       	ldi	r20, 0x7F	; 127
    437a:	57 e4       	ldi	r21, 0x47	; 71
    437c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4380:	18 16       	cp	r1, r24
    4382:	4c f5       	brge	.+82     	; 0x43d6 <EEPROM_u8ReadDataByte+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4384:	6b 85       	ldd	r22, Y+11	; 0x0b
    4386:	7c 85       	ldd	r23, Y+12	; 0x0c
    4388:	8d 85       	ldd	r24, Y+13	; 0x0d
    438a:	9e 85       	ldd	r25, Y+14	; 0x0e
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	40 e2       	ldi	r20, 0x20	; 32
    4392:	51 e4       	ldi	r21, 0x41	; 65
    4394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	bc 01       	movw	r22, r24
    439e:	cd 01       	movw	r24, r26
    43a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a4:	dc 01       	movw	r26, r24
    43a6:	cb 01       	movw	r24, r22
    43a8:	9e 83       	std	Y+6, r25	; 0x06
    43aa:	8d 83       	std	Y+5, r24	; 0x05
    43ac:	0f c0       	rjmp	.+30     	; 0x43cc <EEPROM_u8ReadDataByte+0xfc>
    43ae:	88 ec       	ldi	r24, 0xC8	; 200
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	9c 83       	std	Y+4, r25	; 0x04
    43b4:	8b 83       	std	Y+3, r24	; 0x03
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	f1 f7       	brne	.-4      	; 0x43ba <EEPROM_u8ReadDataByte+0xea>
    43be:	9c 83       	std	Y+4, r25	; 0x04
    43c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c2:	8d 81       	ldd	r24, Y+5	; 0x05
    43c4:	9e 81       	ldd	r25, Y+6	; 0x06
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	9e 83       	std	Y+6, r25	; 0x06
    43ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43cc:	8d 81       	ldd	r24, Y+5	; 0x05
    43ce:	9e 81       	ldd	r25, Y+6	; 0x06
    43d0:	00 97       	sbiw	r24, 0x00	; 0
    43d2:	69 f7       	brne	.-38     	; 0x43ae <EEPROM_u8ReadDataByte+0xde>
    43d4:	14 c0       	rjmp	.+40     	; 0x43fe <EEPROM_u8ReadDataByte+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43d6:	6f 81       	ldd	r22, Y+7	; 0x07
    43d8:	78 85       	ldd	r23, Y+8	; 0x08
    43da:	89 85       	ldd	r24, Y+9	; 0x09
    43dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	9e 83       	std	Y+6, r25	; 0x06
    43e8:	8d 83       	std	Y+5, r24	; 0x05
    43ea:	8d 81       	ldd	r24, Y+5	; 0x05
    43ec:	9e 81       	ldd	r25, Y+6	; 0x06
    43ee:	9a 83       	std	Y+2, r25	; 0x02
    43f0:	89 83       	std	Y+1, r24	; 0x01
    43f2:	89 81       	ldd	r24, Y+1	; 0x01
    43f4:	9a 81       	ldd	r25, Y+2	; 0x02
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	f1 f7       	brne	.-4      	; 0x43f6 <EEPROM_u8ReadDataByte+0x126>
    43fa:	9a 83       	std	Y+2, r25	; 0x02
    43fc:	89 83       	std	Y+1, r24	; 0x01
	/*Delay until the write cycle is finished*/
	_delay_ms(10);
	//return data
	return Data ;
    43fe:	88 89       	ldd	r24, Y+16	; 0x10
}
    4400:	62 96       	adiw	r28, 0x12	; 18
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
    440c:	cf 91       	pop	r28
    440e:	df 91       	pop	r29
    4410:	08 95       	ret

00004412 <DCM_voidInit>:
#include"DCM_private.h"
#include"DCM_interface.h"


void DCM_voidInit(void)
{
    4412:	df 93       	push	r29
    4414:	cf 93       	push	r28
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(DCM_PORT , DCM_C1 , OUTPUT) ;
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	41 e0       	ldi	r20, 0x01	; 1
    4420:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DCM_PORT , DCM_C2 , OUTPUT) ;
    4424:	82 e0       	ldi	r24, 0x02	; 2
    4426:	61 e0       	ldi	r22, 0x01	; 1
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>

}
    442e:	cf 91       	pop	r28
    4430:	df 91       	pop	r29
    4432:	08 95       	ret

00004434 <DCM_voidDirection>:

void DCM_voidDirection(u8 Copy_u8Direction)
{
    4434:	df 93       	push	r29
    4436:	cf 93       	push	r28
    4438:	00 d0       	rcall	.+0      	; 0x443a <DCM_voidDirection+0x6>
    443a:	0f 92       	push	r0
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Direction)
    4442:	89 81       	ldd	r24, Y+1	; 0x01
    4444:	28 2f       	mov	r18, r24
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	3b 83       	std	Y+3, r19	; 0x03
    444a:	2a 83       	std	Y+2, r18	; 0x02
    444c:	8a 81       	ldd	r24, Y+2	; 0x02
    444e:	9b 81       	ldd	r25, Y+3	; 0x03
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	81 f0       	breq	.+32     	; 0x4474 <DCM_voidDirection+0x40>
    4454:	2a 81       	ldd	r18, Y+2	; 0x02
    4456:	3b 81       	ldd	r19, Y+3	; 0x03
    4458:	21 30       	cpi	r18, 0x01	; 1
    445a:	31 05       	cpc	r19, r1
    445c:	a9 f4       	brne	.+42     	; 0x4488 <DCM_voidDirection+0x54>
	{
	case ClockWise :
		DIO_voidSetPinvalue(DCM_PORT , DCM_C1 ,HIGH);
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	60 e0       	ldi	r22, 0x00	; 0
    4462:	41 e0       	ldi	r20, 0x01	; 1
    4464:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
		DIO_voidSetPinvalue(DCM_PORT , DCM_C2 ,LOW);
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	61 e0       	ldi	r22, 0x01	; 1
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
    4472:	0a c0       	rjmp	.+20     	; 0x4488 <DCM_voidDirection+0x54>
		break ;
	case AntiClockWise :
		DIO_voidSetPinvalue(DCM_PORT , DCM_C2 ,HIGH);
    4474:	82 e0       	ldi	r24, 0x02	; 2
    4476:	61 e0       	ldi	r22, 0x01	; 1
    4478:	41 e0       	ldi	r20, 0x01	; 1
    447a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
		DIO_voidSetPinvalue(DCM_PORT , DCM_C1 ,LOW);
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	40 e0       	ldi	r20, 0x00	; 0
    4484:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
		break;
	default :
		break ;
	}

}
    4488:	0f 90       	pop	r0
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	08 95       	ret

00004494 <DCM_voidStop>:
void DCM_voidStop(void)
{
    4494:	df 93       	push	r29
    4496:	cf 93       	push	r28
    4498:	cd b7       	in	r28, 0x3d	; 61
    449a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinvalue(DCM_PORT , DCM_C1 ,LOW);
    449c:	82 e0       	ldi	r24, 0x02	; 2
    449e:	60 e0       	ldi	r22, 0x00	; 0
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(DCM_PORT , DCM_C2 ,LOW);
    44a6:	82 e0       	ldi	r24, 0x02	; 2
    44a8:	61 e0       	ldi	r22, 0x01	; 1
    44aa:	40 e0       	ldi	r20, 0x00	; 0
    44ac:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_voidSetPinvalue>
}
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	08 95       	ret

000044b6 <main>:
#include "../HAL/StepMotor/STP_interface.h"
#include "../HAL/DC_Motor/DCM_interface.h"


int main()
{
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <main+0x6>
    44bc:	cd b7       	in	r28, 0x3d	; 61
    44be:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(PORTD , PIN0 , OUTPUT);
    44c0:	83 e0       	ldi	r24, 0x03	; 3
    44c2:	60 e0       	ldi	r22, 0x00	; 0
    44c4:	41 e0       	ldi	r20, 0x01	; 1
    44c6:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD , PIN1 , INPUT);
    44ca:	83 e0       	ldi	r24, 0x03	; 3
    44cc:	61 e0       	ldi	r22, 0x01	; 1
    44ce:	40 e0       	ldi	r20, 0x00	; 0
    44d0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	u8 Recieved = 0 ;
    44d4:	1a 82       	std	Y+2, r1	; 0x02
	UART_voidInit();
    44d6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UART_voidInit>
	//servo
	DIO_voidSetPinDirection(PORTD ,PIN5 , OUTPUT);
    44da:	83 e0       	ldi	r24, 0x03	; 3
    44dc:	65 e0       	ldi	r22, 0x05	; 5
    44de:	41 e0       	ldi	r20, 0x01	; 1
    44e0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <DIO_voidSetPinDirection>
	TIMER1_voidInit() ;
    44e4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER1_voidInit>
	SevenSeg_voidInit(PORTB);
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	0e 94 13 1a 	call	0x3426	; 0x3426 <SevenSeg_voidInit>

	//eeprom
	u8 Return_Data =3 ;
    44ee:	83 e0       	ldi	r24, 0x03	; 3
    44f0:	89 83       	std	Y+1, r24	; 0x01
	TWI_voidInitMaster(0);
    44f2:	80 e0       	ldi	r24, 0x00	; 0
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_voidInitMaster>
	Return_Data = EEPROM_u8ReadDataByte(5);
    44fa:	85 e0       	ldi	r24, 0x05	; 5
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	0e 94 68 21 	call	0x42d0	; 0x42d0 <EEPROM_u8ReadDataByte>
    4502:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_voidSendDataByte(5,3);
    4504:	85 e0       	ldi	r24, 0x05	; 5
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	63 e0       	ldi	r22, 0x03	; 3
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	0e 94 cd 20 	call	0x419a	; 0x419a <EEPROM_voidSendDataByte>



	while(1)
	{
		UART_u8RecieveData(&Recieved);
    4510:	ce 01       	movw	r24, r28
    4512:	02 96       	adiw	r24, 0x02	; 2
    4514:	0e 94 54 06 	call	0xca8	; 0xca8 <UART_u8RecieveData>
		Return_Data = EEPROM_u8ReadDataByte(5);
    4518:	85 e0       	ldi	r24, 0x05	; 5
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	0e 94 68 21 	call	0x42d0	; 0x42d0 <EEPROM_u8ReadDataByte>
    4520:	89 83       	std	Y+1, r24	; 0x01

		if(Recieved == 's')
    4522:	8a 81       	ldd	r24, Y+2	; 0x02
    4524:	83 37       	cpi	r24, 0x73	; 115
    4526:	21 f4       	brne	.+8      	; 0x4530 <main+0x7a>
		{
			TIMER1_voidSetPinACompareMatch(1999);
    4528:	8f ec       	ldi	r24, 0xCF	; 207
    452a:	97 e0       	ldi	r25, 0x07	; 7
    452c:	0e 94 36 09 	call	0x126c	; 0x126c <TIMER1_voidSetPinACompareMatch>
		}
		if(Recieved == 'a')
    4530:	8a 81       	ldd	r24, Y+2	; 0x02
    4532:	81 36       	cpi	r24, 0x61	; 97
    4534:	21 f4       	brne	.+8      	; 0x453e <main+0x88>
		{
			SevenSeg_voidDisplayNumber(PORTB , Return_Data) ;
    4536:	81 e0       	ldi	r24, 0x01	; 1
    4538:	69 81       	ldd	r22, Y+1	; 0x01
    453a:	0e 94 20 1a 	call	0x3440	; 0x3440 <SevenSeg_voidDisplayNumber>
		}
		if(Recieved == 'b')
    453e:	8a 81       	ldd	r24, Y+2	; 0x02
    4540:	82 36       	cpi	r24, 0x62	; 98
    4542:	51 f4       	brne	.+20     	; 0x4558 <main+0xa2>
		{
			EEPROM_voidSendDataByte(5,2);
    4544:	85 e0       	ldi	r24, 0x05	; 5
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	62 e0       	ldi	r22, 0x02	; 2
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	0e 94 cd 20 	call	0x419a	; 0x419a <EEPROM_voidSendDataByte>
			SevenSeg_voidDisplayNumber(PORTB , Return_Data) ;
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	69 81       	ldd	r22, Y+1	; 0x01
    4554:	0e 94 20 1a 	call	0x3440	; 0x3440 <SevenSeg_voidDisplayNumber>
		}
		if(Recieved == 'c')
    4558:	8a 81       	ldd	r24, Y+2	; 0x02
    455a:	83 36       	cpi	r24, 0x63	; 99
    455c:	51 f4       	brne	.+20     	; 0x4572 <main+0xbc>
		{
			EEPROM_voidSendDataByte(5,1);
    455e:	85 e0       	ldi	r24, 0x05	; 5
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	61 e0       	ldi	r22, 0x01	; 1
    4564:	70 e0       	ldi	r23, 0x00	; 0
    4566:	0e 94 cd 20 	call	0x419a	; 0x419a <EEPROM_voidSendDataByte>
			SevenSeg_voidDisplayNumber(PORTB , Return_Data) ;		}
    456a:	81 e0       	ldi	r24, 0x01	; 1
    456c:	69 81       	ldd	r22, Y+1	; 0x01
    456e:	0e 94 20 1a 	call	0x3440	; 0x3440 <SevenSeg_voidDisplayNumber>
		if(Recieved == 'd')
    4572:	8a 81       	ldd	r24, Y+2	; 0x02
    4574:	84 36       	cpi	r24, 0x64	; 100
    4576:	61 f6       	brne	.-104    	; 0x4510 <main+0x5a>
		{
			EEPROM_voidSendDataByte(5,0);
    4578:	85 e0       	ldi	r24, 0x05	; 5
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	0e 94 cd 20 	call	0x419a	; 0x419a <EEPROM_voidSendDataByte>
			SevenSeg_voidDisplayNumber(PORTB , Return_Data) ;			}
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	69 81       	ldd	r22, Y+1	; 0x01
    4588:	0e 94 20 1a 	call	0x3440	; 0x3440 <SevenSeg_voidDisplayNumber>
    458c:	c1 cf       	rjmp	.-126    	; 0x4510 <main+0x5a>

0000458e <__mulsi3>:
    458e:	62 9f       	mul	r22, r18
    4590:	d0 01       	movw	r26, r0
    4592:	73 9f       	mul	r23, r19
    4594:	f0 01       	movw	r30, r0
    4596:	82 9f       	mul	r24, r18
    4598:	e0 0d       	add	r30, r0
    459a:	f1 1d       	adc	r31, r1
    459c:	64 9f       	mul	r22, r20
    459e:	e0 0d       	add	r30, r0
    45a0:	f1 1d       	adc	r31, r1
    45a2:	92 9f       	mul	r25, r18
    45a4:	f0 0d       	add	r31, r0
    45a6:	83 9f       	mul	r24, r19
    45a8:	f0 0d       	add	r31, r0
    45aa:	74 9f       	mul	r23, r20
    45ac:	f0 0d       	add	r31, r0
    45ae:	65 9f       	mul	r22, r21
    45b0:	f0 0d       	add	r31, r0
    45b2:	99 27       	eor	r25, r25
    45b4:	72 9f       	mul	r23, r18
    45b6:	b0 0d       	add	r27, r0
    45b8:	e1 1d       	adc	r30, r1
    45ba:	f9 1f       	adc	r31, r25
    45bc:	63 9f       	mul	r22, r19
    45be:	b0 0d       	add	r27, r0
    45c0:	e1 1d       	adc	r30, r1
    45c2:	f9 1f       	adc	r31, r25
    45c4:	bd 01       	movw	r22, r26
    45c6:	cf 01       	movw	r24, r30
    45c8:	11 24       	eor	r1, r1
    45ca:	08 95       	ret

000045cc <__udivmodhi4>:
    45cc:	aa 1b       	sub	r26, r26
    45ce:	bb 1b       	sub	r27, r27
    45d0:	51 e1       	ldi	r21, 0x11	; 17
    45d2:	07 c0       	rjmp	.+14     	; 0x45e2 <__udivmodhi4_ep>

000045d4 <__udivmodhi4_loop>:
    45d4:	aa 1f       	adc	r26, r26
    45d6:	bb 1f       	adc	r27, r27
    45d8:	a6 17       	cp	r26, r22
    45da:	b7 07       	cpc	r27, r23
    45dc:	10 f0       	brcs	.+4      	; 0x45e2 <__udivmodhi4_ep>
    45de:	a6 1b       	sub	r26, r22
    45e0:	b7 0b       	sbc	r27, r23

000045e2 <__udivmodhi4_ep>:
    45e2:	88 1f       	adc	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	5a 95       	dec	r21
    45e8:	a9 f7       	brne	.-22     	; 0x45d4 <__udivmodhi4_loop>
    45ea:	80 95       	com	r24
    45ec:	90 95       	com	r25
    45ee:	bc 01       	movw	r22, r24
    45f0:	cd 01       	movw	r24, r26
    45f2:	08 95       	ret

000045f4 <__udivmodsi4>:
    45f4:	a1 e2       	ldi	r26, 0x21	; 33
    45f6:	1a 2e       	mov	r1, r26
    45f8:	aa 1b       	sub	r26, r26
    45fa:	bb 1b       	sub	r27, r27
    45fc:	fd 01       	movw	r30, r26
    45fe:	0d c0       	rjmp	.+26     	; 0x461a <__udivmodsi4_ep>

00004600 <__udivmodsi4_loop>:
    4600:	aa 1f       	adc	r26, r26
    4602:	bb 1f       	adc	r27, r27
    4604:	ee 1f       	adc	r30, r30
    4606:	ff 1f       	adc	r31, r31
    4608:	a2 17       	cp	r26, r18
    460a:	b3 07       	cpc	r27, r19
    460c:	e4 07       	cpc	r30, r20
    460e:	f5 07       	cpc	r31, r21
    4610:	20 f0       	brcs	.+8      	; 0x461a <__udivmodsi4_ep>
    4612:	a2 1b       	sub	r26, r18
    4614:	b3 0b       	sbc	r27, r19
    4616:	e4 0b       	sbc	r30, r20
    4618:	f5 0b       	sbc	r31, r21

0000461a <__udivmodsi4_ep>:
    461a:	66 1f       	adc	r22, r22
    461c:	77 1f       	adc	r23, r23
    461e:	88 1f       	adc	r24, r24
    4620:	99 1f       	adc	r25, r25
    4622:	1a 94       	dec	r1
    4624:	69 f7       	brne	.-38     	; 0x4600 <__udivmodsi4_loop>
    4626:	60 95       	com	r22
    4628:	70 95       	com	r23
    462a:	80 95       	com	r24
    462c:	90 95       	com	r25
    462e:	9b 01       	movw	r18, r22
    4630:	ac 01       	movw	r20, r24
    4632:	bd 01       	movw	r22, r26
    4634:	cf 01       	movw	r24, r30
    4636:	08 95       	ret

00004638 <__prologue_saves__>:
    4638:	2f 92       	push	r2
    463a:	3f 92       	push	r3
    463c:	4f 92       	push	r4
    463e:	5f 92       	push	r5
    4640:	6f 92       	push	r6
    4642:	7f 92       	push	r7
    4644:	8f 92       	push	r8
    4646:	9f 92       	push	r9
    4648:	af 92       	push	r10
    464a:	bf 92       	push	r11
    464c:	cf 92       	push	r12
    464e:	df 92       	push	r13
    4650:	ef 92       	push	r14
    4652:	ff 92       	push	r15
    4654:	0f 93       	push	r16
    4656:	1f 93       	push	r17
    4658:	cf 93       	push	r28
    465a:	df 93       	push	r29
    465c:	cd b7       	in	r28, 0x3d	; 61
    465e:	de b7       	in	r29, 0x3e	; 62
    4660:	ca 1b       	sub	r28, r26
    4662:	db 0b       	sbc	r29, r27
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	f8 94       	cli
    4668:	de bf       	out	0x3e, r29	; 62
    466a:	0f be       	out	0x3f, r0	; 63
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	09 94       	ijmp

00004670 <__epilogue_restores__>:
    4670:	2a 88       	ldd	r2, Y+18	; 0x12
    4672:	39 88       	ldd	r3, Y+17	; 0x11
    4674:	48 88       	ldd	r4, Y+16	; 0x10
    4676:	5f 84       	ldd	r5, Y+15	; 0x0f
    4678:	6e 84       	ldd	r6, Y+14	; 0x0e
    467a:	7d 84       	ldd	r7, Y+13	; 0x0d
    467c:	8c 84       	ldd	r8, Y+12	; 0x0c
    467e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4680:	aa 84       	ldd	r10, Y+10	; 0x0a
    4682:	b9 84       	ldd	r11, Y+9	; 0x09
    4684:	c8 84       	ldd	r12, Y+8	; 0x08
    4686:	df 80       	ldd	r13, Y+7	; 0x07
    4688:	ee 80       	ldd	r14, Y+6	; 0x06
    468a:	fd 80       	ldd	r15, Y+5	; 0x05
    468c:	0c 81       	ldd	r16, Y+4	; 0x04
    468e:	1b 81       	ldd	r17, Y+3	; 0x03
    4690:	aa 81       	ldd	r26, Y+2	; 0x02
    4692:	b9 81       	ldd	r27, Y+1	; 0x01
    4694:	ce 0f       	add	r28, r30
    4696:	d1 1d       	adc	r29, r1
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	ed 01       	movw	r28, r26
    46a4:	08 95       	ret

000046a6 <_exit>:
    46a6:	f8 94       	cli

000046a8 <__stop_program>:
    46a8:	ff cf       	rjmp	.-2      	; 0x46a8 <__stop_program>
